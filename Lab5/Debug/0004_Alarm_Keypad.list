
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008680  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed0  08008850  08008850  00009850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009720  08009720  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009720  08009720  0000a720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009728  08009728  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009728  08009728  0000a728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800972c  0800972c  0000a72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08009730  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005054  2000006c  0800979c  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050c0  0800979c  0000b0c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b92c  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bf4  00000000  00000000  000269c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  0002a5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000132e  00000000  00000000  0002be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024660  00000000  00000000  0002d166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7d7  00000000  00000000  000517c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de461  00000000  00000000  0006ef9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d3fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cf4  00000000  00000000  0014d444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00154138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008838 	.word	0x08008838

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08008838 	.word	0x08008838

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	int done=1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	607b      	str	r3, [r7, #4]
	while(done)
 80005ba:	e19b      	b.n	80008f4 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005c2:	48b3      	ldr	r0, [pc, #716]	@ (8000890 <Get_Key+0x2e0>)
 80005c4:	f001 fe1e 	bl	8002204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80005c8:	2200      	movs	r2, #0
 80005ca:	2110      	movs	r1, #16
 80005cc:	48b0      	ldr	r0, [pc, #704]	@ (8000890 <Get_Key+0x2e0>)
 80005ce:	f001 fe19 	bl	8002204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005d2:	2200      	movs	r2, #0
 80005d4:	2120      	movs	r1, #32
 80005d6:	48ae      	ldr	r0, [pc, #696]	@ (8000890 <Get_Key+0x2e0>)
 80005d8:	f001 fe14 	bl	8002204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80005dc:	2200      	movs	r2, #0
 80005de:	2108      	movs	r1, #8
 80005e0:	48ab      	ldr	r0, [pc, #684]	@ (8000890 <Get_Key+0x2e0>)
 80005e2:	f001 fe0f 	bl	8002204 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80005e6:	2140      	movs	r1, #64	@ 0x40
 80005e8:	48a9      	ldr	r0, [pc, #676]	@ (8000890 <Get_Key+0x2e0>)
 80005ea:	f001 fdf3 	bl	80021d4 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00b      	beq.n	800060c <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80005f4:	bf00      	nop
 80005f6:	2140      	movs	r1, #64	@ 0x40
 80005f8:	48a5      	ldr	r0, [pc, #660]	@ (8000890 <Get_Key+0x2e0>)
 80005fa:	f001 fdeb 	bl	80021d4 <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1f8      	bne.n	80005f6 <Get_Key+0x46>
		key='1';
 8000604:	4ba3      	ldr	r3, [pc, #652]	@ (8000894 <Get_Key+0x2e4>)
 8000606:	2231      	movs	r2, #49	@ 0x31
 8000608:	701a      	strb	r2, [r3, #0]
		break;
 800060a:	e177      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800060c:	2180      	movs	r1, #128	@ 0x80
 800060e:	48a2      	ldr	r0, [pc, #648]	@ (8000898 <Get_Key+0x2e8>)
 8000610:	f001 fde0 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00b      	beq.n	8000632 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800061a:	bf00      	nop
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	489e      	ldr	r0, [pc, #632]	@ (8000898 <Get_Key+0x2e8>)
 8000620:	f001 fdd8 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1f8      	bne.n	800061c <Get_Key+0x6c>
		key='4';
 800062a:	4b9a      	ldr	r3, [pc, #616]	@ (8000894 <Get_Key+0x2e4>)
 800062c:	2234      	movs	r2, #52	@ 0x34
 800062e:	701a      	strb	r2, [r3, #0]
		break;
 8000630:	e164      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000632:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000636:	4899      	ldr	r0, [pc, #612]	@ (800089c <Get_Key+0x2ec>)
 8000638:	f001 fdcc 	bl	80021d4 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d00c      	beq.n	800065c <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000642:	bf00      	nop
 8000644:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000648:	4894      	ldr	r0, [pc, #592]	@ (800089c <Get_Key+0x2ec>)
 800064a:	f001 fdc3 	bl	80021d4 <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1f7      	bne.n	8000644 <Get_Key+0x94>
		key='7';
 8000654:	4b8f      	ldr	r3, [pc, #572]	@ (8000894 <Get_Key+0x2e4>)
 8000656:	2237      	movs	r2, #55	@ 0x37
 8000658:	701a      	strb	r2, [r3, #0]
		break;
 800065a:	e14f      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800065c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000660:	488e      	ldr	r0, [pc, #568]	@ (800089c <Get_Key+0x2ec>)
 8000662:	f001 fdb7 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00c      	beq.n	8000686 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800066c:	bf00      	nop
 800066e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000672:	488a      	ldr	r0, [pc, #552]	@ (800089c <Get_Key+0x2ec>)
 8000674:	f001 fdae 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1f7      	bne.n	800066e <Get_Key+0xbe>
		key='*';
 800067e:	4b85      	ldr	r3, [pc, #532]	@ (8000894 <Get_Key+0x2e4>)
 8000680:	222a      	movs	r2, #42	@ 0x2a
 8000682:	701a      	strb	r2, [r3, #0]
		break;
 8000684:	e13a      	b.n	80008fc <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068c:	4880      	ldr	r0, [pc, #512]	@ (8000890 <Get_Key+0x2e0>)
 800068e:	f001 fdb9 	bl	8002204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000692:	2201      	movs	r2, #1
 8000694:	2110      	movs	r1, #16
 8000696:	487e      	ldr	r0, [pc, #504]	@ (8000890 <Get_Key+0x2e0>)
 8000698:	f001 fdb4 	bl	8002204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800069c:	2200      	movs	r2, #0
 800069e:	2120      	movs	r1, #32
 80006a0:	487b      	ldr	r0, [pc, #492]	@ (8000890 <Get_Key+0x2e0>)
 80006a2:	f001 fdaf 	bl	8002204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80006a6:	2200      	movs	r2, #0
 80006a8:	2108      	movs	r1, #8
 80006aa:	4879      	ldr	r0, [pc, #484]	@ (8000890 <Get_Key+0x2e0>)
 80006ac:	f001 fdaa 	bl	8002204 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006b0:	2140      	movs	r1, #64	@ 0x40
 80006b2:	4877      	ldr	r0, [pc, #476]	@ (8000890 <Get_Key+0x2e0>)
 80006b4:	f001 fd8e 	bl	80021d4 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d00b      	beq.n	80006d6 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006be:	bf00      	nop
 80006c0:	2140      	movs	r1, #64	@ 0x40
 80006c2:	4873      	ldr	r0, [pc, #460]	@ (8000890 <Get_Key+0x2e0>)
 80006c4:	f001 fd86 	bl	80021d4 <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f8      	bne.n	80006c0 <Get_Key+0x110>
		key='2';
 80006ce:	4b71      	ldr	r3, [pc, #452]	@ (8000894 <Get_Key+0x2e4>)
 80006d0:	2232      	movs	r2, #50	@ 0x32
 80006d2:	701a      	strb	r2, [r3, #0]
		break;
 80006d4:	e112      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006d6:	2180      	movs	r1, #128	@ 0x80
 80006d8:	486f      	ldr	r0, [pc, #444]	@ (8000898 <Get_Key+0x2e8>)
 80006da:	f001 fd7b 	bl	80021d4 <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00b      	beq.n	80006fc <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80006e4:	bf00      	nop
 80006e6:	2180      	movs	r1, #128	@ 0x80
 80006e8:	486b      	ldr	r0, [pc, #428]	@ (8000898 <Get_Key+0x2e8>)
 80006ea:	f001 fd73 	bl	80021d4 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f8      	bne.n	80006e6 <Get_Key+0x136>
		key='5';
 80006f4:	4b67      	ldr	r3, [pc, #412]	@ (8000894 <Get_Key+0x2e4>)
 80006f6:	2235      	movs	r2, #53	@ 0x35
 80006f8:	701a      	strb	r2, [r3, #0]
		break;
 80006fa:	e0ff      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80006fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000700:	4866      	ldr	r0, [pc, #408]	@ (800089c <Get_Key+0x2ec>)
 8000702:	f001 fd67 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d00c      	beq.n	8000726 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800070c:	bf00      	nop
 800070e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000712:	4862      	ldr	r0, [pc, #392]	@ (800089c <Get_Key+0x2ec>)
 8000714:	f001 fd5e 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f7      	bne.n	800070e <Get_Key+0x15e>
		key='8';
 800071e:	4b5d      	ldr	r3, [pc, #372]	@ (8000894 <Get_Key+0x2e4>)
 8000720:	2238      	movs	r2, #56	@ 0x38
 8000722:	701a      	strb	r2, [r3, #0]
		break;
 8000724:	e0ea      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000726:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800072a:	485c      	ldr	r0, [pc, #368]	@ (800089c <Get_Key+0x2ec>)
 800072c:	f001 fd52 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d00c      	beq.n	8000750 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000736:	bf00      	nop
 8000738:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800073c:	4857      	ldr	r0, [pc, #348]	@ (800089c <Get_Key+0x2ec>)
 800073e:	f001 fd49 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f7      	bne.n	8000738 <Get_Key+0x188>
		key='0';
 8000748:	4b52      	ldr	r3, [pc, #328]	@ (8000894 <Get_Key+0x2e4>)
 800074a:	2230      	movs	r2, #48	@ 0x30
 800074c:	701a      	strb	r2, [r3, #0]
		break;
 800074e:	e0d5      	b.n	80008fc <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000756:	484e      	ldr	r0, [pc, #312]	@ (8000890 <Get_Key+0x2e0>)
 8000758:	f001 fd54 	bl	8002204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 800075c:	2200      	movs	r2, #0
 800075e:	2110      	movs	r1, #16
 8000760:	484b      	ldr	r0, [pc, #300]	@ (8000890 <Get_Key+0x2e0>)
 8000762:	f001 fd4f 	bl	8002204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000766:	2201      	movs	r2, #1
 8000768:	2120      	movs	r1, #32
 800076a:	4849      	ldr	r0, [pc, #292]	@ (8000890 <Get_Key+0x2e0>)
 800076c:	f001 fd4a 	bl	8002204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 8000770:	2200      	movs	r2, #0
 8000772:	2108      	movs	r1, #8
 8000774:	4846      	ldr	r0, [pc, #280]	@ (8000890 <Get_Key+0x2e0>)
 8000776:	f001 fd45 	bl	8002204 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800077a:	2140      	movs	r1, #64	@ 0x40
 800077c:	4844      	ldr	r0, [pc, #272]	@ (8000890 <Get_Key+0x2e0>)
 800077e:	f001 fd29 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00b      	beq.n	80007a0 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000788:	bf00      	nop
 800078a:	2140      	movs	r1, #64	@ 0x40
 800078c:	4840      	ldr	r0, [pc, #256]	@ (8000890 <Get_Key+0x2e0>)
 800078e:	f001 fd21 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f8      	bne.n	800078a <Get_Key+0x1da>
		key='3';
 8000798:	4b3e      	ldr	r3, [pc, #248]	@ (8000894 <Get_Key+0x2e4>)
 800079a:	2233      	movs	r2, #51	@ 0x33
 800079c:	701a      	strb	r2, [r3, #0]
		break;
 800079e:	e0ad      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007a0:	2180      	movs	r1, #128	@ 0x80
 80007a2:	483d      	ldr	r0, [pc, #244]	@ (8000898 <Get_Key+0x2e8>)
 80007a4:	f001 fd16 	bl	80021d4 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00b      	beq.n	80007c6 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ae:	bf00      	nop
 80007b0:	2180      	movs	r1, #128	@ 0x80
 80007b2:	4839      	ldr	r0, [pc, #228]	@ (8000898 <Get_Key+0x2e8>)
 80007b4:	f001 fd0e 	bl	80021d4 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1f8      	bne.n	80007b0 <Get_Key+0x200>
		key='6';
 80007be:	4b35      	ldr	r3, [pc, #212]	@ (8000894 <Get_Key+0x2e4>)
 80007c0:	2236      	movs	r2, #54	@ 0x36
 80007c2:	701a      	strb	r2, [r3, #0]
		break;
 80007c4:	e09a      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ca:	4834      	ldr	r0, [pc, #208]	@ (800089c <Get_Key+0x2ec>)
 80007cc:	f001 fd02 	bl	80021d4 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d00c      	beq.n	80007f0 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80007d6:	bf00      	nop
 80007d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007dc:	482f      	ldr	r0, [pc, #188]	@ (800089c <Get_Key+0x2ec>)
 80007de:	f001 fcf9 	bl	80021d4 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1f7      	bne.n	80007d8 <Get_Key+0x228>
		key='9';
 80007e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <Get_Key+0x2e4>)
 80007ea:	2239      	movs	r2, #57	@ 0x39
 80007ec:	701a      	strb	r2, [r3, #0]
		break;
 80007ee:	e085      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80007f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007f4:	4829      	ldr	r0, [pc, #164]	@ (800089c <Get_Key+0x2ec>)
 80007f6:	f001 fced 	bl	80021d4 <HAL_GPIO_ReadPin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00c      	beq.n	800081a <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000800:	bf00      	nop
 8000802:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000806:	4825      	ldr	r0, [pc, #148]	@ (800089c <Get_Key+0x2ec>)
 8000808:	f001 fce4 	bl	80021d4 <HAL_GPIO_ReadPin>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d1f7      	bne.n	8000802 <Get_Key+0x252>
		key='#';
 8000812:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <Get_Key+0x2e4>)
 8000814:	2223      	movs	r2, #35	@ 0x23
 8000816:	701a      	strb	r2, [r3, #0]
		break;
 8000818:	e070      	b.n	80008fc <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000820:	481b      	ldr	r0, [pc, #108]	@ (8000890 <Get_Key+0x2e0>)
 8000822:	f001 fcef 	bl	8002204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000826:	2200      	movs	r2, #0
 8000828:	2110      	movs	r1, #16
 800082a:	4819      	ldr	r0, [pc, #100]	@ (8000890 <Get_Key+0x2e0>)
 800082c:	f001 fcea 	bl	8002204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000830:	2200      	movs	r2, #0
 8000832:	2120      	movs	r1, #32
 8000834:	4816      	ldr	r0, [pc, #88]	@ (8000890 <Get_Key+0x2e0>)
 8000836:	f001 fce5 	bl	8002204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 800083a:	2201      	movs	r2, #1
 800083c:	2108      	movs	r1, #8
 800083e:	4814      	ldr	r0, [pc, #80]	@ (8000890 <Get_Key+0x2e0>)
 8000840:	f001 fce0 	bl	8002204 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000844:	2140      	movs	r1, #64	@ 0x40
 8000846:	4812      	ldr	r0, [pc, #72]	@ (8000890 <Get_Key+0x2e0>)
 8000848:	f001 fcc4 	bl	80021d4 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d00b      	beq.n	800086a <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000852:	bf00      	nop
 8000854:	2140      	movs	r1, #64	@ 0x40
 8000856:	480e      	ldr	r0, [pc, #56]	@ (8000890 <Get_Key+0x2e0>)
 8000858:	f001 fcbc 	bl	80021d4 <HAL_GPIO_ReadPin>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1f8      	bne.n	8000854 <Get_Key+0x2a4>
		key='A';
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <Get_Key+0x2e4>)
 8000864:	2241      	movs	r2, #65	@ 0x41
 8000866:	701a      	strb	r2, [r3, #0]
		break;
 8000868:	e048      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800086a:	2180      	movs	r1, #128	@ 0x80
 800086c:	480a      	ldr	r0, [pc, #40]	@ (8000898 <Get_Key+0x2e8>)
 800086e:	f001 fcb1 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d013      	beq.n	80008a0 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000878:	bf00      	nop
 800087a:	2180      	movs	r1, #128	@ 0x80
 800087c:	4806      	ldr	r0, [pc, #24]	@ (8000898 <Get_Key+0x2e8>)
 800087e:	f001 fca9 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1f8      	bne.n	800087a <Get_Key+0x2ca>
		key='B';
 8000888:	4b02      	ldr	r3, [pc, #8]	@ (8000894 <Get_Key+0x2e4>)
 800088a:	2242      	movs	r2, #66	@ 0x42
 800088c:	701a      	strb	r2, [r3, #0]
		break;
 800088e:	e035      	b.n	80008fc <Get_Key+0x34c>
 8000890:	40020400 	.word	0x40020400
 8000894:	20000088 	.word	0x20000088
 8000898:	40020800 	.word	0x40020800
 800089c:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80008a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008a4:	481a      	ldr	r0, [pc, #104]	@ (8000910 <Get_Key+0x360>)
 80008a6:	f001 fc95 	bl	80021d4 <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d00c      	beq.n	80008ca <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80008b0:	bf00      	nop
 80008b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b6:	4816      	ldr	r0, [pc, #88]	@ (8000910 <Get_Key+0x360>)
 80008b8:	f001 fc8c 	bl	80021d4 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f7      	bne.n	80008b2 <Get_Key+0x302>
		key='C';
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <Get_Key+0x364>)
 80008c4:	2243      	movs	r2, #67	@ 0x43
 80008c6:	701a      	strb	r2, [r3, #0]
		break;
 80008c8:	e018      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80008ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ce:	4810      	ldr	r0, [pc, #64]	@ (8000910 <Get_Key+0x360>)
 80008d0:	f001 fc80 	bl	80021d4 <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00c      	beq.n	80008f4 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80008da:	bf00      	nop
 80008dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e0:	480b      	ldr	r0, [pc, #44]	@ (8000910 <Get_Key+0x360>)
 80008e2:	f001 fc77 	bl	80021d4 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1f7      	bne.n	80008dc <Get_Key+0x32c>
		key='D';
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <Get_Key+0x364>)
 80008ee:	2244      	movs	r2, #68	@ 0x44
 80008f0:	701a      	strb	r2, [r3, #0]
		break;
 80008f2:	e003      	b.n	80008fc <Get_Key+0x34c>
	while(done)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f47f ae60 	bne.w	80005bc <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008fc:	2120      	movs	r1, #32
 80008fe:	4804      	ldr	r0, [pc, #16]	@ (8000910 <Get_Key+0x360>)
 8000900:	f001 fc99 	bl	8002236 <HAL_GPIO_TogglePin>
	return(key);
 8000904:	4b03      	ldr	r3, [pc, #12]	@ (8000914 <Get_Key+0x364>)
 8000906:	781b      	ldrb	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40020000 	.word	0x40020000
 8000914:	20000088 	.word	0x20000088

08000918 <vTimerCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vTimerCallback(TimerHandle_t xTimer) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
    seconds++;
 8000920:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <vTimerCallback+0x50>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <vTimerCallback+0x50>)
 800092a:	701a      	strb	r2, [r3, #0]



    sprintf(msg, "%d sec\r\n", seconds);
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <vTimerCallback+0x50>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	490e      	ldr	r1, [pc, #56]	@ (800096c <vTimerCallback+0x54>)
 8000934:	480e      	ldr	r0, [pc, #56]	@ (8000970 <vTimerCallback+0x58>)
 8000936:	f007 fadf 	bl	8007ef8 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800093a:	480d      	ldr	r0, [pc, #52]	@ (8000970 <vTimerCallback+0x58>)
 800093c:	f7ff fc68 	bl	8000210 <strlen>
 8000940:	4603      	mov	r3, r0
 8000942:	b29a      	uxth	r2, r3
 8000944:	f04f 33ff 	mov.w	r3, #4294967295
 8000948:	4909      	ldr	r1, [pc, #36]	@ (8000970 <vTimerCallback+0x58>)
 800094a:	480a      	ldr	r0, [pc, #40]	@ (8000974 <vTimerCallback+0x5c>)
 800094c:	f004 f8f4 	bl	8004b38 <HAL_UART_Transmit>

    if (seconds >= 60) {
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <vTimerCallback+0x50>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b3b      	cmp	r3, #59	@ 0x3b
 8000956:	d902      	bls.n	800095e <vTimerCallback+0x46>
        seconds = 0;
 8000958:	4b03      	ldr	r3, [pc, #12]	@ (8000968 <vTimerCallback+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
    }
//    alarmgraceperiod--;
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200001c8 	.word	0x200001c8
 800096c:	08008880 	.word	0x08008880
 8000970:	200001a4 	.word	0x200001a4
 8000974:	20000128 	.word	0x20000128

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097c:	f001 f972 	bl	8001c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000980:	f000 f866 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000984:	f000 f9a0 	bl	8000cc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000988:	f000 f974 	bl	8000c74 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800098c:	f000 f8ce 	bl	8000b2c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000990:	f000 f8fa 	bl	8000b88 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    SSD1306_Init();
 8000994:	f000 fc78 	bl	8001288 <SSD1306_Init>
    SSD1306_GotoXY (0,0);
 8000998:	2100      	movs	r1, #0
 800099a:	2000      	movs	r0, #0
 800099c:	f000 fdde 	bl	800155c <SSD1306_GotoXY>
    //SSD1306_Puts ("Voltage:", &Font_11x18, 1);
    SSD1306_Puts ("Lab:", &Font_11x18, 1);
 80009a0:	2201      	movs	r2, #1
 80009a2:	491c      	ldr	r1, [pc, #112]	@ (8000a14 <main+0x9c>)
 80009a4:	481c      	ldr	r0, [pc, #112]	@ (8000a18 <main+0xa0>)
 80009a6:	f000 fe6d 	bl	8001684 <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 80009aa:	211e      	movs	r1, #30
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 fdd5 	bl	800155c <SSD1306_GotoXY>
    SSD1306_UpdateScreen();
 80009b2:	f000 fd2d 	bl	8001410 <SSD1306_UpdateScreen>
    osDelay (500);
 80009b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009ba:	f004 fd99 	bl	80054f0 <osDelay>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80009be:	2104      	movs	r1, #4
 80009c0:	4816      	ldr	r0, [pc, #88]	@ (8000a1c <main+0xa4>)
 80009c2:	f003 f953 	bl	8003c6c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009c6:	f004 fcb7 	bl	8005338 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009ca:	4a15      	ldr	r2, [pc, #84]	@ (8000a20 <main+0xa8>)
 80009cc:	2100      	movs	r1, #0
 80009ce:	4815      	ldr	r0, [pc, #84]	@ (8000a24 <main+0xac>)
 80009d0:	f004 fcfc 	bl	80053cc <osThreadNew>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4a14      	ldr	r2, [pc, #80]	@ (8000a28 <main+0xb0>)
 80009d8:	6013      	str	r3, [r2, #0]

  /* creation of keypadTast */
  keypadTastHandle = osThreadNew(StartKeypadTask, NULL, &keypadTast_attributes);
 80009da:	4a14      	ldr	r2, [pc, #80]	@ (8000a2c <main+0xb4>)
 80009dc:	2100      	movs	r1, #0
 80009de:	4814      	ldr	r0, [pc, #80]	@ (8000a30 <main+0xb8>)
 80009e0:	f004 fcf4 	bl	80053cc <osThreadNew>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a13      	ldr	r2, [pc, #76]	@ (8000a34 <main+0xbc>)
 80009e8:	6013      	str	r3, [r2, #0]

  /* creation of motionTask */
  motionTaskHandle = osThreadNew(StartMotionSensor, NULL, &motionTask_attributes);
 80009ea:	4a13      	ldr	r2, [pc, #76]	@ (8000a38 <main+0xc0>)
 80009ec:	2100      	movs	r1, #0
 80009ee:	4813      	ldr	r0, [pc, #76]	@ (8000a3c <main+0xc4>)
 80009f0:	f004 fcec 	bl	80053cc <osThreadNew>
 80009f4:	4603      	mov	r3, r0
 80009f6:	4a12      	ldr	r2, [pc, #72]	@ (8000a40 <main+0xc8>)
 80009f8:	6013      	str	r3, [r2, #0]

  /* creation of outputTask */
  outputTaskHandle = osThreadNew(StartOutputTask, NULL, &outputTask_attributes);
 80009fa:	4a12      	ldr	r2, [pc, #72]	@ (8000a44 <main+0xcc>)
 80009fc:	2100      	movs	r1, #0
 80009fe:	4812      	ldr	r0, [pc, #72]	@ (8000a48 <main+0xd0>)
 8000a00:	f004 fce4 	bl	80053cc <osThreadNew>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4a11      	ldr	r2, [pc, #68]	@ (8000a4c <main+0xd4>)
 8000a08:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a0a:	f004 fcb9 	bl	8005380 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000a0e:	bf00      	nop
 8000a10:	e7fd      	b.n	8000a0e <main+0x96>
 8000a12:	bf00      	nop
 8000a14:	20000000 	.word	0x20000000
 8000a18:	0800888c 	.word	0x0800888c
 8000a1c:	200000e0 	.word	0x200000e0
 8000a20:	08009644 	.word	0x08009644
 8000a24:	08000e1d 	.word	0x08000e1d
 8000a28:	20000170 	.word	0x20000170
 8000a2c:	08009668 	.word	0x08009668
 8000a30:	08000ec9 	.word	0x08000ec9
 8000a34:	20000174 	.word	0x20000174
 8000a38:	0800968c 	.word	0x0800968c
 8000a3c:	08001081 	.word	0x08001081
 8000a40:	20000178 	.word	0x20000178
 8000a44:	080096b0 	.word	0x080096b0
 8000a48:	08001145 	.word	0x08001145
 8000a4c:	2000017c 	.word	0x2000017c

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b094      	sub	sp, #80	@ 0x50
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	2234      	movs	r2, #52	@ 0x34
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f007 fa6a 	bl	8007f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	f107 0308 	add.w	r3, r7, #8
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	4b2a      	ldr	r3, [pc, #168]	@ (8000b24 <SystemClock_Config+0xd4>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7c:	4a29      	ldr	r2, [pc, #164]	@ (8000b24 <SystemClock_Config+0xd4>)
 8000a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a84:	4b27      	ldr	r3, [pc, #156]	@ (8000b24 <SystemClock_Config+0xd4>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a90:	2300      	movs	r3, #0
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	4b24      	ldr	r3, [pc, #144]	@ (8000b28 <SystemClock_Config+0xd8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a9c:	4a22      	ldr	r2, [pc, #136]	@ (8000b28 <SystemClock_Config+0xd8>)
 8000a9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	4b20      	ldr	r3, [pc, #128]	@ (8000b28 <SystemClock_Config+0xd8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab8:	2310      	movs	r3, #16
 8000aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abc:	2302      	movs	r3, #2
 8000abe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ac8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000acc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f002 fd0c 	bl	80034fc <HAL_RCC_OscConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aea:	f000 fbc7 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aee:	230f      	movs	r3, #15
 8000af0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af2:	2302      	movs	r3, #2
 8000af4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000afa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	2102      	movs	r1, #2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 f97a 	bl	8002e04 <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b16:	f000 fbb1 	bl	800127c <Error_Handler>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3750      	adds	r7, #80	@ 0x50
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40007000 	.word	0x40007000

08000b2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b32:	4a13      	ldr	r2, [pc, #76]	@ (8000b80 <MX_I2C1_Init+0x54>)
 8000b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b38:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <MX_I2C1_Init+0x58>)
 8000b3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b6a:	f001 fb7f 	bl	800226c <HAL_I2C_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b74:	f000 fb82 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	2000008c 	.word	0x2000008c
 8000b80:	40005400 	.word	0x40005400
 8000b84:	00061a80 	.word	0x00061a80

08000b88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08e      	sub	sp, #56	@ 0x38
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	f107 0320 	add.w	r3, r7, #32
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	615a      	str	r2, [r3, #20]
 8000bb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000bba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000bc2:	22b3      	movs	r2, #179	@ 0xb3
 8000bc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000bcc:	4b28      	ldr	r3, [pc, #160]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000bce:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000bd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd4:	4b26      	ldr	r3, [pc, #152]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b25      	ldr	r3, [pc, #148]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be0:	4823      	ldr	r0, [pc, #140]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000be2:	f002 ff29 	bl	8003a38 <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000bec:	f000 fb46 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481c      	ldr	r0, [pc, #112]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000bfe:	f003 faaf 	bl	8004160 <HAL_TIM_ConfigClockSource>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c08:	f000 fb38 	bl	800127c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c0c:	4818      	ldr	r0, [pc, #96]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000c0e:	f002 ffd3 	bl	8003bb8 <HAL_TIM_PWM_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c18:	f000 fb30 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4811      	ldr	r0, [pc, #68]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000c2c:	f003 fea4 	bl	8004978 <HAL_TIMEx_MasterConfigSynchronization>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c36:	f000 fb21 	bl	800127c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3a:	2360      	movs	r3, #96	@ 0x60
 8000c3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000c52:	f003 f9c3 	bl	8003fdc <HAL_TIM_PWM_ConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c5c:	f000 fb0e 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c60:	4803      	ldr	r0, [pc, #12]	@ (8000c70 <MX_TIM2_Init+0xe8>)
 8000c62:	f000 fe6b 	bl	800193c <HAL_TIM_MspPostInit>

}
 8000c66:	bf00      	nop
 8000c68:	3738      	adds	r7, #56	@ 0x38
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000e0 	.word	0x200000e0

08000c74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	@ (8000cc4 <MX_USART2_UART_Init+0x50>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000cac:	f003 fef4 	bl	8004a98 <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cb6:	f000 fae1 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000128 	.word	0x20000128
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8000e0c <MX_GPIO_Init+0x144>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a49      	ldr	r2, [pc, #292]	@ (8000e0c <MX_GPIO_Init+0x144>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b47      	ldr	r3, [pc, #284]	@ (8000e0c <MX_GPIO_Init+0x144>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b43      	ldr	r3, [pc, #268]	@ (8000e0c <MX_GPIO_Init+0x144>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a42      	ldr	r2, [pc, #264]	@ (8000e0c <MX_GPIO_Init+0x144>)
 8000d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b40      	ldr	r3, [pc, #256]	@ (8000e0c <MX_GPIO_Init+0x144>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e0c <MX_GPIO_Init+0x144>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a3b      	ldr	r2, [pc, #236]	@ (8000e0c <MX_GPIO_Init+0x144>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b39      	ldr	r3, [pc, #228]	@ (8000e0c <MX_GPIO_Init+0x144>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b35      	ldr	r3, [pc, #212]	@ (8000e0c <MX_GPIO_Init+0x144>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a34      	ldr	r2, [pc, #208]	@ (8000e0c <MX_GPIO_Init+0x144>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b32      	ldr	r3, [pc, #200]	@ (8000e0c <MX_GPIO_Init+0x144>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2120      	movs	r1, #32
 8000d52:	482f      	ldr	r0, [pc, #188]	@ (8000e10 <MX_GPIO_Init+0x148>)
 8000d54:	f001 fa56 	bl	8002204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|KC0_Pin|GPIO_PIN_13|GPIO_PIN_14
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f246 413c 	movw	r1, #25660	@ 0x643c
 8000d5e:	482d      	ldr	r0, [pc, #180]	@ (8000e14 <MX_GPIO_Init+0x14c>)
 8000d60:	f001 fa50 	bl	8002204 <HAL_GPIO_WritePin>
                          |KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d64:	2320      	movs	r3, #32
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4825      	ldr	r0, [pc, #148]	@ (8000e10 <MX_GPIO_Init+0x148>)
 8000d7c:	f001 f896 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 KC0_Pin PB13 PB14
                           KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|KC0_Pin|GPIO_PIN_13|GPIO_PIN_14
 8000d80:	f246 433c 	movw	r3, #25660	@ 0x643c
 8000d84:	617b      	str	r3, [r7, #20]
                          |KC3_Pin|KC1_Pin|KC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	481e      	ldr	r0, [pc, #120]	@ (8000e14 <MX_GPIO_Init+0x14c>)
 8000d9a:	f001 f887 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4818      	ldr	r0, [pc, #96]	@ (8000e14 <MX_GPIO_Init+0x14c>)
 8000db4:	f001 f87a 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000db8:	2380      	movs	r3, #128	@ 0x80
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4813      	ldr	r0, [pc, #76]	@ (8000e18 <MX_GPIO_Init+0x150>)
 8000dcc:	f001 f86e 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000dd0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	480a      	ldr	r0, [pc, #40]	@ (8000e10 <MX_GPIO_Init+0x148>)
 8000de6:	f001 f861 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000dea:	2340      	movs	r3, #64	@ 0x40
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_GPIO_Init+0x14c>)
 8000dfe:	f001 f855 	bl	8001eac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	@ 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40020400 	.word	0x40020400
 8000e18:	40020800 	.word	0x40020800

08000e1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	xTimer = xTimerCreate("Timer1Sec", pdMS_TO_TICKS(1000), pdTRUE, (void *)0, vTimerCallback);
 8000e24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <StartDefaultTask+0x88>)
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e30:	481d      	ldr	r0, [pc, #116]	@ (8000ea8 <StartDefaultTask+0x8c>)
 8000e32:	f006 f8b1 	bl	8006f98 <xTimerCreate>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4a1c      	ldr	r2, [pc, #112]	@ (8000eac <StartDefaultTask+0x90>)
 8000e3a:	6013      	str	r3, [r2, #0]

	  if (xTimer == NULL) {
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <StartDefaultTask+0x90>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d110      	bne.n	8000e66 <StartDefaultTask+0x4a>
	    sprintf(msg, "%s \r\n","Error Timer");
 8000e44:	4a1a      	ldr	r2, [pc, #104]	@ (8000eb0 <StartDefaultTask+0x94>)
 8000e46:	491b      	ldr	r1, [pc, #108]	@ (8000eb4 <StartDefaultTask+0x98>)
 8000e48:	481b      	ldr	r0, [pc, #108]	@ (8000eb8 <StartDefaultTask+0x9c>)
 8000e4a:	f007 f855 	bl	8007ef8 <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000e4e:	481a      	ldr	r0, [pc, #104]	@ (8000eb8 <StartDefaultTask+0x9c>)
 8000e50:	f7ff f9de 	bl	8000210 <strlen>
 8000e54:	4603      	mov	r3, r0
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5c:	4916      	ldr	r1, [pc, #88]	@ (8000eb8 <StartDefaultTask+0x9c>)
 8000e5e:	4817      	ldr	r0, [pc, #92]	@ (8000ebc <StartDefaultTask+0xa0>)
 8000e60:	f003 fe6a 	bl	8004b38 <HAL_UART_Transmit>
 8000e64:	e00b      	b.n	8000e7e <StartDefaultTask+0x62>
	  } else {
		  xTimerStart(xTimer, 0);
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <StartDefaultTask+0x90>)
 8000e68:	681c      	ldr	r4, [r3, #0]
 8000e6a:	f005 fc2f 	bl	80066cc <xTaskGetTickCount>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	2300      	movs	r3, #0
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	2300      	movs	r3, #0
 8000e76:	2101      	movs	r1, #1
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f006 f8eb 	bl	8007054 <xTimerGenericCommand>

  /* Infinite loop */
  for(;;)
  {

	  if (armed == 0) {
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <StartDefaultTask+0xa4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d104      	bne.n	8000e90 <StartDefaultTask+0x74>
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 250);
 8000e86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <StartDefaultTask+0xa8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	22fa      	movs	r2, #250	@ 0xfa
 8000e8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e8e:	e004      	b.n	8000e9a <StartDefaultTask+0x7e>
	  } else {
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 750);
 8000e90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <StartDefaultTask+0xa8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000e98:	639a      	str	r2, [r3, #56]	@ 0x38
	  }

	osDelay(100);
 8000e9a:	2064      	movs	r0, #100	@ 0x64
 8000e9c:	f004 fb28 	bl	80054f0 <osDelay>
	  if (armed == 0) {
 8000ea0:	e7ed      	b.n	8000e7e <StartDefaultTask+0x62>
 8000ea2:	bf00      	nop
 8000ea4:	08000919 	.word	0x08000919
 8000ea8:	08008894 	.word	0x08008894
 8000eac:	200001c4 	.word	0x200001c4
 8000eb0:	080088a0 	.word	0x080088a0
 8000eb4:	080088ac 	.word	0x080088ac
 8000eb8:	200001a4 	.word	0x200001a4
 8000ebc:	20000128 	.word	0x20000128
 8000ec0:	200001cc 	.word	0x200001cc
 8000ec4:	200000e0 	.word	0x200000e0

08000ec8 <StartKeypadTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKeypadTask */
void StartKeypadTask(void *argument)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKeypadTask */
  /* Infinite loop */
  for(;;)
  {
	 key = Get_Key();
 8000ed0:	f7ff fb6e 	bl	80005b0 <Get_Key>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b5f      	ldr	r3, [pc, #380]	@ (8001058 <StartKeypadTask+0x190>)
 8000eda:	701a      	strb	r2, [r3, #0]


	 if (armed == 0) {
 8000edc:	4b5f      	ldr	r3, [pc, #380]	@ (800105c <StartKeypadTask+0x194>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d12b      	bne.n	8000f3c <StartKeypadTask+0x74>

		 if (key == '*') { // Submitted
 8000ee4:	4b5c      	ldr	r3, [pc, #368]	@ (8001058 <StartKeypadTask+0x190>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000eea:	d116      	bne.n	8000f1a <StartKeypadTask+0x52>
			 wipescreenflag = 1;
 8000eec:	4b5c      	ldr	r3, [pc, #368]	@ (8001060 <StartKeypadTask+0x198>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]
			if (masterlen >= 4 && masterlen <= 6) {
 8000ef2:	4b5c      	ldr	r3, [pc, #368]	@ (8001064 <StartKeypadTask+0x19c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	f340 80ac 	ble.w	8001054 <StartKeypadTask+0x18c>
 8000efc:	4b59      	ldr	r3, [pc, #356]	@ (8001064 <StartKeypadTask+0x19c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b06      	cmp	r3, #6
 8000f02:	f300 80a7 	bgt.w	8001054 <StartKeypadTask+0x18c>
				armed = 1; // arm the system
 8000f06:	4b55      	ldr	r3, [pc, #340]	@ (800105c <StartKeypadTask+0x194>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]

				//Allow grace period for user to walk away
				alarmgraceperiod = 60;
 8000f0c:	4b56      	ldr	r3, [pc, #344]	@ (8001068 <StartKeypadTask+0x1a0>)
 8000f0e:	223c      	movs	r2, #60	@ 0x3c
 8000f10:	601a      	str	r2, [r3, #0]
				alarmgraceflag = 1;
 8000f12:	4b56      	ldr	r3, [pc, #344]	@ (800106c <StartKeypadTask+0x1a4>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	e098      	b.n	800104c <StartKeypadTask+0x184>
			} else {
				continue;
			}
		 } else if (masterlen < 6) {
 8000f1a:	4b52      	ldr	r3, [pc, #328]	@ (8001064 <StartKeypadTask+0x19c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b05      	cmp	r3, #5
 8000f20:	f300 8094 	bgt.w	800104c <StartKeypadTask+0x184>
			masterkey[masterlen] = key;
 8000f24:	4b4f      	ldr	r3, [pc, #316]	@ (8001064 <StartKeypadTask+0x19c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a4b      	ldr	r2, [pc, #300]	@ (8001058 <StartKeypadTask+0x190>)
 8000f2a:	7811      	ldrb	r1, [r2, #0]
 8000f2c:	4a50      	ldr	r2, [pc, #320]	@ (8001070 <StartKeypadTask+0x1a8>)
 8000f2e:	54d1      	strb	r1, [r2, r3]
			masterlen++;
 8000f30:	4b4c      	ldr	r3, [pc, #304]	@ (8001064 <StartKeypadTask+0x19c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	4a4b      	ldr	r2, [pc, #300]	@ (8001064 <StartKeypadTask+0x19c>)
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e087      	b.n	800104c <StartKeypadTask+0x184>
		 }

	 } else {

		 if (key == '*') { // Submitted
 8000f3c:	4b46      	ldr	r3, [pc, #280]	@ (8001058 <StartKeypadTask+0x190>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f42:	d16f      	bne.n	8001024 <StartKeypadTask+0x15c>
			 wipescreenflag = 1;
 8000f44:	4b46      	ldr	r3, [pc, #280]	@ (8001060 <StartKeypadTask+0x198>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
			 int match = 1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]
			 if (masterlen != holdlen) {
 8000f4e:	4b45      	ldr	r3, [pc, #276]	@ (8001064 <StartKeypadTask+0x19c>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4b48      	ldr	r3, [pc, #288]	@ (8001074 <StartKeypadTask+0x1ac>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d002      	beq.n	8000f60 <StartKeypadTask+0x98>
				 match = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	e016      	b.n	8000f8e <StartKeypadTask+0xc6>
			 } else {
				 for (int i=0;i<masterlen;i++){
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	e00e      	b.n	8000f84 <StartKeypadTask+0xbc>
					 if (masterkey[i] != hold[i]) {
 8000f66:	4a42      	ldr	r2, [pc, #264]	@ (8001070 <StartKeypadTask+0x1a8>)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	4942      	ldr	r1, [pc, #264]	@ (8001078 <StartKeypadTask+0x1b0>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	440b      	add	r3, r1
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d001      	beq.n	8000f7e <StartKeypadTask+0xb6>
						 match = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
				 for (int i=0;i<masterlen;i++){
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	3301      	adds	r3, #1
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	4b37      	ldr	r3, [pc, #220]	@ (8001064 <StartKeypadTask+0x19c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	dbeb      	blt.n	8000f66 <StartKeypadTask+0x9e>
					 }
				 }
			 }

			 if (match == 1) {
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d12e      	bne.n	8000ff2 <StartKeypadTask+0x12a>
				 armed = 0;
 8000f94:	4b31      	ldr	r3, [pc, #196]	@ (800105c <StartKeypadTask+0x194>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
				 //Clear master
				 for (int i=0;i<masterlen;i++){
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	e007      	b.n	8000fb0 <StartKeypadTask+0xe8>
					 masterkey[i] = ' ';
 8000fa0:	4a33      	ldr	r2, [pc, #204]	@ (8001070 <StartKeypadTask+0x1a8>)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	2220      	movs	r2, #32
 8000fa8:	701a      	strb	r2, [r3, #0]
				 for (int i=0;i<masterlen;i++){
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	4b2c      	ldr	r3, [pc, #176]	@ (8001064 <StartKeypadTask+0x19c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dbf2      	blt.n	8000fa0 <StartKeypadTask+0xd8>
				 }
				 masterlen = 0;
 8000fba:	4b2a      	ldr	r3, [pc, #168]	@ (8001064 <StartKeypadTask+0x19c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
				 //Clear hold
				 for (int i=0;i<holdlen;i++){
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	e00c      	b.n	8000fe0 <StartKeypadTask+0x118>
					 hold[i] = ' ';
 8000fc6:	4a2c      	ldr	r2, [pc, #176]	@ (8001078 <StartKeypadTask+0x1b0>)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4413      	add	r3, r2
 8000fcc:	2220      	movs	r2, #32
 8000fce:	701a      	strb	r2, [r3, #0]
					 asterisk[i] = ' ';
 8000fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800107c <StartKeypadTask+0x1b4>)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	2220      	movs	r2, #32
 8000fd8:	701a      	strb	r2, [r3, #0]
				 for (int i=0;i<holdlen;i++){
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	4b24      	ldr	r3, [pc, #144]	@ (8001074 <StartKeypadTask+0x1ac>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	dbed      	blt.n	8000fc6 <StartKeypadTask+0xfe>
				 }
				 holdlen = 0;
 8000fea:	4b22      	ldr	r3, [pc, #136]	@ (8001074 <StartKeypadTask+0x1ac>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	e02c      	b.n	800104c <StartKeypadTask+0x184>

			 } else {
				 //Clear hold
				 for (int i=0;i<holdlen;i++){
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e00c      	b.n	8001012 <StartKeypadTask+0x14a>
					 hold[i] = ' ';
 8000ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8001078 <StartKeypadTask+0x1b0>)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	2220      	movs	r2, #32
 8001000:	701a      	strb	r2, [r3, #0]
					 asterisk[i] = ' ';
 8001002:	4a1e      	ldr	r2, [pc, #120]	@ (800107c <StartKeypadTask+0x1b4>)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	2220      	movs	r2, #32
 800100a:	701a      	strb	r2, [r3, #0]
				 for (int i=0;i<holdlen;i++){
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3301      	adds	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <StartKeypadTask+0x1ac>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbed      	blt.n	8000ff8 <StartKeypadTask+0x130>
				 }
				 holdlen = 0;
 800101c:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <StartKeypadTask+0x1ac>)
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	e013      	b.n	800104c <StartKeypadTask+0x184>
			 }
		 } else if (holdlen < 6) {
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <StartKeypadTask+0x1ac>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b05      	cmp	r3, #5
 800102a:	dc0f      	bgt.n	800104c <StartKeypadTask+0x184>
			 hold[holdlen] = key;
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <StartKeypadTask+0x1ac>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a09      	ldr	r2, [pc, #36]	@ (8001058 <StartKeypadTask+0x190>)
 8001032:	7811      	ldrb	r1, [r2, #0]
 8001034:	4a10      	ldr	r2, [pc, #64]	@ (8001078 <StartKeypadTask+0x1b0>)
 8001036:	54d1      	strb	r1, [r2, r3]
			 asterisk[holdlen] = '*';
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <StartKeypadTask+0x1ac>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0f      	ldr	r2, [pc, #60]	@ (800107c <StartKeypadTask+0x1b4>)
 800103e:	212a      	movs	r1, #42	@ 0x2a
 8001040:	54d1      	strb	r1, [r2, r3]
			 holdlen++;
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <StartKeypadTask+0x1ac>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <StartKeypadTask+0x1ac>)
 800104a:	6013      	str	r3, [r2, #0]
		 }
	 }

	 osDelay(50);
 800104c:	2032      	movs	r0, #50	@ 0x32
 800104e:	f004 fa4f 	bl	80054f0 <osDelay>
 8001052:	e73d      	b.n	8000ed0 <StartKeypadTask+0x8>
				continue;
 8001054:	bf00      	nop
	 key = Get_Key();
 8001056:	e73b      	b.n	8000ed0 <StartKeypadTask+0x8>
 8001058:	20000088 	.word	0x20000088
 800105c:	200001cc 	.word	0x200001cc
 8001060:	200001c0 	.word	0x200001c0
 8001064:	20000188 	.word	0x20000188
 8001068:	20000008 	.word	0x20000008
 800106c:	200001bc 	.word	0x200001bc
 8001070:	20000180 	.word	0x20000180
 8001074:	2000019c 	.word	0x2000019c
 8001078:	20000194 	.word	0x20000194
 800107c:	2000018c 	.word	0x2000018c

08001080 <StartMotionSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotionSensor */
void StartMotionSensor(void *argument)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotionSensor */
  /* Infinite loop */
  for(;;)
  {

	  if (armed == 1) {
 8001088:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <StartMotionSensor+0xb0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d144      	bne.n	800111a <StartMotionSensor+0x9a>

		 //Arming grace period
		 if (alarmgraceflag == 1) {
 8001090:	4b28      	ldr	r3, [pc, #160]	@ (8001134 <StartMotionSensor+0xb4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d111      	bne.n	80010bc <StartMotionSensor+0x3c>
			if (alarmgraceperiod == 0) {
 8001098:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <StartMotionSensor+0xb8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <StartMotionSensor+0x28>
				alarmgraceflag = 0;
 80010a0:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <StartMotionSensor+0xb4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
			} else {
				osDelay(1000);
				alarmgraceperiod--;
			}

			continue;
 80010a6:	e041      	b.n	800112c <StartMotionSensor+0xac>
				osDelay(1000);
 80010a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010ac:	f004 fa20 	bl	80054f0 <osDelay>
				alarmgraceperiod--;
 80010b0:	4b21      	ldr	r3, [pc, #132]	@ (8001138 <StartMotionSensor+0xb8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	4a20      	ldr	r2, [pc, #128]	@ (8001138 <StartMotionSensor+0xb8>)
 80010b8:	6013      	str	r3, [r2, #0]
			continue;
 80010ba:	e037      	b.n	800112c <StartMotionSensor+0xac>
		}

		if (alarmgraceflag == 0) {
 80010bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <StartMotionSensor+0xb4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d112      	bne.n	80010ea <StartMotionSensor+0x6a>
			motion = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80010c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010c8:	481c      	ldr	r0, [pc, #112]	@ (800113c <StartMotionSensor+0xbc>)
 80010ca:	f001 f883 	bl	80021d4 <HAL_GPIO_ReadPin>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <StartMotionSensor+0xc0>)
 80010d4:	601a      	str	r2, [r3, #0]
			if (motion == 1) { // Detected motion
 80010d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <StartMotionSensor+0xc0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d105      	bne.n	80010ea <StartMotionSensor+0x6a>
				alarmgraceperiod = 60;
 80010de:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <StartMotionSensor+0xb8>)
 80010e0:	223c      	movs	r2, #60	@ 0x3c
 80010e2:	601a      	str	r2, [r3, #0]
				alarmgraceflag = 2;
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <StartMotionSensor+0xb4>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	601a      	str	r2, [r3, #0]
			}

		}

		if (alarmgraceflag == 2) {
 80010ea:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <StartMotionSensor+0xb4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d113      	bne.n	800111a <StartMotionSensor+0x9a>
			//Detection grace period
			if (alarmgraceperiod == 0) {
 80010f2:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <StartMotionSensor+0xb8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d105      	bne.n	8001106 <StartMotionSensor+0x86>
				//Activate buzzer
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2104      	movs	r1, #4
 80010fe:	480f      	ldr	r0, [pc, #60]	@ (800113c <StartMotionSensor+0xbc>)
 8001100:	f001 f880 	bl	8002204 <HAL_GPIO_WritePin>
			} else {
				osDelay(1000);
				alarmgraceperiod--;
			}

			continue;
 8001104:	e012      	b.n	800112c <StartMotionSensor+0xac>
				osDelay(1000);
 8001106:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800110a:	f004 f9f1 	bl	80054f0 <osDelay>
				alarmgraceperiod--;
 800110e:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <StartMotionSensor+0xb8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3b01      	subs	r3, #1
 8001114:	4a08      	ldr	r2, [pc, #32]	@ (8001138 <StartMotionSensor+0xb8>)
 8001116:	6013      	str	r3, [r2, #0]
			continue;
 8001118:	e008      	b.n	800112c <StartMotionSensor+0xac>
		}

    }

    //Deactivate buzzer
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2104      	movs	r1, #4
 800111e:	4807      	ldr	r0, [pc, #28]	@ (800113c <StartMotionSensor+0xbc>)
 8001120:	f001 f870 	bl	8002204 <HAL_GPIO_WritePin>

	osDelay(500);
 8001124:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001128:	f004 f9e2 	bl	80054f0 <osDelay>
	  if (armed == 1) {
 800112c:	e7ac      	b.n	8001088 <StartMotionSensor+0x8>
 800112e:	bf00      	nop
 8001130:	200001cc 	.word	0x200001cc
 8001134:	200001bc 	.word	0x200001bc
 8001138:	20000008 	.word	0x20000008
 800113c:	40020400 	.word	0x40020400
 8001140:	200001a0 	.word	0x200001a0

08001144 <StartOutputTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOutputTask */
void StartOutputTask(void *argument)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOutputTask */
  /* Infinite loop */
  for(;;)
  {
	  if (wipescreenflag == 1) {
 800114c:	4b36      	ldr	r3, [pc, #216]	@ (8001228 <StartOutputTask+0xe4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d104      	bne.n	800115e <StartOutputTask+0x1a>
		  SSD1306_Clear();
 8001154:	f000 fabb 	bl	80016ce <SSD1306_Clear>
		  wipescreenflag = 0;
 8001158:	4b33      	ldr	r3, [pc, #204]	@ (8001228 <StartOutputTask+0xe4>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
	  }

	if (armed == 0) {
 800115e:	4b33      	ldr	r3, [pc, #204]	@ (800122c <StartOutputTask+0xe8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d120      	bne.n	80011a8 <StartOutputTask+0x64>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800116c:	4830      	ldr	r0, [pc, #192]	@ (8001230 <StartOutputTask+0xec>)
 800116e:	f001 f849 	bl	8002204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001178:	482d      	ldr	r0, [pc, #180]	@ (8001230 <StartOutputTask+0xec>)
 800117a:	f001 f843 	bl	8002204 <HAL_GPIO_WritePin>

		SSD1306_GotoXY(0,0);
 800117e:	2100      	movs	r1, #0
 8001180:	2000      	movs	r0, #0
 8001182:	f000 f9eb 	bl	800155c <SSD1306_GotoXY>
		SSD1306_Puts("NOT ARMED", &Font_11x18,1);
 8001186:	2201      	movs	r2, #1
 8001188:	492a      	ldr	r1, [pc, #168]	@ (8001234 <StartOutputTask+0xf0>)
 800118a:	482b      	ldr	r0, [pc, #172]	@ (8001238 <StartOutputTask+0xf4>)
 800118c:	f000 fa7a 	bl	8001684 <SSD1306_Puts>
		SSD1306_GotoXY(0,30);
 8001190:	211e      	movs	r1, #30
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f9e2 	bl	800155c <SSD1306_GotoXY>
		SSD1306_Puts(masterkey, &Font_11x18,1);
 8001198:	2201      	movs	r2, #1
 800119a:	4926      	ldr	r1, [pc, #152]	@ (8001234 <StartOutputTask+0xf0>)
 800119c:	4827      	ldr	r0, [pc, #156]	@ (800123c <StartOutputTask+0xf8>)
 800119e:	f000 fa71 	bl	8001684 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80011a2:	f000 f935 	bl	8001410 <SSD1306_UpdateScreen>
 80011a6:	e03b      	b.n	8001220 <StartOutputTask+0xdc>

	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011ae:	4820      	ldr	r0, [pc, #128]	@ (8001230 <StartOutputTask+0xec>)
 80011b0:	f001 f828 	bl	8002204 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ba:	481d      	ldr	r0, [pc, #116]	@ (8001230 <StartOutputTask+0xec>)
 80011bc:	f001 f822 	bl	8002204 <HAL_GPIO_WritePin>

		SSD1306_GotoXY(0,0);
 80011c0:	2100      	movs	r1, #0
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 f9ca 	bl	800155c <SSD1306_GotoXY>
		SSD1306_Puts("ARMED", &Font_11x18,1);
 80011c8:	2201      	movs	r2, #1
 80011ca:	491a      	ldr	r1, [pc, #104]	@ (8001234 <StartOutputTask+0xf0>)
 80011cc:	481c      	ldr	r0, [pc, #112]	@ (8001240 <StartOutputTask+0xfc>)
 80011ce:	f000 fa59 	bl	8001684 <SSD1306_Puts>
		SSD1306_GotoXY(0,30);
 80011d2:	211e      	movs	r1, #30
 80011d4:	2000      	movs	r0, #0
 80011d6:	f000 f9c1 	bl	800155c <SSD1306_GotoXY>
		SSD1306_Puts(asterisk, &Font_11x18,1);
 80011da:	2201      	movs	r2, #1
 80011dc:	4915      	ldr	r1, [pc, #84]	@ (8001234 <StartOutputTask+0xf0>)
 80011de:	4819      	ldr	r0, [pc, #100]	@ (8001244 <StartOutputTask+0x100>)
 80011e0:	f000 fa50 	bl	8001684 <SSD1306_Puts>
		SSD1306_GotoXY(100,30);
 80011e4:	211e      	movs	r1, #30
 80011e6:	2064      	movs	r0, #100	@ 0x64
 80011e8:	f000 f9b8 	bl	800155c <SSD1306_GotoXY>
		if(alarmgraceperiod < 10){
 80011ec:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <StartOutputTask+0x104>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b09      	cmp	r3, #9
 80011f2:	dc07      	bgt.n	8001204 <StartOutputTask+0xc0>
			sprintf(alarmgracestring,"0%d", alarmgraceperiod);
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <StartOutputTask+0x104>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4914      	ldr	r1, [pc, #80]	@ (800124c <StartOutputTask+0x108>)
 80011fc:	4814      	ldr	r0, [pc, #80]	@ (8001250 <StartOutputTask+0x10c>)
 80011fe:	f006 fe7b 	bl	8007ef8 <siprintf>
 8001202:	e006      	b.n	8001212 <StartOutputTask+0xce>
		}else{
			sprintf(alarmgracestring,"%d", alarmgraceperiod);
 8001204:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <StartOutputTask+0x104>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4912      	ldr	r1, [pc, #72]	@ (8001254 <StartOutputTask+0x110>)
 800120c:	4810      	ldr	r0, [pc, #64]	@ (8001250 <StartOutputTask+0x10c>)
 800120e:	f006 fe73 	bl	8007ef8 <siprintf>
		}
		SSD1306_Puts(alarmgracestring, &Font_11x18,1);
 8001212:	2201      	movs	r2, #1
 8001214:	4907      	ldr	r1, [pc, #28]	@ (8001234 <StartOutputTask+0xf0>)
 8001216:	480e      	ldr	r0, [pc, #56]	@ (8001250 <StartOutputTask+0x10c>)
 8001218:	f000 fa34 	bl	8001684 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800121c:	f000 f8f8 	bl	8001410 <SSD1306_UpdateScreen>

	}

	osDelay(250);
 8001220:	20fa      	movs	r0, #250	@ 0xfa
 8001222:	f004 f965 	bl	80054f0 <osDelay>
	  if (wipescreenflag == 1) {
 8001226:	e791      	b.n	800114c <StartOutputTask+0x8>
 8001228:	200001c0 	.word	0x200001c0
 800122c:	200001cc 	.word	0x200001cc
 8001230:	40020400 	.word	0x40020400
 8001234:	20000000 	.word	0x20000000
 8001238:	080088b4 	.word	0x080088b4
 800123c:	20000180 	.word	0x20000180
 8001240:	080088c0 	.word	0x080088c0
 8001244:	2000018c 	.word	0x2000018c
 8001248:	20000008 	.word	0x20000008
 800124c:	080088c8 	.word	0x080088c8
 8001250:	200001b8 	.word	0x200001b8
 8001254:	080088cc 	.word	0x080088cc

08001258 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800126a:	f000 fd1d 	bl	8001ca8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40001000 	.word	0x40001000

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <Error_Handler+0x8>

08001288 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800128e:	f000 fa27 	bl	80016e0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001292:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001296:	2201      	movs	r2, #1
 8001298:	2178      	movs	r1, #120	@ 0x78
 800129a:	485b      	ldr	r0, [pc, #364]	@ (8001408 <SSD1306_Init+0x180>)
 800129c:	f001 fa28 	bl	80026f0 <HAL_I2C_IsDeviceReady>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e0a9      	b.n	80013fe <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80012aa:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80012ae:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012b0:	e002      	b.n	80012b8 <SSD1306_Init+0x30>
		p--;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f9      	bne.n	80012b2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80012be:	22ae      	movs	r2, #174	@ 0xae
 80012c0:	2100      	movs	r1, #0
 80012c2:	2078      	movs	r0, #120	@ 0x78
 80012c4:	f000 fa88 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80012c8:	2220      	movs	r2, #32
 80012ca:	2100      	movs	r1, #0
 80012cc:	2078      	movs	r0, #120	@ 0x78
 80012ce:	f000 fa83 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80012d2:	2210      	movs	r2, #16
 80012d4:	2100      	movs	r1, #0
 80012d6:	2078      	movs	r0, #120	@ 0x78
 80012d8:	f000 fa7e 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012dc:	22b0      	movs	r2, #176	@ 0xb0
 80012de:	2100      	movs	r1, #0
 80012e0:	2078      	movs	r0, #120	@ 0x78
 80012e2:	f000 fa79 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80012e6:	22c8      	movs	r2, #200	@ 0xc8
 80012e8:	2100      	movs	r1, #0
 80012ea:	2078      	movs	r0, #120	@ 0x78
 80012ec:	f000 fa74 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	2078      	movs	r0, #120	@ 0x78
 80012f6:	f000 fa6f 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80012fa:	2210      	movs	r2, #16
 80012fc:	2100      	movs	r1, #0
 80012fe:	2078      	movs	r0, #120	@ 0x78
 8001300:	f000 fa6a 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001304:	2240      	movs	r2, #64	@ 0x40
 8001306:	2100      	movs	r1, #0
 8001308:	2078      	movs	r0, #120	@ 0x78
 800130a:	f000 fa65 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800130e:	2281      	movs	r2, #129	@ 0x81
 8001310:	2100      	movs	r1, #0
 8001312:	2078      	movs	r0, #120	@ 0x78
 8001314:	f000 fa60 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001318:	22ff      	movs	r2, #255	@ 0xff
 800131a:	2100      	movs	r1, #0
 800131c:	2078      	movs	r0, #120	@ 0x78
 800131e:	f000 fa5b 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001322:	22a1      	movs	r2, #161	@ 0xa1
 8001324:	2100      	movs	r1, #0
 8001326:	2078      	movs	r0, #120	@ 0x78
 8001328:	f000 fa56 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800132c:	22a6      	movs	r2, #166	@ 0xa6
 800132e:	2100      	movs	r1, #0
 8001330:	2078      	movs	r0, #120	@ 0x78
 8001332:	f000 fa51 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001336:	22a8      	movs	r2, #168	@ 0xa8
 8001338:	2100      	movs	r1, #0
 800133a:	2078      	movs	r0, #120	@ 0x78
 800133c:	f000 fa4c 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001340:	223f      	movs	r2, #63	@ 0x3f
 8001342:	2100      	movs	r1, #0
 8001344:	2078      	movs	r0, #120	@ 0x78
 8001346:	f000 fa47 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800134a:	22a4      	movs	r2, #164	@ 0xa4
 800134c:	2100      	movs	r1, #0
 800134e:	2078      	movs	r0, #120	@ 0x78
 8001350:	f000 fa42 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001354:	22d3      	movs	r2, #211	@ 0xd3
 8001356:	2100      	movs	r1, #0
 8001358:	2078      	movs	r0, #120	@ 0x78
 800135a:	f000 fa3d 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2078      	movs	r0, #120	@ 0x78
 8001364:	f000 fa38 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001368:	22d5      	movs	r2, #213	@ 0xd5
 800136a:	2100      	movs	r1, #0
 800136c:	2078      	movs	r0, #120	@ 0x78
 800136e:	f000 fa33 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001372:	22f0      	movs	r2, #240	@ 0xf0
 8001374:	2100      	movs	r1, #0
 8001376:	2078      	movs	r0, #120	@ 0x78
 8001378:	f000 fa2e 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800137c:	22d9      	movs	r2, #217	@ 0xd9
 800137e:	2100      	movs	r1, #0
 8001380:	2078      	movs	r0, #120	@ 0x78
 8001382:	f000 fa29 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001386:	2222      	movs	r2, #34	@ 0x22
 8001388:	2100      	movs	r1, #0
 800138a:	2078      	movs	r0, #120	@ 0x78
 800138c:	f000 fa24 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001390:	22da      	movs	r2, #218	@ 0xda
 8001392:	2100      	movs	r1, #0
 8001394:	2078      	movs	r0, #120	@ 0x78
 8001396:	f000 fa1f 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800139a:	2212      	movs	r2, #18
 800139c:	2100      	movs	r1, #0
 800139e:	2078      	movs	r0, #120	@ 0x78
 80013a0:	f000 fa1a 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80013a4:	22db      	movs	r2, #219	@ 0xdb
 80013a6:	2100      	movs	r1, #0
 80013a8:	2078      	movs	r0, #120	@ 0x78
 80013aa:	f000 fa15 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80013ae:	2220      	movs	r2, #32
 80013b0:	2100      	movs	r1, #0
 80013b2:	2078      	movs	r0, #120	@ 0x78
 80013b4:	f000 fa10 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80013b8:	228d      	movs	r2, #141	@ 0x8d
 80013ba:	2100      	movs	r1, #0
 80013bc:	2078      	movs	r0, #120	@ 0x78
 80013be:	f000 fa0b 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80013c2:	2214      	movs	r2, #20
 80013c4:	2100      	movs	r1, #0
 80013c6:	2078      	movs	r0, #120	@ 0x78
 80013c8:	f000 fa06 	bl	80017d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80013cc:	22af      	movs	r2, #175	@ 0xaf
 80013ce:	2100      	movs	r1, #0
 80013d0:	2078      	movs	r0, #120	@ 0x78
 80013d2:	f000 fa01 	bl	80017d8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80013d6:	222e      	movs	r2, #46	@ 0x2e
 80013d8:	2100      	movs	r1, #0
 80013da:	2078      	movs	r0, #120	@ 0x78
 80013dc:	f000 f9fc 	bl	80017d8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 f843 	bl	800146c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80013e6:	f000 f813 	bl	8001410 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <SSD1306_Init+0x184>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <SSD1306_Init+0x184>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80013f6:	4b05      	ldr	r3, [pc, #20]	@ (800140c <SSD1306_Init+0x184>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80013fc:	2301      	movs	r3, #1
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000008c 	.word	0x2000008c
 800140c:	200005d0 	.word	0x200005d0

08001410 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001416:	2300      	movs	r3, #0
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	e01d      	b.n	8001458 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	3b50      	subs	r3, #80	@ 0x50
 8001420:	b2db      	uxtb	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	2100      	movs	r1, #0
 8001426:	2078      	movs	r0, #120	@ 0x78
 8001428:	f000 f9d6 	bl	80017d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	2078      	movs	r0, #120	@ 0x78
 8001432:	f000 f9d1 	bl	80017d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001436:	2210      	movs	r2, #16
 8001438:	2100      	movs	r1, #0
 800143a:	2078      	movs	r0, #120	@ 0x78
 800143c:	f000 f9cc 	bl	80017d8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	01db      	lsls	r3, r3, #7
 8001444:	4a08      	ldr	r2, [pc, #32]	@ (8001468 <SSD1306_UpdateScreen+0x58>)
 8001446:	441a      	add	r2, r3
 8001448:	2380      	movs	r3, #128	@ 0x80
 800144a:	2140      	movs	r1, #64	@ 0x40
 800144c:	2078      	movs	r0, #120	@ 0x78
 800144e:	f000 f95d 	bl	800170c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	3301      	adds	r3, #1
 8001456:	71fb      	strb	r3, [r7, #7]
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b07      	cmp	r3, #7
 800145c:	d9de      	bls.n	800141c <SSD1306_UpdateScreen+0xc>
	}
}
 800145e:	bf00      	nop
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200001d0 	.word	0x200001d0

0800146c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <SSD1306_Fill+0x14>
 800147c:	2300      	movs	r3, #0
 800147e:	e000      	b.n	8001482 <SSD1306_Fill+0x16>
 8001480:	23ff      	movs	r3, #255	@ 0xff
 8001482:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001486:	4619      	mov	r1, r3
 8001488:	4803      	ldr	r0, [pc, #12]	@ (8001498 <SSD1306_Fill+0x2c>)
 800148a:	f006 fd55 	bl	8007f38 <memset>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200001d0 	.word	0x200001d0

0800149c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	80fb      	strh	r3, [r7, #6]
 80014a6:	460b      	mov	r3, r1
 80014a8:	80bb      	strh	r3, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	70fb      	strb	r3, [r7, #3]
	if (
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80014b2:	d848      	bhi.n	8001546 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80014b8:	d845      	bhi.n	8001546 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80014ba:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <SSD1306_DrawPixel+0xb8>)
 80014bc:	791b      	ldrb	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf0c      	ite	eq
 80014c8:	2301      	moveq	r3, #1
 80014ca:	2300      	movne	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d11a      	bne.n	800150c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014d6:	88fa      	ldrh	r2, [r7, #6]
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	08db      	lsrs	r3, r3, #3
 80014dc:	b298      	uxth	r0, r3
 80014de:	4603      	mov	r3, r0
 80014e0:	01db      	lsls	r3, r3, #7
 80014e2:	4413      	add	r3, r2
 80014e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001558 <SSD1306_DrawPixel+0xbc>)
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	b25a      	sxtb	r2, r3
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b259      	sxtb	r1, r3
 80014fc:	88fa      	ldrh	r2, [r7, #6]
 80014fe:	4603      	mov	r3, r0
 8001500:	01db      	lsls	r3, r3, #7
 8001502:	4413      	add	r3, r2
 8001504:	b2c9      	uxtb	r1, r1
 8001506:	4a14      	ldr	r2, [pc, #80]	@ (8001558 <SSD1306_DrawPixel+0xbc>)
 8001508:	54d1      	strb	r1, [r2, r3]
 800150a:	e01d      	b.n	8001548 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800150c:	88fa      	ldrh	r2, [r7, #6]
 800150e:	88bb      	ldrh	r3, [r7, #4]
 8001510:	08db      	lsrs	r3, r3, #3
 8001512:	b298      	uxth	r0, r3
 8001514:	4603      	mov	r3, r0
 8001516:	01db      	lsls	r3, r3, #7
 8001518:	4413      	add	r3, r2
 800151a:	4a0f      	ldr	r2, [pc, #60]	@ (8001558 <SSD1306_DrawPixel+0xbc>)
 800151c:	5cd3      	ldrb	r3, [r2, r3]
 800151e:	b25a      	sxtb	r2, r3
 8001520:	88bb      	ldrh	r3, [r7, #4]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	b25b      	sxtb	r3, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	b25b      	sxtb	r3, r3
 8001532:	4013      	ands	r3, r2
 8001534:	b259      	sxtb	r1, r3
 8001536:	88fa      	ldrh	r2, [r7, #6]
 8001538:	4603      	mov	r3, r0
 800153a:	01db      	lsls	r3, r3, #7
 800153c:	4413      	add	r3, r2
 800153e:	b2c9      	uxtb	r1, r1
 8001540:	4a05      	ldr	r2, [pc, #20]	@ (8001558 <SSD1306_DrawPixel+0xbc>)
 8001542:	54d1      	strb	r1, [r2, r3]
 8001544:	e000      	b.n	8001548 <SSD1306_DrawPixel+0xac>
		return;
 8001546:	bf00      	nop
	}
}
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	200005d0 	.word	0x200005d0
 8001558:	200001d0 	.word	0x200001d0

0800155c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	460a      	mov	r2, r1
 8001566:	80fb      	strh	r3, [r7, #6]
 8001568:	4613      	mov	r3, r2
 800156a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800156c:	4a05      	ldr	r2, [pc, #20]	@ (8001584 <SSD1306_GotoXY+0x28>)
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001572:	4a04      	ldr	r2, [pc, #16]	@ (8001584 <SSD1306_GotoXY+0x28>)
 8001574:	88bb      	ldrh	r3, [r7, #4]
 8001576:	8053      	strh	r3, [r2, #2]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	200005d0 	.word	0x200005d0

08001588 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
 8001594:	4613      	mov	r3, r2
 8001596:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001598:	4b39      	ldr	r3, [pc, #228]	@ (8001680 <SSD1306_Putc+0xf8>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	4413      	add	r3, r2
	if (
 80015a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80015a6:	dc07      	bgt.n	80015b8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80015a8:	4b35      	ldr	r3, [pc, #212]	@ (8001680 <SSD1306_Putc+0xf8>)
 80015aa:	885b      	ldrh	r3, [r3, #2]
 80015ac:	461a      	mov	r2, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	785b      	ldrb	r3, [r3, #1]
 80015b2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80015b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80015b6:	dd01      	ble.n	80015bc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e05d      	b.n	8001678 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	e04b      	b.n	800165a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	3b20      	subs	r3, #32
 80015ca:	6839      	ldr	r1, [r7, #0]
 80015cc:	7849      	ldrb	r1, [r1, #1]
 80015ce:	fb01 f303 	mul.w	r3, r1, r3
 80015d2:	4619      	mov	r1, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	440b      	add	r3, r1
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	e030      	b.n	8001648 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d010      	beq.n	8001618 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80015f6:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <SSD1306_Putc+0xf8>)
 80015f8:	881a      	ldrh	r2, [r3, #0]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	4413      	add	r3, r2
 8001600:	b298      	uxth	r0, r3
 8001602:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <SSD1306_Putc+0xf8>)
 8001604:	885a      	ldrh	r2, [r3, #2]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	b29b      	uxth	r3, r3
 800160a:	4413      	add	r3, r2
 800160c:	b29b      	uxth	r3, r3
 800160e:	79ba      	ldrb	r2, [r7, #6]
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff ff43 	bl	800149c <SSD1306_DrawPixel>
 8001616:	e014      	b.n	8001642 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001618:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <SSD1306_Putc+0xf8>)
 800161a:	881a      	ldrh	r2, [r3, #0]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	b29b      	uxth	r3, r3
 8001620:	4413      	add	r3, r2
 8001622:	b298      	uxth	r0, r3
 8001624:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <SSD1306_Putc+0xf8>)
 8001626:	885a      	ldrh	r2, [r3, #2]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	b29b      	uxth	r3, r3
 800162c:	4413      	add	r3, r2
 800162e:	b299      	uxth	r1, r3
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	2b00      	cmp	r3, #0
 8001634:	bf0c      	ite	eq
 8001636:	2301      	moveq	r3, #1
 8001638:	2300      	movne	r3, #0
 800163a:	b2db      	uxtb	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	f7ff ff2d 	bl	800149c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	3301      	adds	r3, #1
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4293      	cmp	r3, r2
 8001652:	d3c8      	bcc.n	80015e6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3301      	adds	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	785b      	ldrb	r3, [r3, #1]
 800165e:	461a      	mov	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	4293      	cmp	r3, r2
 8001664:	d3ad      	bcc.n	80015c2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001666:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <SSD1306_Putc+0xf8>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	4413      	add	r3, r2
 8001670:	b29a      	uxth	r2, r3
 8001672:	4b03      	ldr	r3, [pc, #12]	@ (8001680 <SSD1306_Putc+0xf8>)
 8001674:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001676:	79fb      	ldrb	r3, [r7, #7]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200005d0 	.word	0x200005d0

08001684 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	4613      	mov	r3, r2
 8001690:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001692:	e012      	b.n	80016ba <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	79fa      	ldrb	r2, [r7, #7]
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff73 	bl	8001588 <SSD1306_Putc>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d002      	beq.n	80016b4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	e008      	b.n	80016c6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3301      	adds	r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1e8      	bne.n	8001694 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	781b      	ldrb	r3, [r3, #0]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f7ff feca 	bl	800146c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80016d8:	f7ff fe9a 	bl	8001410 <SSD1306_UpdateScreen>
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80016e6:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <ssd1306_I2C_Init+0x28>)
 80016e8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016ea:	e002      	b.n	80016f2 <ssd1306_I2C_Init+0x12>
		p--;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f9      	bne.n	80016ec <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	0003d090 	.word	0x0003d090

0800170c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b0c7      	sub	sp, #284	@ 0x11c
 8001710:	af02      	add	r7, sp, #8
 8001712:	4604      	mov	r4, r0
 8001714:	4608      	mov	r0, r1
 8001716:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800171a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800171e:	600a      	str	r2, [r1, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001726:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800172a:	4622      	mov	r2, r4
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001732:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001736:	4602      	mov	r2, r0
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800173e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001742:	460a      	mov	r2, r1
 8001744:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001746:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800174a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800174e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001752:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001756:	7812      	ldrb	r2, [r2, #0]
 8001758:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800175a:	2300      	movs	r3, #0
 800175c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001760:	e015      	b.n	800178e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001762:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001766:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800176a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	441a      	add	r2, r3
 8001772:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001776:	3301      	adds	r3, #1
 8001778:	7811      	ldrb	r1, [r2, #0]
 800177a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800177e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001782:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001784:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001788:	3301      	adds	r3, #1
 800178a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800178e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001792:	b29b      	uxth	r3, r3
 8001794:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001798:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800179c:	8812      	ldrh	r2, [r2, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d8df      	bhi.n	8001762 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80017a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017a6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b299      	uxth	r1, r3
 80017ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	f107 020c 	add.w	r2, r7, #12
 80017c0:	200a      	movs	r0, #10
 80017c2:	9000      	str	r0, [sp, #0]
 80017c4:	4803      	ldr	r0, [pc, #12]	@ (80017d4 <ssd1306_I2C_WriteMulti+0xc8>)
 80017c6:	f000 fe95 	bl	80024f4 <HAL_I2C_Master_Transmit>
}
 80017ca:	bf00      	nop
 80017cc:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd90      	pop	{r4, r7, pc}
 80017d4:	2000008c 	.word	0x2000008c

080017d8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	460b      	mov	r3, r1
 80017e4:	71bb      	strb	r3, [r7, #6]
 80017e6:	4613      	mov	r3, r2
 80017e8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80017ea:	79bb      	ldrb	r3, [r7, #6]
 80017ec:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80017ee:	797b      	ldrb	r3, [r7, #5]
 80017f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	b299      	uxth	r1, r3
 80017f6:	f107 020c 	add.w	r2, r7, #12
 80017fa:	230a      	movs	r3, #10
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2302      	movs	r3, #2
 8001800:	4803      	ldr	r0, [pc, #12]	@ (8001810 <ssd1306_I2C_Write+0x38>)
 8001802:	f000 fe77 	bl	80024f4 <HAL_I2C_Master_Transmit>
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000008c 	.word	0x2000008c

08001814 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_MspInit+0x54>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	4a11      	ldr	r2, [pc, #68]	@ (8001868 <HAL_MspInit+0x54>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001828:	6453      	str	r3, [r2, #68]	@ 0x44
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <HAL_MspInit+0x54>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	4b0b      	ldr	r3, [pc, #44]	@ (8001868 <HAL_MspInit+0x54>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <HAL_MspInit+0x54>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001844:	6413      	str	r3, [r2, #64]	@ 0x40
 8001846:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <HAL_MspInit+0x54>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	210f      	movs	r1, #15
 8001856:	f06f 0001 	mvn.w	r0, #1
 800185a:	f000 fafd 	bl	8001e58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	@ 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a19      	ldr	r2, [pc, #100]	@ (80018f0 <HAL_I2C_MspInit+0x84>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d12c      	bne.n	80018e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <HAL_I2C_MspInit+0x88>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a17      	ldr	r2, [pc, #92]	@ (80018f4 <HAL_I2C_MspInit+0x88>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <HAL_I2C_MspInit+0x88>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80018aa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80018ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b0:	2312      	movs	r3, #18
 80018b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b8:	2303      	movs	r3, #3
 80018ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018bc:	2304      	movs	r3, #4
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	480c      	ldr	r0, [pc, #48]	@ (80018f8 <HAL_I2C_MspInit+0x8c>)
 80018c8:	f000 faf0 	bl	8001eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <HAL_I2C_MspInit+0x88>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	4a07      	ldr	r2, [pc, #28]	@ (80018f4 <HAL_I2C_MspInit+0x88>)
 80018d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018da:	6413      	str	r3, [r2, #64]	@ 0x40
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <HAL_I2C_MspInit+0x88>)
 80018de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	@ 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40005400 	.word	0x40005400
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020400 	.word	0x40020400

080018fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800190c:	d10d      	bne.n	800192a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <HAL_TIM_Base_MspInit+0x3c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	4a08      	ldr	r2, [pc, #32]	@ (8001938 <HAL_TIM_Base_MspInit+0x3c>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6413      	str	r3, [r2, #64]	@ 0x40
 800191e:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <HAL_TIM_Base_MspInit+0x3c>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800192a:	bf00      	nop
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800195c:	d11d      	bne.n	800199a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <HAL_TIM_MspPostInit+0x68>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a0f      	ldr	r2, [pc, #60]	@ (80019a4 <HAL_TIM_MspPostInit+0x68>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <HAL_TIM_MspPostInit+0x68>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800197a:	2302      	movs	r3, #2
 800197c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800198a:	2301      	movs	r3, #1
 800198c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 030c 	add.w	r3, r7, #12
 8001992:	4619      	mov	r1, r3
 8001994:	4804      	ldr	r0, [pc, #16]	@ (80019a8 <HAL_TIM_MspPostInit+0x6c>)
 8001996:	f000 fa89 	bl	8001eac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3720      	adds	r7, #32
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020000 	.word	0x40020000

080019ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	@ (8001a30 <HAL_UART_MspInit+0x84>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12b      	bne.n	8001a26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <HAL_UART_MspInit+0x88>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	4a17      	ldr	r2, [pc, #92]	@ (8001a34 <HAL_UART_MspInit+0x88>)
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019de:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <HAL_UART_MspInit+0x88>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <HAL_UART_MspInit+0x88>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a10      	ldr	r2, [pc, #64]	@ (8001a34 <HAL_UART_MspInit+0x88>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <HAL_UART_MspInit+0x88>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a06:	230c      	movs	r3, #12
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a16:	2307      	movs	r3, #7
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <HAL_UART_MspInit+0x8c>)
 8001a22:	f000 fa43 	bl	8001eac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	@ 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40004400 	.word	0x40004400
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020000 	.word	0x40020000

08001a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08e      	sub	sp, #56	@ 0x38
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	4b33      	ldr	r3, [pc, #204]	@ (8001b20 <HAL_InitTick+0xe4>)
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	4a32      	ldr	r2, [pc, #200]	@ (8001b20 <HAL_InitTick+0xe4>)
 8001a56:	f043 0310 	orr.w	r3, r3, #16
 8001a5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5c:	4b30      	ldr	r3, [pc, #192]	@ (8001b20 <HAL_InitTick+0xe4>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a68:	f107 0210 	add.w	r2, r7, #16
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f001 fae0 	bl	8003038 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d103      	bne.n	8001a8a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a82:	f001 fab1 	bl	8002fe8 <HAL_RCC_GetPCLK1Freq>
 8001a86:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a88:	e004      	b.n	8001a94 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a8a:	f001 faad 	bl	8002fe8 <HAL_RCC_GetPCLK1Freq>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a96:	4a23      	ldr	r2, [pc, #140]	@ (8001b24 <HAL_InitTick+0xe8>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	0c9b      	lsrs	r3, r3, #18
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001aa2:	4b21      	ldr	r3, [pc, #132]	@ (8001b28 <HAL_InitTick+0xec>)
 8001aa4:	4a21      	ldr	r2, [pc, #132]	@ (8001b2c <HAL_InitTick+0xf0>)
 8001aa6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b28 <HAL_InitTick+0xec>)
 8001aaa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001aae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b28 <HAL_InitTick+0xec>)
 8001ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b28 <HAL_InitTick+0xec>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <HAL_InitTick+0xec>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac2:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <HAL_InitTick+0xec>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001ac8:	4817      	ldr	r0, [pc, #92]	@ (8001b28 <HAL_InitTick+0xec>)
 8001aca:	f001 ffb5 	bl	8003a38 <HAL_TIM_Base_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d11b      	bne.n	8001b14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001adc:	4812      	ldr	r0, [pc, #72]	@ (8001b28 <HAL_InitTick+0xec>)
 8001ade:	f001 fffb 	bl	8003ad8 <HAL_TIM_Base_Start_IT>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d111      	bne.n	8001b14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001af0:	2036      	movs	r0, #54	@ 0x36
 8001af2:	f000 f9cd 	bl	8001e90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b0f      	cmp	r3, #15
 8001afa:	d808      	bhi.n	8001b0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001afc:	2200      	movs	r2, #0
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	2036      	movs	r0, #54	@ 0x36
 8001b02:	f000 f9a9 	bl	8001e58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b06:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <HAL_InitTick+0xf4>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e002      	b.n	8001b14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001b14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3738      	adds	r7, #56	@ 0x38
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	431bde83 	.word	0x431bde83
 8001b28:	200005d8 	.word	0x200005d8
 8001b2c:	40001000 	.word	0x40001000
 8001b30:	20000010 	.word	0x20000010

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <NMI_Handler+0x4>

08001b3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <HardFault_Handler+0x4>

08001b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <MemManage_Handler+0x4>

08001b4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b70:	4802      	ldr	r0, [pc, #8]	@ (8001b7c <TIM6_DAC_IRQHandler+0x10>)
 8001b72:	f002 f943 	bl	8003dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200005d8 	.word	0x200005d8

08001b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b88:	4a14      	ldr	r2, [pc, #80]	@ (8001bdc <_sbrk+0x5c>)
 8001b8a:	4b15      	ldr	r3, [pc, #84]	@ (8001be0 <_sbrk+0x60>)
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b94:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <_sbrk+0x64>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	@ (8001be8 <_sbrk+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba2:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d207      	bcs.n	8001bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb0:	f006 f9ca 	bl	8007f48 <__errno>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	e009      	b.n	8001bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a05      	ldr	r2, [pc, #20]	@ (8001be4 <_sbrk+0x64>)
 8001bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20020000 	.word	0x20020000
 8001be0:	00000400 	.word	0x00000400
 8001be4:	20000620 	.word	0x20000620
 8001be8:	200050c0 	.word	0x200050c0

08001bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf0:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <SystemInit+0x20>)
 8001bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bf6:	4a05      	ldr	r2, [pc, #20]	@ (8001c0c <SystemInit+0x20>)
 8001bf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c14:	f7ff ffea 	bl	8001bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c18:	480c      	ldr	r0, [pc, #48]	@ (8001c4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c1a:	490d      	ldr	r1, [pc, #52]	@ (8001c50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c30:	4c0a      	ldr	r4, [pc, #40]	@ (8001c5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f006 f989 	bl	8007f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c42:	f7fe fe99 	bl	8000978 <main>
  bx  lr    
 8001c46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c50:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001c54:	08009730 	.word	0x08009730
  ldr r2, =_sbss
 8001c58:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001c5c:	200050c0 	.word	0x200050c0

08001c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC_IRQHandler>
	...

08001c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca4 <HAL_Init+0x40>)
 8001c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <HAL_Init+0x40>)
 8001c7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c80:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a07      	ldr	r2, [pc, #28]	@ (8001ca4 <HAL_Init+0x40>)
 8001c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f000 f8d8 	bl	8001e42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff fed2 	bl	8001a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c98:	f7ff fdbc 	bl	8001814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023c00 	.word	0x40023c00

08001ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <HAL_IncTick+0x20>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <HAL_IncTick+0x24>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ccc <HAL_IncTick+0x24>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000014 	.word	0x20000014
 8001ccc:	20000624 	.word	0x20000624

08001cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <HAL_GetTick+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000624 	.word	0x20000624

08001ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1a:	4a04      	ldr	r2, [pc, #16]	@ (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	60d3      	str	r3, [r2, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d34:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <__NVIC_GetPriorityGrouping+0x18>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	f003 0307 	and.w	r3, r3, #7
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db0b      	blt.n	8001d76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	4907      	ldr	r1, [pc, #28]	@ (8001d84 <__NVIC_EnableIRQ+0x38>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db0a      	blt.n	8001db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	490c      	ldr	r1, [pc, #48]	@ (8001dd4 <__NVIC_SetPriority+0x4c>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db0:	e00a      	b.n	8001dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4908      	ldr	r1, [pc, #32]	@ (8001dd8 <__NVIC_SetPriority+0x50>)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	3b04      	subs	r3, #4
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	761a      	strb	r2, [r3, #24]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000e100 	.word	0xe000e100
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f1c3 0307 	rsb	r3, r3, #7
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	bf28      	it	cs
 8001dfa:	2304      	movcs	r3, #4
 8001dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d902      	bls.n	8001e0c <NVIC_EncodePriority+0x30>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3b03      	subs	r3, #3
 8001e0a:	e000      	b.n	8001e0e <NVIC_EncodePriority+0x32>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	401a      	ands	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	4313      	orrs	r3, r2
         );
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	@ 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ff4c 	bl	8001ce8 <__NVIC_SetPriorityGrouping>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6a:	f7ff ff61 	bl	8001d30 <__NVIC_GetPriorityGrouping>
 8001e6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	6978      	ldr	r0, [r7, #20]
 8001e76:	f7ff ffb1 	bl	8001ddc <NVIC_EncodePriority>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff80 	bl	8001d88 <__NVIC_SetPriority>
}
 8001e88:	bf00      	nop
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff ff54 	bl	8001d4c <__NVIC_EnableIRQ>
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	@ 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e165      	b.n	8002194 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	f040 8154 	bne.w	800218e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d005      	beq.n	8001efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d130      	bne.n	8001f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f34:	2201      	movs	r2, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 0201 	and.w	r2, r3, #1
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d017      	beq.n	8001f9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d123      	bne.n	8001ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	08da      	lsrs	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3208      	adds	r2, #8
 8001fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	08da      	lsrs	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3208      	adds	r2, #8
 8001fea:	69b9      	ldr	r1, [r7, #24]
 8001fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0203 	and.w	r2, r3, #3
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80ae 	beq.w	800218e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b5d      	ldr	r3, [pc, #372]	@ (80021ac <HAL_GPIO_Init+0x300>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203a:	4a5c      	ldr	r2, [pc, #368]	@ (80021ac <HAL_GPIO_Init+0x300>)
 800203c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002040:	6453      	str	r3, [r2, #68]	@ 0x44
 8002042:	4b5a      	ldr	r3, [pc, #360]	@ (80021ac <HAL_GPIO_Init+0x300>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800204e:	4a58      	ldr	r2, [pc, #352]	@ (80021b0 <HAL_GPIO_Init+0x304>)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	3302      	adds	r3, #2
 8002056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4f      	ldr	r2, [pc, #316]	@ (80021b4 <HAL_GPIO_Init+0x308>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d025      	beq.n	80020c6 <HAL_GPIO_Init+0x21a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4e      	ldr	r2, [pc, #312]	@ (80021b8 <HAL_GPIO_Init+0x30c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d01f      	beq.n	80020c2 <HAL_GPIO_Init+0x216>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4d      	ldr	r2, [pc, #308]	@ (80021bc <HAL_GPIO_Init+0x310>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d019      	beq.n	80020be <HAL_GPIO_Init+0x212>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4c      	ldr	r2, [pc, #304]	@ (80021c0 <HAL_GPIO_Init+0x314>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d013      	beq.n	80020ba <HAL_GPIO_Init+0x20e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4b      	ldr	r2, [pc, #300]	@ (80021c4 <HAL_GPIO_Init+0x318>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00d      	beq.n	80020b6 <HAL_GPIO_Init+0x20a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4a      	ldr	r2, [pc, #296]	@ (80021c8 <HAL_GPIO_Init+0x31c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <HAL_GPIO_Init+0x206>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a49      	ldr	r2, [pc, #292]	@ (80021cc <HAL_GPIO_Init+0x320>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d101      	bne.n	80020ae <HAL_GPIO_Init+0x202>
 80020aa:	2306      	movs	r3, #6
 80020ac:	e00c      	b.n	80020c8 <HAL_GPIO_Init+0x21c>
 80020ae:	2307      	movs	r3, #7
 80020b0:	e00a      	b.n	80020c8 <HAL_GPIO_Init+0x21c>
 80020b2:	2305      	movs	r3, #5
 80020b4:	e008      	b.n	80020c8 <HAL_GPIO_Init+0x21c>
 80020b6:	2304      	movs	r3, #4
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x21c>
 80020ba:	2303      	movs	r3, #3
 80020bc:	e004      	b.n	80020c8 <HAL_GPIO_Init+0x21c>
 80020be:	2302      	movs	r3, #2
 80020c0:	e002      	b.n	80020c8 <HAL_GPIO_Init+0x21c>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_GPIO_Init+0x21c>
 80020c6:	2300      	movs	r3, #0
 80020c8:	69fa      	ldr	r2, [r7, #28]
 80020ca:	f002 0203 	and.w	r2, r2, #3
 80020ce:	0092      	lsls	r2, r2, #2
 80020d0:	4093      	lsls	r3, r2
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d8:	4935      	ldr	r1, [pc, #212]	@ (80021b0 <HAL_GPIO_Init+0x304>)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e6:	4b3a      	ldr	r3, [pc, #232]	@ (80021d0 <HAL_GPIO_Init+0x324>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800210a:	4a31      	ldr	r2, [pc, #196]	@ (80021d0 <HAL_GPIO_Init+0x324>)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002110:	4b2f      	ldr	r3, [pc, #188]	@ (80021d0 <HAL_GPIO_Init+0x324>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002134:	4a26      	ldr	r2, [pc, #152]	@ (80021d0 <HAL_GPIO_Init+0x324>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800213a:	4b25      	ldr	r3, [pc, #148]	@ (80021d0 <HAL_GPIO_Init+0x324>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800215e:	4a1c      	ldr	r2, [pc, #112]	@ (80021d0 <HAL_GPIO_Init+0x324>)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002164:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <HAL_GPIO_Init+0x324>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002188:	4a11      	ldr	r2, [pc, #68]	@ (80021d0 <HAL_GPIO_Init+0x324>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3301      	adds	r3, #1
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	2b0f      	cmp	r3, #15
 8002198:	f67f ae96 	bls.w	8001ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	3724      	adds	r7, #36	@ 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40013800 	.word	0x40013800
 80021b4:	40020000 	.word	0x40020000
 80021b8:	40020400 	.word	0x40020400
 80021bc:	40020800 	.word	0x40020800
 80021c0:	40020c00 	.word	0x40020c00
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40021400 	.word	0x40021400
 80021cc:	40021800 	.word	0x40021800
 80021d0:	40013c00 	.word	0x40013c00

080021d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e001      	b.n	80021f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
 8002210:	4613      	mov	r3, r2
 8002212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002214:	787b      	ldrb	r3, [r7, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002220:	e003      	b.n	800222a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002222:	887b      	ldrh	r3, [r7, #2]
 8002224:	041a      	lsls	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	619a      	str	r2, [r3, #24]
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002236:	b480      	push	{r7}
 8002238:	b085      	sub	sp, #20
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002248:	887a      	ldrh	r2, [r7, #2]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4013      	ands	r3, r2
 800224e:	041a      	lsls	r2, r3, #16
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	43d9      	mvns	r1, r3
 8002254:	887b      	ldrh	r3, [r7, #2]
 8002256:	400b      	ands	r3, r1
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	619a      	str	r2, [r3, #24]
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e12b      	b.n	80024d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff faea 	bl	800186c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2224      	movs	r2, #36	@ 0x24
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022d0:	f000 fe8a 	bl	8002fe8 <HAL_RCC_GetPCLK1Freq>
 80022d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4a81      	ldr	r2, [pc, #516]	@ (80024e0 <HAL_I2C_Init+0x274>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d807      	bhi.n	80022f0 <HAL_I2C_Init+0x84>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a80      	ldr	r2, [pc, #512]	@ (80024e4 <HAL_I2C_Init+0x278>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	bf94      	ite	ls
 80022e8:	2301      	movls	r3, #1
 80022ea:	2300      	movhi	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	e006      	b.n	80022fe <HAL_I2C_Init+0x92>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4a7d      	ldr	r2, [pc, #500]	@ (80024e8 <HAL_I2C_Init+0x27c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	bf94      	ite	ls
 80022f8:	2301      	movls	r3, #1
 80022fa:	2300      	movhi	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0e7      	b.n	80024d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a78      	ldr	r2, [pc, #480]	@ (80024ec <HAL_I2C_Init+0x280>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	0c9b      	lsrs	r3, r3, #18
 8002310:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	430a      	orrs	r2, r1
 8002324:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a6a      	ldr	r2, [pc, #424]	@ (80024e0 <HAL_I2C_Init+0x274>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d802      	bhi.n	8002340 <HAL_I2C_Init+0xd4>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3301      	adds	r3, #1
 800233e:	e009      	b.n	8002354 <HAL_I2C_Init+0xe8>
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	4a69      	ldr	r2, [pc, #420]	@ (80024f0 <HAL_I2C_Init+0x284>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	3301      	adds	r3, #1
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	430b      	orrs	r3, r1
 800235a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002366:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	495c      	ldr	r1, [pc, #368]	@ (80024e0 <HAL_I2C_Init+0x274>)
 8002370:	428b      	cmp	r3, r1
 8002372:	d819      	bhi.n	80023a8 <HAL_I2C_Init+0x13c>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e59      	subs	r1, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002382:	1c59      	adds	r1, r3, #1
 8002384:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002388:	400b      	ands	r3, r1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <HAL_I2C_Init+0x138>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1e59      	subs	r1, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fbb1 f3f3 	udiv	r3, r1, r3
 800239c:	3301      	adds	r3, #1
 800239e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a2:	e051      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 80023a4:	2304      	movs	r3, #4
 80023a6:	e04f      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d111      	bne.n	80023d4 <HAL_I2C_Init+0x168>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1e58      	subs	r0, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	440b      	add	r3, r1
 80023be:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c2:	3301      	adds	r3, #1
 80023c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf0c      	ite	eq
 80023cc:	2301      	moveq	r3, #1
 80023ce:	2300      	movne	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	e012      	b.n	80023fa <HAL_I2C_Init+0x18e>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1e58      	subs	r0, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	0099      	lsls	r1, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_I2C_Init+0x196>
 80023fe:	2301      	movs	r3, #1
 8002400:	e022      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10e      	bne.n	8002428 <HAL_I2C_Init+0x1bc>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1e58      	subs	r0, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	440b      	add	r3, r1
 8002418:	fbb0 f3f3 	udiv	r3, r0, r3
 800241c:	3301      	adds	r3, #1
 800241e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002426:	e00f      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1e58      	subs	r0, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	0099      	lsls	r1, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	fbb0 f3f3 	udiv	r3, r0, r3
 800243e:	3301      	adds	r3, #1
 8002440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002444:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	6809      	ldr	r1, [r1, #0]
 800244c:	4313      	orrs	r3, r2
 800244e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69da      	ldr	r2, [r3, #28]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002476:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6911      	ldr	r1, [r2, #16]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68d2      	ldr	r2, [r2, #12]
 8002482:	4311      	orrs	r1, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	430b      	orrs	r3, r1
 800248a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	000186a0 	.word	0x000186a0
 80024e4:	001e847f 	.word	0x001e847f
 80024e8:	003d08ff 	.word	0x003d08ff
 80024ec:	431bde83 	.word	0x431bde83
 80024f0:	10624dd3 	.word	0x10624dd3

080024f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	461a      	mov	r2, r3
 8002500:	460b      	mov	r3, r1
 8002502:	817b      	strh	r3, [r7, #10]
 8002504:	4613      	mov	r3, r2
 8002506:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002508:	f7ff fbe2 	bl	8001cd0 <HAL_GetTick>
 800250c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b20      	cmp	r3, #32
 8002518:	f040 80e0 	bne.w	80026dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2319      	movs	r3, #25
 8002522:	2201      	movs	r2, #1
 8002524:	4970      	ldr	r1, [pc, #448]	@ (80026e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 fa92 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002532:	2302      	movs	r3, #2
 8002534:	e0d3      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_I2C_Master_Transmit+0x50>
 8002540:	2302      	movs	r3, #2
 8002542:	e0cc      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d007      	beq.n	800256a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0201 	orr.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002578:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2221      	movs	r2, #33	@ 0x21
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2210      	movs	r2, #16
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	893a      	ldrh	r2, [r7, #8]
 800259a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4a50      	ldr	r2, [pc, #320]	@ (80026ec <HAL_I2C_Master_Transmit+0x1f8>)
 80025aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025ac:	8979      	ldrh	r1, [r7, #10]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	6a3a      	ldr	r2, [r7, #32]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f9ca 	bl	800294c <I2C_MasterRequestWrite>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e08d      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025d8:	e066      	b.n	80026a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	6a39      	ldr	r1, [r7, #32]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fb50 	bl	8002c84 <I2C_WaitOnTXEFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00d      	beq.n	8002606 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d107      	bne.n	8002602 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002600:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e06b      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b04      	cmp	r3, #4
 8002642:	d11b      	bne.n	800267c <HAL_I2C_Master_Transmit+0x188>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	d017      	beq.n	800267c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	6a39      	ldr	r1, [r7, #32]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fb47 	bl	8002d14 <I2C_WaitOnBTFFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00d      	beq.n	80026a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	2b04      	cmp	r3, #4
 8002692:	d107      	bne.n	80026a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e01a      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d194      	bne.n	80025da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	e000      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026dc:	2302      	movs	r3, #2
  }
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	00100002 	.word	0x00100002
 80026ec:	ffff0000 	.word	0xffff0000

080026f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	@ 0x28
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	460b      	mov	r3, r1
 80026fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002700:	f7ff fae6 	bl	8001cd0 <HAL_GetTick>
 8002704:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b20      	cmp	r3, #32
 8002714:	f040 8111 	bne.w	800293a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2319      	movs	r3, #25
 800271e:	2201      	movs	r2, #1
 8002720:	4988      	ldr	r1, [pc, #544]	@ (8002944 <HAL_I2C_IsDeviceReady+0x254>)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f994 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800272e:	2302      	movs	r3, #2
 8002730:	e104      	b.n	800293c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_I2C_IsDeviceReady+0x50>
 800273c:	2302      	movs	r3, #2
 800273e:	e0fd      	b.n	800293c <HAL_I2C_IsDeviceReady+0x24c>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d007      	beq.n	8002766 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002774:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2224      	movs	r2, #36	@ 0x24
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a70      	ldr	r2, [pc, #448]	@ (8002948 <HAL_I2C_IsDeviceReady+0x258>)
 8002788:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002798:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f952 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00d      	beq.n	80027ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027c0:	d103      	bne.n	80027ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e0b6      	b.n	800293c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027ce:	897b      	ldrh	r3, [r7, #10]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80027de:	f7ff fa77 	bl	8001cd0 <HAL_GetTick>
 80027e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	bf0c      	ite	eq
 80027f2:	2301      	moveq	r3, #1
 80027f4:	2300      	movne	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002812:	e025      	b.n	8002860 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002814:	f7ff fa5c 	bl	8001cd0 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d302      	bcc.n	800282a <HAL_I2C_IsDeviceReady+0x13a>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d103      	bne.n	8002832 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	22a0      	movs	r2, #160	@ 0xa0
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b02      	cmp	r3, #2
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2ba0      	cmp	r3, #160	@ 0xa0
 800286a:	d005      	beq.n	8002878 <HAL_I2C_IsDeviceReady+0x188>
 800286c:	7dfb      	ldrb	r3, [r7, #23]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d102      	bne.n	8002878 <HAL_I2C_IsDeviceReady+0x188>
 8002872:	7dbb      	ldrb	r3, [r7, #22]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0cd      	beq.n	8002814 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b02      	cmp	r3, #2
 800288c:	d129      	bne.n	80028e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800289c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2319      	movs	r3, #25
 80028ba:	2201      	movs	r2, #1
 80028bc:	4921      	ldr	r1, [pc, #132]	@ (8002944 <HAL_I2C_IsDeviceReady+0x254>)
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f8c6 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e036      	b.n	800293c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e02c      	b.n	800293c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2319      	movs	r3, #25
 8002902:	2201      	movs	r2, #1
 8002904:	490f      	ldr	r1, [pc, #60]	@ (8002944 <HAL_I2C_IsDeviceReady+0x254>)
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f8a2 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e012      	b.n	800293c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	3301      	adds	r3, #1
 800291a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	f4ff af32 	bcc.w	800278a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800293a:	2302      	movs	r3, #2
  }
}
 800293c:	4618      	mov	r0, r3
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	00100002 	.word	0x00100002
 8002948:	ffff0000 	.word	0xffff0000

0800294c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	460b      	mov	r3, r1
 800295a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002960:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b08      	cmp	r3, #8
 8002966:	d006      	beq.n	8002976 <I2C_MasterRequestWrite+0x2a>
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d003      	beq.n	8002976 <I2C_MasterRequestWrite+0x2a>
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002974:	d108      	bne.n	8002988 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e00b      	b.n	80029a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298c:	2b12      	cmp	r3, #18
 800298e:	d107      	bne.n	80029a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800299e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f84f 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00d      	beq.n	80029d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029c6:	d103      	bne.n	80029d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e035      	b.n	8002a40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029dc:	d108      	bne.n	80029f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029de:	897b      	ldrh	r3, [r7, #10]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029ec:	611a      	str	r2, [r3, #16]
 80029ee:	e01b      	b.n	8002a28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029f0:	897b      	ldrh	r3, [r7, #10]
 80029f2:	11db      	asrs	r3, r3, #7
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f003 0306 	and.w	r3, r3, #6
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f063 030f 	orn	r3, r3, #15
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	490e      	ldr	r1, [pc, #56]	@ (8002a48 <I2C_MasterRequestWrite+0xfc>)
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f898 	bl	8002b44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e010      	b.n	8002a40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a1e:	897b      	ldrh	r3, [r7, #10]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	4907      	ldr	r1, [pc, #28]	@ (8002a4c <I2C_MasterRequestWrite+0x100>)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f888 	bl	8002b44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	00010008 	.word	0x00010008
 8002a4c:	00010002 	.word	0x00010002

08002a50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a60:	e048      	b.n	8002af4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d044      	beq.n	8002af4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6a:	f7ff f931 	bl	8001cd0 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d302      	bcc.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d139      	bne.n	8002af4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	0c1b      	lsrs	r3, r3, #16
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d10d      	bne.n	8002aa6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	43da      	mvns	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	4013      	ands	r3, r2
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	e00c      	b.n	8002ac0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	43da      	mvns	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d116      	bne.n	8002af4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	f043 0220 	orr.w	r2, r3, #32
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e023      	b.n	8002b3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	0c1b      	lsrs	r3, r3, #16
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d10d      	bne.n	8002b1a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	43da      	mvns	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	e00c      	b.n	8002b34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	43da      	mvns	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4013      	ands	r3, r2
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d093      	beq.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b52:	e071      	b.n	8002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b62:	d123      	bne.n	8002bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	f043 0204 	orr.w	r2, r3, #4
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e067      	b.n	8002c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb2:	d041      	beq.n	8002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb4:	f7ff f88c 	bl	8001cd0 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d302      	bcc.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d136      	bne.n	8002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10c      	bne.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4013      	ands	r3, r2
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bf14      	ite	ne
 8002be6:	2301      	movne	r3, #1
 8002be8:	2300      	moveq	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	e00b      	b.n	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d016      	beq.n	8002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e021      	b.n	8002c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	0c1b      	lsrs	r3, r3, #16
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d10c      	bne.n	8002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	43da      	mvns	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e00b      	b.n	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4013      	ands	r3, r2
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bf14      	ite	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	2300      	moveq	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f47f af6d 	bne.w	8002b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c90:	e034      	b.n	8002cfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f886 	bl	8002da4 <I2C_IsAcknowledgeFailed>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e034      	b.n	8002d0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca8:	d028      	beq.n	8002cfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002caa:	f7ff f811 	bl	8001cd0 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d302      	bcc.n	8002cc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d11d      	bne.n	8002cfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cca:	2b80      	cmp	r3, #128	@ 0x80
 8002ccc:	d016      	beq.n	8002cfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	f043 0220 	orr.w	r2, r3, #32
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e007      	b.n	8002d0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d06:	2b80      	cmp	r3, #128	@ 0x80
 8002d08:	d1c3      	bne.n	8002c92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d20:	e034      	b.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f83e 	bl	8002da4 <I2C_IsAcknowledgeFailed>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e034      	b.n	8002d9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d38:	d028      	beq.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3a:	f7fe ffc9 	bl	8001cd0 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d302      	bcc.n	8002d50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d11d      	bne.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d016      	beq.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d78:	f043 0220 	orr.w	r2, r3, #32
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e007      	b.n	8002d9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d1c3      	bne.n	8002d22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dba:	d11b      	bne.n	8002df4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de0:	f043 0204 	orr.w	r2, r3, #4
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0cc      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b68      	ldr	r3, [pc, #416]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d90c      	bls.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b65      	ldr	r3, [pc, #404]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b63      	ldr	r3, [pc, #396]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b8      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e58:	4b59      	ldr	r3, [pc, #356]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4a58      	ldr	r2, [pc, #352]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e70:	4b53      	ldr	r3, [pc, #332]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	4a52      	ldr	r2, [pc, #328]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b50      	ldr	r3, [pc, #320]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	494d      	ldr	r1, [pc, #308]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d044      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b47      	ldr	r3, [pc, #284]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d119      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e06f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e067      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee2:	4b37      	ldr	r3, [pc, #220]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f023 0203 	bic.w	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4934      	ldr	r1, [pc, #208]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef4:	f7fe feec 	bl	8001cd0 <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7fe fee8 	bl	8001cd0 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e04f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 020c 	and.w	r2, r3, #12
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1eb      	bne.n	8002efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b25      	ldr	r3, [pc, #148]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d20c      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b22      	ldr	r3, [pc, #136]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b20      	ldr	r3, [pc, #128]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e032      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f58:	4b19      	ldr	r3, [pc, #100]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4916      	ldr	r1, [pc, #88]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f76:	4b12      	ldr	r3, [pc, #72]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	490e      	ldr	r1, [pc, #56]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f8a:	f000 f887 	bl	800309c <HAL_RCC_GetSysClockFreq>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	490a      	ldr	r1, [pc, #40]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	5ccb      	ldrb	r3, [r1, r3]
 8002f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa2:	4a09      	ldr	r2, [pc, #36]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002fa6:	4b09      	ldr	r3, [pc, #36]	@ (8002fcc <HAL_RCC_ClockConfig+0x1c8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe fd46 	bl	8001a3c <HAL_InitTick>

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023c00 	.word	0x40023c00
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	080096d4 	.word	0x080096d4
 8002fc8:	2000000c 	.word	0x2000000c
 8002fcc:	20000010 	.word	0x20000010

08002fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd4:	4b03      	ldr	r3, [pc, #12]	@ (8002fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	2000000c 	.word	0x2000000c

08002fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fec:	f7ff fff0 	bl	8002fd0 <HAL_RCC_GetHCLKFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	0a9b      	lsrs	r3, r3, #10
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	4903      	ldr	r1, [pc, #12]	@ (800300c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003004:	4618      	mov	r0, r3
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40023800 	.word	0x40023800
 800300c:	080096e4 	.word	0x080096e4

08003010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003014:	f7ff ffdc 	bl	8002fd0 <HAL_RCC_GetHCLKFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	0b5b      	lsrs	r3, r3, #13
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	4903      	ldr	r1, [pc, #12]	@ (8003034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003026:	5ccb      	ldrb	r3, [r1, r3]
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40023800 	.word	0x40023800
 8003034:	080096e4 	.word	0x080096e4

08003038 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	220f      	movs	r2, #15
 8003046:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003048:	4b12      	ldr	r3, [pc, #72]	@ (8003094 <HAL_RCC_GetClockConfig+0x5c>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0203 	and.w	r2, r3, #3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003054:	4b0f      	ldr	r3, [pc, #60]	@ (8003094 <HAL_RCC_GetClockConfig+0x5c>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003060:	4b0c      	ldr	r3, [pc, #48]	@ (8003094 <HAL_RCC_GetClockConfig+0x5c>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800306c:	4b09      	ldr	r3, [pc, #36]	@ (8003094 <HAL_RCC_GetClockConfig+0x5c>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	08db      	lsrs	r3, r3, #3
 8003072:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800307a:	4b07      	ldr	r3, [pc, #28]	@ (8003098 <HAL_RCC_GetClockConfig+0x60>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 020f 	and.w	r2, r3, #15
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	601a      	str	r2, [r3, #0]
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	40023c00 	.word	0x40023c00

0800309c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800309c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a0:	b0ae      	sub	sp, #184	@ 0xb8
 80030a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030c2:	4bcb      	ldr	r3, [pc, #812]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	f200 8206 	bhi.w	80034dc <HAL_RCC_GetSysClockFreq+0x440>
 80030d0:	a201      	add	r2, pc, #4	@ (adr r2, 80030d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80030d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	0800310d 	.word	0x0800310d
 80030dc:	080034dd 	.word	0x080034dd
 80030e0:	080034dd 	.word	0x080034dd
 80030e4:	080034dd 	.word	0x080034dd
 80030e8:	08003115 	.word	0x08003115
 80030ec:	080034dd 	.word	0x080034dd
 80030f0:	080034dd 	.word	0x080034dd
 80030f4:	080034dd 	.word	0x080034dd
 80030f8:	0800311d 	.word	0x0800311d
 80030fc:	080034dd 	.word	0x080034dd
 8003100:	080034dd 	.word	0x080034dd
 8003104:	080034dd 	.word	0x080034dd
 8003108:	0800330d 	.word	0x0800330d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800310c:	4bb9      	ldr	r3, [pc, #740]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800310e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003112:	e1e7      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003114:	4bb8      	ldr	r3, [pc, #736]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003116:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800311a:	e1e3      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800311c:	4bb4      	ldr	r3, [pc, #720]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003124:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003128:	4bb1      	ldr	r3, [pc, #708]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d071      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003134:	4bae      	ldr	r3, [pc, #696]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	099b      	lsrs	r3, r3, #6
 800313a:	2200      	movs	r2, #0
 800313c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003140:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003144:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003150:	2300      	movs	r3, #0
 8003152:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003156:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800315a:	4622      	mov	r2, r4
 800315c:	462b      	mov	r3, r5
 800315e:	f04f 0000 	mov.w	r0, #0
 8003162:	f04f 0100 	mov.w	r1, #0
 8003166:	0159      	lsls	r1, r3, #5
 8003168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800316c:	0150      	lsls	r0, r2, #5
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4621      	mov	r1, r4
 8003174:	1a51      	subs	r1, r2, r1
 8003176:	6439      	str	r1, [r7, #64]	@ 0x40
 8003178:	4629      	mov	r1, r5
 800317a:	eb63 0301 	sbc.w	r3, r3, r1
 800317e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800318c:	4649      	mov	r1, r9
 800318e:	018b      	lsls	r3, r1, #6
 8003190:	4641      	mov	r1, r8
 8003192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003196:	4641      	mov	r1, r8
 8003198:	018a      	lsls	r2, r1, #6
 800319a:	4641      	mov	r1, r8
 800319c:	1a51      	subs	r1, r2, r1
 800319e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031a0:	4649      	mov	r1, r9
 80031a2:	eb63 0301 	sbc.w	r3, r3, r1
 80031a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80031b4:	4649      	mov	r1, r9
 80031b6:	00cb      	lsls	r3, r1, #3
 80031b8:	4641      	mov	r1, r8
 80031ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031be:	4641      	mov	r1, r8
 80031c0:	00ca      	lsls	r2, r1, #3
 80031c2:	4610      	mov	r0, r2
 80031c4:	4619      	mov	r1, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	4622      	mov	r2, r4
 80031ca:	189b      	adds	r3, r3, r2
 80031cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80031ce:	462b      	mov	r3, r5
 80031d0:	460a      	mov	r2, r1
 80031d2:	eb42 0303 	adc.w	r3, r2, r3
 80031d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80031e4:	4629      	mov	r1, r5
 80031e6:	024b      	lsls	r3, r1, #9
 80031e8:	4621      	mov	r1, r4
 80031ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031ee:	4621      	mov	r1, r4
 80031f0:	024a      	lsls	r2, r1, #9
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003200:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003204:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003208:	f7fd f85a 	bl	80002c0 <__aeabi_uldivmod>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4613      	mov	r3, r2
 8003212:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003216:	e067      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003218:	4b75      	ldr	r3, [pc, #468]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	099b      	lsrs	r3, r3, #6
 800321e:	2200      	movs	r2, #0
 8003220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003224:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003228:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800322c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003230:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003232:	2300      	movs	r3, #0
 8003234:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003236:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800323a:	4622      	mov	r2, r4
 800323c:	462b      	mov	r3, r5
 800323e:	f04f 0000 	mov.w	r0, #0
 8003242:	f04f 0100 	mov.w	r1, #0
 8003246:	0159      	lsls	r1, r3, #5
 8003248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800324c:	0150      	lsls	r0, r2, #5
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4621      	mov	r1, r4
 8003254:	1a51      	subs	r1, r2, r1
 8003256:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003258:	4629      	mov	r1, r5
 800325a:	eb63 0301 	sbc.w	r3, r3, r1
 800325e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800326c:	4649      	mov	r1, r9
 800326e:	018b      	lsls	r3, r1, #6
 8003270:	4641      	mov	r1, r8
 8003272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003276:	4641      	mov	r1, r8
 8003278:	018a      	lsls	r2, r1, #6
 800327a:	4641      	mov	r1, r8
 800327c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003280:	4649      	mov	r1, r9
 8003282:	eb63 0b01 	sbc.w	fp, r3, r1
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003292:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003296:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800329a:	4692      	mov	sl, r2
 800329c:	469b      	mov	fp, r3
 800329e:	4623      	mov	r3, r4
 80032a0:	eb1a 0303 	adds.w	r3, sl, r3
 80032a4:	623b      	str	r3, [r7, #32]
 80032a6:	462b      	mov	r3, r5
 80032a8:	eb4b 0303 	adc.w	r3, fp, r3
 80032ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80032ba:	4629      	mov	r1, r5
 80032bc:	028b      	lsls	r3, r1, #10
 80032be:	4621      	mov	r1, r4
 80032c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032c4:	4621      	mov	r1, r4
 80032c6:	028a      	lsls	r2, r1, #10
 80032c8:	4610      	mov	r0, r2
 80032ca:	4619      	mov	r1, r3
 80032cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032d0:	2200      	movs	r2, #0
 80032d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80032d4:	677a      	str	r2, [r7, #116]	@ 0x74
 80032d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80032da:	f7fc fff1 	bl	80002c0 <__aeabi_uldivmod>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4613      	mov	r3, r2
 80032e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032e8:	4b41      	ldr	r3, [pc, #260]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	0c1b      	lsrs	r3, r3, #16
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	3301      	adds	r3, #1
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80032fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003302:	fbb2 f3f3 	udiv	r3, r2, r3
 8003306:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800330a:	e0eb      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800330c:	4b38      	ldr	r3, [pc, #224]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003314:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003318:	4b35      	ldr	r3, [pc, #212]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d06b      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003324:	4b32      	ldr	r3, [pc, #200]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	099b      	lsrs	r3, r3, #6
 800332a:	2200      	movs	r2, #0
 800332c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800332e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003330:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003336:	663b      	str	r3, [r7, #96]	@ 0x60
 8003338:	2300      	movs	r3, #0
 800333a:	667b      	str	r3, [r7, #100]	@ 0x64
 800333c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003340:	4622      	mov	r2, r4
 8003342:	462b      	mov	r3, r5
 8003344:	f04f 0000 	mov.w	r0, #0
 8003348:	f04f 0100 	mov.w	r1, #0
 800334c:	0159      	lsls	r1, r3, #5
 800334e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003352:	0150      	lsls	r0, r2, #5
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4621      	mov	r1, r4
 800335a:	1a51      	subs	r1, r2, r1
 800335c:	61b9      	str	r1, [r7, #24]
 800335e:	4629      	mov	r1, r5
 8003360:	eb63 0301 	sbc.w	r3, r3, r1
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003372:	4659      	mov	r1, fp
 8003374:	018b      	lsls	r3, r1, #6
 8003376:	4651      	mov	r1, sl
 8003378:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800337c:	4651      	mov	r1, sl
 800337e:	018a      	lsls	r2, r1, #6
 8003380:	4651      	mov	r1, sl
 8003382:	ebb2 0801 	subs.w	r8, r2, r1
 8003386:	4659      	mov	r1, fp
 8003388:	eb63 0901 	sbc.w	r9, r3, r1
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003398:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800339c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033a0:	4690      	mov	r8, r2
 80033a2:	4699      	mov	r9, r3
 80033a4:	4623      	mov	r3, r4
 80033a6:	eb18 0303 	adds.w	r3, r8, r3
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	462b      	mov	r3, r5
 80033ae:	eb49 0303 	adc.w	r3, r9, r3
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80033c0:	4629      	mov	r1, r5
 80033c2:	024b      	lsls	r3, r1, #9
 80033c4:	4621      	mov	r1, r4
 80033c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033ca:	4621      	mov	r1, r4
 80033cc:	024a      	lsls	r2, r1, #9
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033d6:	2200      	movs	r2, #0
 80033d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80033dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033e0:	f7fc ff6e 	bl	80002c0 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4613      	mov	r3, r2
 80033ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033ee:	e065      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x420>
 80033f0:	40023800 	.word	0x40023800
 80033f4:	00f42400 	.word	0x00f42400
 80033f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fc:	4b3d      	ldr	r3, [pc, #244]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	099b      	lsrs	r3, r3, #6
 8003402:	2200      	movs	r2, #0
 8003404:	4618      	mov	r0, r3
 8003406:	4611      	mov	r1, r2
 8003408:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800340c:	653b      	str	r3, [r7, #80]	@ 0x50
 800340e:	2300      	movs	r3, #0
 8003410:	657b      	str	r3, [r7, #84]	@ 0x54
 8003412:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003416:	4642      	mov	r2, r8
 8003418:	464b      	mov	r3, r9
 800341a:	f04f 0000 	mov.w	r0, #0
 800341e:	f04f 0100 	mov.w	r1, #0
 8003422:	0159      	lsls	r1, r3, #5
 8003424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003428:	0150      	lsls	r0, r2, #5
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4641      	mov	r1, r8
 8003430:	1a51      	subs	r1, r2, r1
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	4649      	mov	r1, r9
 8003436:	eb63 0301 	sbc.w	r3, r3, r1
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003448:	4659      	mov	r1, fp
 800344a:	018b      	lsls	r3, r1, #6
 800344c:	4651      	mov	r1, sl
 800344e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003452:	4651      	mov	r1, sl
 8003454:	018a      	lsls	r2, r1, #6
 8003456:	4651      	mov	r1, sl
 8003458:	1a54      	subs	r4, r2, r1
 800345a:	4659      	mov	r1, fp
 800345c:	eb63 0501 	sbc.w	r5, r3, r1
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	00eb      	lsls	r3, r5, #3
 800346a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800346e:	00e2      	lsls	r2, r4, #3
 8003470:	4614      	mov	r4, r2
 8003472:	461d      	mov	r5, r3
 8003474:	4643      	mov	r3, r8
 8003476:	18e3      	adds	r3, r4, r3
 8003478:	603b      	str	r3, [r7, #0]
 800347a:	464b      	mov	r3, r9
 800347c:	eb45 0303 	adc.w	r3, r5, r3
 8003480:	607b      	str	r3, [r7, #4]
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800348e:	4629      	mov	r1, r5
 8003490:	028b      	lsls	r3, r1, #10
 8003492:	4621      	mov	r1, r4
 8003494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003498:	4621      	mov	r1, r4
 800349a:	028a      	lsls	r2, r1, #10
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034a4:	2200      	movs	r2, #0
 80034a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034a8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80034aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034ae:	f7fc ff07 	bl	80002c0 <__aeabi_uldivmod>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4613      	mov	r3, r2
 80034b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034bc:	4b0d      	ldr	r3, [pc, #52]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	0f1b      	lsrs	r3, r3, #28
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80034ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80034d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034da:	e003      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034dc:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80034de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	37b8      	adds	r7, #184	@ 0xb8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800
 80034f8:	00f42400 	.word	0x00f42400

080034fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e28d      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8083 	beq.w	8003622 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800351c:	4b94      	ldr	r3, [pc, #592]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b04      	cmp	r3, #4
 8003526:	d019      	beq.n	800355c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003528:	4b91      	ldr	r3, [pc, #580]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003530:	2b08      	cmp	r3, #8
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003534:	4b8e      	ldr	r3, [pc, #568]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800353c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003540:	d00c      	beq.n	800355c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003542:	4b8b      	ldr	r3, [pc, #556]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800354a:	2b0c      	cmp	r3, #12
 800354c:	d112      	bne.n	8003574 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354e:	4b88      	ldr	r3, [pc, #544]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003556:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800355a:	d10b      	bne.n	8003574 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355c:	4b84      	ldr	r3, [pc, #528]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d05b      	beq.n	8003620 <HAL_RCC_OscConfig+0x124>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d157      	bne.n	8003620 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e25a      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800357c:	d106      	bne.n	800358c <HAL_RCC_OscConfig+0x90>
 800357e:	4b7c      	ldr	r3, [pc, #496]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a7b      	ldr	r2, [pc, #492]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e01d      	b.n	80035c8 <HAL_RCC_OscConfig+0xcc>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0xb4>
 8003596:	4b76      	ldr	r3, [pc, #472]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a75      	ldr	r2, [pc, #468]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 800359c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	4b73      	ldr	r3, [pc, #460]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a72      	ldr	r2, [pc, #456]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 80035a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e00b      	b.n	80035c8 <HAL_RCC_OscConfig+0xcc>
 80035b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 80035b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4b6c      	ldr	r3, [pc, #432]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 80035c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d013      	beq.n	80035f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fe fb7e 	bl	8001cd0 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d8:	f7fe fb7a 	bl	8001cd0 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	@ 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e21f      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b61      	ldr	r3, [pc, #388]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0xdc>
 80035f6:	e014      	b.n	8003622 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fe fb6a 	bl	8001cd0 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003600:	f7fe fb66 	bl	8001cd0 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	@ 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e20b      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003612:	4b57      	ldr	r3, [pc, #348]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x104>
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d06f      	beq.n	800370e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800362e:	4b50      	ldr	r3, [pc, #320]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b00      	cmp	r3, #0
 8003638:	d017      	beq.n	800366a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800363a:	4b4d      	ldr	r3, [pc, #308]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003642:	2b08      	cmp	r3, #8
 8003644:	d105      	bne.n	8003652 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003646:	4b4a      	ldr	r3, [pc, #296]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003652:	4b47      	ldr	r3, [pc, #284]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800365a:	2b0c      	cmp	r3, #12
 800365c:	d11c      	bne.n	8003698 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365e:	4b44      	ldr	r3, [pc, #272]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d116      	bne.n	8003698 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366a:	4b41      	ldr	r3, [pc, #260]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_RCC_OscConfig+0x186>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d001      	beq.n	8003682 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e1d3      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003682:	4b3b      	ldr	r3, [pc, #236]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4937      	ldr	r1, [pc, #220]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	e03a      	b.n	800370e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d020      	beq.n	80036e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a0:	4b34      	ldr	r3, [pc, #208]	@ (8003774 <HAL_RCC_OscConfig+0x278>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a6:	f7fe fb13 	bl	8001cd0 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ae:	f7fe fb0f 	bl	8001cd0 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e1b4      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036cc:	4b28      	ldr	r3, [pc, #160]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4925      	ldr	r1, [pc, #148]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	600b      	str	r3, [r1, #0]
 80036e0:	e015      	b.n	800370e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e2:	4b24      	ldr	r3, [pc, #144]	@ (8003774 <HAL_RCC_OscConfig+0x278>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fe faf2 	bl	8001cd0 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f0:	f7fe faee 	bl	8001cd0 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e193      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003702:	4b1b      	ldr	r3, [pc, #108]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d036      	beq.n	8003788 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003722:	4b15      	ldr	r3, [pc, #84]	@ (8003778 <HAL_RCC_OscConfig+0x27c>)
 8003724:	2201      	movs	r2, #1
 8003726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003728:	f7fe fad2 	bl	8001cd0 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003730:	f7fe face 	bl	8001cd0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e173      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003742:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <HAL_RCC_OscConfig+0x274>)
 8003744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0x234>
 800374e:	e01b      	b.n	8003788 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003750:	4b09      	ldr	r3, [pc, #36]	@ (8003778 <HAL_RCC_OscConfig+0x27c>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003756:	f7fe fabb 	bl	8001cd0 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375c:	e00e      	b.n	800377c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375e:	f7fe fab7 	bl	8001cd0 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d907      	bls.n	800377c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e15c      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
 8003770:	40023800 	.word	0x40023800
 8003774:	42470000 	.word	0x42470000
 8003778:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800377c:	4b8a      	ldr	r3, [pc, #552]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 800377e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1ea      	bne.n	800375e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8097 	beq.w	80038c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003796:	2300      	movs	r3, #0
 8003798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379a:	4b83      	ldr	r3, [pc, #524]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10f      	bne.n	80037c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	4b7f      	ldr	r3, [pc, #508]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	4a7e      	ldr	r2, [pc, #504]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 80037b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037b6:	4b7c      	ldr	r3, [pc, #496]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c2:	2301      	movs	r3, #1
 80037c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c6:	4b79      	ldr	r3, [pc, #484]	@ (80039ac <HAL_RCC_OscConfig+0x4b0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d118      	bne.n	8003804 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037d2:	4b76      	ldr	r3, [pc, #472]	@ (80039ac <HAL_RCC_OscConfig+0x4b0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a75      	ldr	r2, [pc, #468]	@ (80039ac <HAL_RCC_OscConfig+0x4b0>)
 80037d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037de:	f7fe fa77 	bl	8001cd0 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e6:	f7fe fa73 	bl	8001cd0 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e118      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f8:	4b6c      	ldr	r3, [pc, #432]	@ (80039ac <HAL_RCC_OscConfig+0x4b0>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d106      	bne.n	800381a <HAL_RCC_OscConfig+0x31e>
 800380c:	4b66      	ldr	r3, [pc, #408]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003810:	4a65      	ldr	r2, [pc, #404]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6713      	str	r3, [r2, #112]	@ 0x70
 8003818:	e01c      	b.n	8003854 <HAL_RCC_OscConfig+0x358>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b05      	cmp	r3, #5
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0x340>
 8003822:	4b61      	ldr	r3, [pc, #388]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003826:	4a60      	ldr	r2, [pc, #384]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 8003828:	f043 0304 	orr.w	r3, r3, #4
 800382c:	6713      	str	r3, [r2, #112]	@ 0x70
 800382e:	4b5e      	ldr	r3, [pc, #376]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003832:	4a5d      	ldr	r2, [pc, #372]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6713      	str	r3, [r2, #112]	@ 0x70
 800383a:	e00b      	b.n	8003854 <HAL_RCC_OscConfig+0x358>
 800383c:	4b5a      	ldr	r3, [pc, #360]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003840:	4a59      	ldr	r2, [pc, #356]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 8003842:	f023 0301 	bic.w	r3, r3, #1
 8003846:	6713      	str	r3, [r2, #112]	@ 0x70
 8003848:	4b57      	ldr	r3, [pc, #348]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384c:	4a56      	ldr	r2, [pc, #344]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 800384e:	f023 0304 	bic.w	r3, r3, #4
 8003852:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d015      	beq.n	8003888 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7fe fa38 	bl	8001cd0 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003862:	e00a      	b.n	800387a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003864:	f7fe fa34 	bl	8001cd0 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e0d7      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387a:	4b4b      	ldr	r3, [pc, #300]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0ee      	beq.n	8003864 <HAL_RCC_OscConfig+0x368>
 8003886:	e014      	b.n	80038b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003888:	f7fe fa22 	bl	8001cd0 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003890:	f7fe fa1e 	bl	8001cd0 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0c1      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a6:	4b40      	ldr	r3, [pc, #256]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1ee      	bne.n	8003890 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d105      	bne.n	80038c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b8:	4b3b      	ldr	r3, [pc, #236]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	4a3a      	ldr	r2, [pc, #232]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 80038be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80ad 	beq.w	8003a28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ce:	4b36      	ldr	r3, [pc, #216]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d060      	beq.n	800399c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d145      	bne.n	800396e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e2:	4b33      	ldr	r3, [pc, #204]	@ (80039b0 <HAL_RCC_OscConfig+0x4b4>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e8:	f7fe f9f2 	bl	8001cd0 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f0:	f7fe f9ee 	bl	8001cd0 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e093      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	4b29      	ldr	r3, [pc, #164]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	019b      	lsls	r3, r3, #6
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	3b01      	subs	r3, #1
 8003928:	041b      	lsls	r3, r3, #16
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003930:	061b      	lsls	r3, r3, #24
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003938:	071b      	lsls	r3, r3, #28
 800393a:	491b      	ldr	r1, [pc, #108]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003940:	4b1b      	ldr	r3, [pc, #108]	@ (80039b0 <HAL_RCC_OscConfig+0x4b4>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7fe f9c3 	bl	8001cd0 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394e:	f7fe f9bf 	bl	8001cd0 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e064      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003960:	4b11      	ldr	r3, [pc, #68]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCC_OscConfig+0x452>
 800396c:	e05c      	b.n	8003a28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396e:	4b10      	ldr	r3, [pc, #64]	@ (80039b0 <HAL_RCC_OscConfig+0x4b4>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fe f9ac 	bl	8001cd0 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397c:	f7fe f9a8 	bl	8001cd0 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e04d      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398e:	4b06      	ldr	r3, [pc, #24]	@ (80039a8 <HAL_RCC_OscConfig+0x4ac>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x480>
 800399a:	e045      	b.n	8003a28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d107      	bne.n	80039b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e040      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40007000 	.word	0x40007000
 80039b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a34 <HAL_RCC_OscConfig+0x538>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d030      	beq.n	8003a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d129      	bne.n	8003a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d122      	bne.n	8003a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039e4:	4013      	ands	r3, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d119      	bne.n	8003a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	3b01      	subs	r3, #1
 80039fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d10f      	bne.n	8003a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e000      	b.n	8003a2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800

08003a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e041      	b.n	8003ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fd ff4c 	bl	80018fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4619      	mov	r1, r3
 8003a76:	4610      	mov	r0, r2
 8003a78:	f000 fc62 	bl	8004340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d001      	beq.n	8003af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e04e      	b.n	8003b8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a23      	ldr	r2, [pc, #140]	@ (8003b9c <HAL_TIM_Base_Start_IT+0xc4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d022      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x80>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b1a:	d01d      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x80>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d018      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x80>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d013      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x80>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00e      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x80>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bac <HAL_TIM_Base_Start_IT+0xd4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d009      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x80>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a19      	ldr	r2, [pc, #100]	@ (8003bb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x80>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a18      	ldr	r2, [pc, #96]	@ (8003bb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d111      	bne.n	8003b7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b06      	cmp	r3, #6
 8003b68:	d010      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0201 	orr.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7a:	e007      	b.n	8003b8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40010000 	.word	0x40010000
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	40000800 	.word	0x40000800
 8003ba8:	40000c00 	.word	0x40000c00
 8003bac:	40010400 	.word	0x40010400
 8003bb0:	40014000 	.word	0x40014000
 8003bb4:	40001800 	.word	0x40001800

08003bb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e041      	b.n	8003c4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f839 	bl	8003c56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	f000 fba2 	bl	8004340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
	...

08003c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <HAL_TIM_PWM_Start+0x24>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e022      	b.n	8003cd6 <HAL_TIM_PWM_Start+0x6a>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d109      	bne.n	8003caa <HAL_TIM_PWM_Start+0x3e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	bf14      	ite	ne
 8003ca2:	2301      	movne	r3, #1
 8003ca4:	2300      	moveq	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	e015      	b.n	8003cd6 <HAL_TIM_PWM_Start+0x6a>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d109      	bne.n	8003cc4 <HAL_TIM_PWM_Start+0x58>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	bf14      	ite	ne
 8003cbc:	2301      	movne	r3, #1
 8003cbe:	2300      	moveq	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e008      	b.n	8003cd6 <HAL_TIM_PWM_Start+0x6a>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	bf14      	ite	ne
 8003cd0:	2301      	movne	r3, #1
 8003cd2:	2300      	moveq	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e07c      	b.n	8003dd8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d104      	bne.n	8003cee <HAL_TIM_PWM_Start+0x82>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cec:	e013      	b.n	8003d16 <HAL_TIM_PWM_Start+0xaa>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d104      	bne.n	8003cfe <HAL_TIM_PWM_Start+0x92>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cfc:	e00b      	b.n	8003d16 <HAL_TIM_PWM_Start+0xaa>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_PWM_Start+0xa2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d0c:	e003      	b.n	8003d16 <HAL_TIM_PWM_Start+0xaa>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2202      	movs	r2, #2
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	6839      	ldr	r1, [r7, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fe04 	bl	800492c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a2d      	ldr	r2, [pc, #180]	@ (8003de0 <HAL_TIM_PWM_Start+0x174>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d004      	beq.n	8003d38 <HAL_TIM_PWM_Start+0xcc>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a2c      	ldr	r2, [pc, #176]	@ (8003de4 <HAL_TIM_PWM_Start+0x178>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d101      	bne.n	8003d3c <HAL_TIM_PWM_Start+0xd0>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <HAL_TIM_PWM_Start+0xd2>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a22      	ldr	r2, [pc, #136]	@ (8003de0 <HAL_TIM_PWM_Start+0x174>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d022      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x136>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d64:	d01d      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x136>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003de8 <HAL_TIM_PWM_Start+0x17c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d018      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x136>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1d      	ldr	r2, [pc, #116]	@ (8003dec <HAL_TIM_PWM_Start+0x180>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x136>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003df0 <HAL_TIM_PWM_Start+0x184>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00e      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x136>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a16      	ldr	r2, [pc, #88]	@ (8003de4 <HAL_TIM_PWM_Start+0x178>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d009      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x136>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a18      	ldr	r2, [pc, #96]	@ (8003df4 <HAL_TIM_PWM_Start+0x188>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d004      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x136>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a16      	ldr	r2, [pc, #88]	@ (8003df8 <HAL_TIM_PWM_Start+0x18c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d111      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b06      	cmp	r3, #6
 8003db2:	d010      	beq.n	8003dd6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc4:	e007      	b.n	8003dd6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0201 	orr.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40010000 	.word	0x40010000
 8003de4:	40010400 	.word	0x40010400
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40000800 	.word	0x40000800
 8003df0:	40000c00 	.word	0x40000c00
 8003df4:	40014000 	.word	0x40014000
 8003df8:	40001800 	.word	0x40001800

08003dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d020      	beq.n	8003e60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01b      	beq.n	8003e60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0202 	mvn.w	r2, #2
 8003e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fa5b 	bl	8004302 <HAL_TIM_IC_CaptureCallback>
 8003e4c:	e005      	b.n	8003e5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fa4d 	bl	80042ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fa5e 	bl	8004316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d020      	beq.n	8003eac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01b      	beq.n	8003eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0204 	mvn.w	r2, #4
 8003e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fa35 	bl	8004302 <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fa27 	bl	80042ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fa38 	bl	8004316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d020      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01b      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0208 	mvn.w	r2, #8
 8003ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2204      	movs	r2, #4
 8003ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fa0f 	bl	8004302 <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e005      	b.n	8003ef2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fa01 	bl	80042ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fa12 	bl	8004316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d020      	beq.n	8003f44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01b      	beq.n	8003f44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0210 	mvn.w	r2, #16
 8003f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f9e9 	bl	8004302 <HAL_TIM_IC_CaptureCallback>
 8003f30:	e005      	b.n	8003f3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f9db 	bl	80042ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f9ec 	bl	8004316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00c      	beq.n	8003f68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0201 	mvn.w	r2, #1
 8003f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fd f978 	bl	8001258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00c      	beq.n	8003f8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fd7c 	bl	8004a84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00c      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f9bd 	bl	800432a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00c      	beq.n	8003fd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0220 	mvn.w	r2, #32
 8003fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fd4e 	bl	8004a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e0ae      	b.n	8004158 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	f200 809f 	bhi.w	8004148 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800400a:	a201      	add	r2, pc, #4	@ (adr r2, 8004010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004045 	.word	0x08004045
 8004014:	08004149 	.word	0x08004149
 8004018:	08004149 	.word	0x08004149
 800401c:	08004149 	.word	0x08004149
 8004020:	08004085 	.word	0x08004085
 8004024:	08004149 	.word	0x08004149
 8004028:	08004149 	.word	0x08004149
 800402c:	08004149 	.word	0x08004149
 8004030:	080040c7 	.word	0x080040c7
 8004034:	08004149 	.word	0x08004149
 8004038:	08004149 	.word	0x08004149
 800403c:	08004149 	.word	0x08004149
 8004040:	08004107 	.word	0x08004107
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fa24 	bl	8004498 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0208 	orr.w	r2, r2, #8
 800405e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0204 	bic.w	r2, r2, #4
 800406e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6999      	ldr	r1, [r3, #24]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	619a      	str	r2, [r3, #24]
      break;
 8004082:	e064      	b.n	800414e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fa74 	bl	8004578 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800409e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6999      	ldr	r1, [r3, #24]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	021a      	lsls	r2, r3, #8
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	619a      	str	r2, [r3, #24]
      break;
 80040c4:	e043      	b.n	800414e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fac9 	bl	8004664 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69da      	ldr	r2, [r3, #28]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0208 	orr.w	r2, r2, #8
 80040e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0204 	bic.w	r2, r2, #4
 80040f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69d9      	ldr	r1, [r3, #28]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	61da      	str	r2, [r3, #28]
      break;
 8004104:	e023      	b.n	800414e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fb1d 	bl	800474c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69da      	ldr	r2, [r3, #28]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69da      	ldr	r2, [r3, #28]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69d9      	ldr	r1, [r3, #28]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	021a      	lsls	r2, r3, #8
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	61da      	str	r2, [r3, #28]
      break;
 8004146:	e002      	b.n	800414e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	75fb      	strb	r3, [r7, #23]
      break;
 800414c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004156:	7dfb      	ldrb	r3, [r7, #23]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_TIM_ConfigClockSource+0x1c>
 8004178:	2302      	movs	r3, #2
 800417a:	e0b4      	b.n	80042e6 <HAL_TIM_ConfigClockSource+0x186>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800419a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041b4:	d03e      	beq.n	8004234 <HAL_TIM_ConfigClockSource+0xd4>
 80041b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ba:	f200 8087 	bhi.w	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041c2:	f000 8086 	beq.w	80042d2 <HAL_TIM_ConfigClockSource+0x172>
 80041c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ca:	d87f      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041cc:	2b70      	cmp	r3, #112	@ 0x70
 80041ce:	d01a      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0xa6>
 80041d0:	2b70      	cmp	r3, #112	@ 0x70
 80041d2:	d87b      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041d4:	2b60      	cmp	r3, #96	@ 0x60
 80041d6:	d050      	beq.n	800427a <HAL_TIM_ConfigClockSource+0x11a>
 80041d8:	2b60      	cmp	r3, #96	@ 0x60
 80041da:	d877      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041dc:	2b50      	cmp	r3, #80	@ 0x50
 80041de:	d03c      	beq.n	800425a <HAL_TIM_ConfigClockSource+0xfa>
 80041e0:	2b50      	cmp	r3, #80	@ 0x50
 80041e2:	d873      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041e4:	2b40      	cmp	r3, #64	@ 0x40
 80041e6:	d058      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x13a>
 80041e8:	2b40      	cmp	r3, #64	@ 0x40
 80041ea:	d86f      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041ec:	2b30      	cmp	r3, #48	@ 0x30
 80041ee:	d064      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x15a>
 80041f0:	2b30      	cmp	r3, #48	@ 0x30
 80041f2:	d86b      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d060      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x15a>
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d867      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d05c      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x15a>
 8004200:	2b10      	cmp	r3, #16
 8004202:	d05a      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x15a>
 8004204:	e062      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004216:	f000 fb69 	bl	80048ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004228:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	609a      	str	r2, [r3, #8]
      break;
 8004232:	e04f      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004244:	f000 fb52 	bl	80048ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004256:	609a      	str	r2, [r3, #8]
      break;
 8004258:	e03c      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004266:	461a      	mov	r2, r3
 8004268:	f000 fac6 	bl	80047f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2150      	movs	r1, #80	@ 0x50
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fb1f 	bl	80048b6 <TIM_ITRx_SetConfig>
      break;
 8004278:	e02c      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004286:	461a      	mov	r2, r3
 8004288:	f000 fae5 	bl	8004856 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2160      	movs	r1, #96	@ 0x60
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fb0f 	bl	80048b6 <TIM_ITRx_SetConfig>
      break;
 8004298:	e01c      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042a6:	461a      	mov	r2, r3
 80042a8:	f000 faa6 	bl	80047f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2140      	movs	r1, #64	@ 0x40
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 faff 	bl	80048b6 <TIM_ITRx_SetConfig>
      break;
 80042b8:	e00c      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f000 faf6 	bl	80048b6 <TIM_ITRx_SetConfig>
      break;
 80042ca:	e003      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
      break;
 80042d0:	e000      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
	...

08004340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a46      	ldr	r2, [pc, #280]	@ (800446c <TIM_Base_SetConfig+0x12c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d013      	beq.n	8004380 <TIM_Base_SetConfig+0x40>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435e:	d00f      	beq.n	8004380 <TIM_Base_SetConfig+0x40>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a43      	ldr	r2, [pc, #268]	@ (8004470 <TIM_Base_SetConfig+0x130>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00b      	beq.n	8004380 <TIM_Base_SetConfig+0x40>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a42      	ldr	r2, [pc, #264]	@ (8004474 <TIM_Base_SetConfig+0x134>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d007      	beq.n	8004380 <TIM_Base_SetConfig+0x40>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a41      	ldr	r2, [pc, #260]	@ (8004478 <TIM_Base_SetConfig+0x138>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_Base_SetConfig+0x40>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a40      	ldr	r2, [pc, #256]	@ (800447c <TIM_Base_SetConfig+0x13c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d108      	bne.n	8004392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a35      	ldr	r2, [pc, #212]	@ (800446c <TIM_Base_SetConfig+0x12c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d02b      	beq.n	80043f2 <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a0:	d027      	beq.n	80043f2 <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a32      	ldr	r2, [pc, #200]	@ (8004470 <TIM_Base_SetConfig+0x130>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d023      	beq.n	80043f2 <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a31      	ldr	r2, [pc, #196]	@ (8004474 <TIM_Base_SetConfig+0x134>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01f      	beq.n	80043f2 <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a30      	ldr	r2, [pc, #192]	@ (8004478 <TIM_Base_SetConfig+0x138>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01b      	beq.n	80043f2 <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a2f      	ldr	r2, [pc, #188]	@ (800447c <TIM_Base_SetConfig+0x13c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d017      	beq.n	80043f2 <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a2e      	ldr	r2, [pc, #184]	@ (8004480 <TIM_Base_SetConfig+0x140>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <TIM_Base_SetConfig+0xb2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004484 <TIM_Base_SetConfig+0x144>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00f      	beq.n	80043f2 <TIM_Base_SetConfig+0xb2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004488 <TIM_Base_SetConfig+0x148>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00b      	beq.n	80043f2 <TIM_Base_SetConfig+0xb2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a2b      	ldr	r2, [pc, #172]	@ (800448c <TIM_Base_SetConfig+0x14c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <TIM_Base_SetConfig+0xb2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004490 <TIM_Base_SetConfig+0x150>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d003      	beq.n	80043f2 <TIM_Base_SetConfig+0xb2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a29      	ldr	r2, [pc, #164]	@ (8004494 <TIM_Base_SetConfig+0x154>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d108      	bne.n	8004404 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a10      	ldr	r2, [pc, #64]	@ (800446c <TIM_Base_SetConfig+0x12c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_Base_SetConfig+0xf8>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a12      	ldr	r2, [pc, #72]	@ (800447c <TIM_Base_SetConfig+0x13c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d103      	bne.n	8004440 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b01      	cmp	r3, #1
 8004450:	d105      	bne.n	800445e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f023 0201 	bic.w	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	611a      	str	r2, [r3, #16]
  }
}
 800445e:	bf00      	nop
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40010000 	.word	0x40010000
 8004470:	40000400 	.word	0x40000400
 8004474:	40000800 	.word	0x40000800
 8004478:	40000c00 	.word	0x40000c00
 800447c:	40010400 	.word	0x40010400
 8004480:	40014000 	.word	0x40014000
 8004484:	40014400 	.word	0x40014400
 8004488:	40014800 	.word	0x40014800
 800448c:	40001800 	.word	0x40001800
 8004490:	40001c00 	.word	0x40001c00
 8004494:	40002000 	.word	0x40002000

08004498 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	f023 0201 	bic.w	r2, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0303 	bic.w	r3, r3, #3
 80044ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f023 0302 	bic.w	r3, r3, #2
 80044e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a20      	ldr	r2, [pc, #128]	@ (8004570 <TIM_OC1_SetConfig+0xd8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d003      	beq.n	80044fc <TIM_OC1_SetConfig+0x64>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004574 <TIM_OC1_SetConfig+0xdc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d10c      	bne.n	8004516 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f023 0308 	bic.w	r3, r3, #8
 8004502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f023 0304 	bic.w	r3, r3, #4
 8004514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a15      	ldr	r2, [pc, #84]	@ (8004570 <TIM_OC1_SetConfig+0xd8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d003      	beq.n	8004526 <TIM_OC1_SetConfig+0x8e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a14      	ldr	r2, [pc, #80]	@ (8004574 <TIM_OC1_SetConfig+0xdc>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d111      	bne.n	800454a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800452c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	621a      	str	r2, [r3, #32]
}
 8004564:	bf00      	nop
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	40010000 	.word	0x40010000
 8004574:	40010400 	.word	0x40010400

08004578 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f023 0210 	bic.w	r2, r3, #16
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0320 	bic.w	r3, r3, #32
 80045c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a22      	ldr	r2, [pc, #136]	@ (800465c <TIM_OC2_SetConfig+0xe4>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_OC2_SetConfig+0x68>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a21      	ldr	r2, [pc, #132]	@ (8004660 <TIM_OC2_SetConfig+0xe8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d10d      	bne.n	80045fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a17      	ldr	r2, [pc, #92]	@ (800465c <TIM_OC2_SetConfig+0xe4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <TIM_OC2_SetConfig+0x94>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a16      	ldr	r2, [pc, #88]	@ (8004660 <TIM_OC2_SetConfig+0xe8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d113      	bne.n	8004634 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800461a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	621a      	str	r2, [r3, #32]
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40010000 	.word	0x40010000
 8004660:	40010400 	.word	0x40010400

08004664 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a21      	ldr	r2, [pc, #132]	@ (8004744 <TIM_OC3_SetConfig+0xe0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d003      	beq.n	80046ca <TIM_OC3_SetConfig+0x66>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a20      	ldr	r2, [pc, #128]	@ (8004748 <TIM_OC3_SetConfig+0xe4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d10d      	bne.n	80046e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a16      	ldr	r2, [pc, #88]	@ (8004744 <TIM_OC3_SetConfig+0xe0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d003      	beq.n	80046f6 <TIM_OC3_SetConfig+0x92>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a15      	ldr	r2, [pc, #84]	@ (8004748 <TIM_OC3_SetConfig+0xe4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d113      	bne.n	800471e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	621a      	str	r2, [r3, #32]
}
 8004738:	bf00      	nop
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	40010000 	.word	0x40010000
 8004748:	40010400 	.word	0x40010400

0800474c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800477a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004796:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	031b      	lsls	r3, r3, #12
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a12      	ldr	r2, [pc, #72]	@ (80047f0 <TIM_OC4_SetConfig+0xa4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d003      	beq.n	80047b4 <TIM_OC4_SetConfig+0x68>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a11      	ldr	r2, [pc, #68]	@ (80047f4 <TIM_OC4_SetConfig+0xa8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d109      	bne.n	80047c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	019b      	lsls	r3, r3, #6
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	621a      	str	r2, [r3, #32]
}
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40010400 	.word	0x40010400

080047f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f023 0201 	bic.w	r2, r3, #1
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f023 030a 	bic.w	r3, r3, #10
 8004834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	621a      	str	r2, [r3, #32]
}
 800484a:	bf00      	nop
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004856:	b480      	push	{r7}
 8004858:	b087      	sub	sp, #28
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f023 0210 	bic.w	r2, r3, #16
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004880:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	031b      	lsls	r3, r3, #12
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004892:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	4313      	orrs	r3, r2
 800489c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	621a      	str	r2, [r3, #32]
}
 80048aa:	bf00      	nop
 80048ac:	371c      	adds	r7, #28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f043 0307 	orr.w	r3, r3, #7
 80048d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	609a      	str	r2, [r3, #8]
}
 80048e0:	bf00      	nop
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	021a      	lsls	r2, r3, #8
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	431a      	orrs	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4313      	orrs	r3, r2
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	609a      	str	r2, [r3, #8]
}
 8004920:	bf00      	nop
 8004922:	371c      	adds	r7, #28
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2201      	movs	r2, #1
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a1a      	ldr	r2, [r3, #32]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	43db      	mvns	r3, r3
 800494e:	401a      	ands	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a1a      	ldr	r2, [r3, #32]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	fa01 f303 	lsl.w	r3, r1, r3
 8004964:	431a      	orrs	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	621a      	str	r2, [r3, #32]
}
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800498c:	2302      	movs	r3, #2
 800498e:	e05a      	b.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a21      	ldr	r2, [pc, #132]	@ (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d022      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049dc:	d01d      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d018      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1b      	ldr	r2, [pc, #108]	@ (8004a5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d013      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004a60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d00e      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a18      	ldr	r2, [pc, #96]	@ (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d009      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a17      	ldr	r2, [pc, #92]	@ (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d004      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a15      	ldr	r2, [pc, #84]	@ (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d10c      	bne.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40010000 	.word	0x40010000
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	40000800 	.word	0x40000800
 8004a60:	40000c00 	.word	0x40000c00
 8004a64:	40010400 	.word	0x40010400
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40001800 	.word	0x40001800

08004a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e042      	b.n	8004b30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fc ff74 	bl	80019ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2224      	movs	r2, #36	@ 0x24
 8004ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f973 	bl	8004dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08a      	sub	sp, #40	@ 0x28
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	4613      	mov	r3, r2
 8004b46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d175      	bne.n	8004c44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_UART_Transmit+0x2c>
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e06e      	b.n	8004c46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2221      	movs	r2, #33	@ 0x21
 8004b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b76:	f7fd f8ab 	bl	8001cd0 <HAL_GetTick>
 8004b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	88fa      	ldrh	r2, [r7, #6]
 8004b80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	88fa      	ldrh	r2, [r7, #6]
 8004b86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b90:	d108      	bne.n	8004ba4 <HAL_UART_Transmit+0x6c>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d104      	bne.n	8004ba4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	e003      	b.n	8004bac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bac:	e02e      	b.n	8004c0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2180      	movs	r1, #128	@ 0x80
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f848 	bl	8004c4e <UART_WaitOnFlagUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e03a      	b.n	8004c46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10b      	bne.n	8004bee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	3302      	adds	r3, #2
 8004bea:	61bb      	str	r3, [r7, #24]
 8004bec:	e007      	b.n	8004bfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	781a      	ldrb	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1cb      	bne.n	8004bae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2140      	movs	r1, #64	@ 0x40
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f814 	bl	8004c4e <UART_WaitOnFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e006      	b.n	8004c46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	e000      	b.n	8004c46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c44:	2302      	movs	r3, #2
  }
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b086      	sub	sp, #24
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c5e:	e03b      	b.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c66:	d037      	beq.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c68:	f7fd f832 	bl	8001cd0 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	6a3a      	ldr	r2, [r7, #32]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d302      	bcc.n	8004c7e <UART_WaitOnFlagUntilTimeout+0x30>
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e03a      	b.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d023      	beq.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b80      	cmp	r3, #128	@ 0x80
 8004c94:	d020      	beq.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b40      	cmp	r3, #64	@ 0x40
 8004c9a:	d01d      	beq.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d116      	bne.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f81d 	bl	8004d00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2208      	movs	r2, #8
 8004cca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e00f      	b.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	bf0c      	ite	eq
 8004ce8:	2301      	moveq	r3, #1
 8004cea:	2300      	movne	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d0b4      	beq.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b095      	sub	sp, #84	@ 0x54
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	330c      	adds	r3, #12
 8004d26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d28:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e5      	bne.n	8004d08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3314      	adds	r3, #20
 8004d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3314      	adds	r3, #20
 8004d5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e5      	bne.n	8004d3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d119      	bne.n	8004dac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f023 0310 	bic.w	r3, r3, #16
 8004d8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	330c      	adds	r3, #12
 8004d96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d98:	61ba      	str	r2, [r7, #24]
 8004d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9c:	6979      	ldr	r1, [r7, #20]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	e841 2300 	strex	r3, r2, [r1]
 8004da4:	613b      	str	r3, [r7, #16]
   return(result);
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e5      	bne.n	8004d78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004dba:	bf00      	nop
 8004dbc:	3754      	adds	r7, #84	@ 0x54
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dcc:	b0c0      	sub	sp, #256	@ 0x100
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de4:	68d9      	ldr	r1, [r3, #12]
 8004de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	ea40 0301 	orr.w	r3, r0, r1
 8004df0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e20:	f021 010c 	bic.w	r1, r1, #12
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e42:	6999      	ldr	r1, [r3, #24]
 8004e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	ea40 0301 	orr.w	r3, r0, r1
 8004e4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4b8f      	ldr	r3, [pc, #572]	@ (8005094 <UART_SetConfig+0x2cc>)
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d005      	beq.n	8004e68 <UART_SetConfig+0xa0>
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b8d      	ldr	r3, [pc, #564]	@ (8005098 <UART_SetConfig+0x2d0>)
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d104      	bne.n	8004e72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e68:	f7fe f8d2 	bl	8003010 <HAL_RCC_GetPCLK2Freq>
 8004e6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e70:	e003      	b.n	8004e7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e72:	f7fe f8b9 	bl	8002fe8 <HAL_RCC_GetPCLK1Freq>
 8004e76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e84:	f040 810c 	bne.w	80050a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e9a:	4622      	mov	r2, r4
 8004e9c:	462b      	mov	r3, r5
 8004e9e:	1891      	adds	r1, r2, r2
 8004ea0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ea2:	415b      	adcs	r3, r3
 8004ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ea6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004eaa:	4621      	mov	r1, r4
 8004eac:	eb12 0801 	adds.w	r8, r2, r1
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	eb43 0901 	adc.w	r9, r3, r1
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eca:	4690      	mov	r8, r2
 8004ecc:	4699      	mov	r9, r3
 8004ece:	4623      	mov	r3, r4
 8004ed0:	eb18 0303 	adds.w	r3, r8, r3
 8004ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ed8:	462b      	mov	r3, r5
 8004eda:	eb49 0303 	adc.w	r3, r9, r3
 8004ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004eee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ef2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	18db      	adds	r3, r3, r3
 8004efa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004efc:	4613      	mov	r3, r2
 8004efe:	eb42 0303 	adc.w	r3, r2, r3
 8004f02:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f0c:	f7fb f9d8 	bl	80002c0 <__aeabi_uldivmod>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4b61      	ldr	r3, [pc, #388]	@ (800509c <UART_SetConfig+0x2d4>)
 8004f16:	fba3 2302 	umull	r2, r3, r3, r2
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	011c      	lsls	r4, r3, #4
 8004f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f30:	4642      	mov	r2, r8
 8004f32:	464b      	mov	r3, r9
 8004f34:	1891      	adds	r1, r2, r2
 8004f36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f38:	415b      	adcs	r3, r3
 8004f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f40:	4641      	mov	r1, r8
 8004f42:	eb12 0a01 	adds.w	sl, r2, r1
 8004f46:	4649      	mov	r1, r9
 8004f48:	eb43 0b01 	adc.w	fp, r3, r1
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f60:	4692      	mov	sl, r2
 8004f62:	469b      	mov	fp, r3
 8004f64:	4643      	mov	r3, r8
 8004f66:	eb1a 0303 	adds.w	r3, sl, r3
 8004f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f6e:	464b      	mov	r3, r9
 8004f70:	eb4b 0303 	adc.w	r3, fp, r3
 8004f74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	18db      	adds	r3, r3, r3
 8004f90:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f92:	4613      	mov	r3, r2
 8004f94:	eb42 0303 	adc.w	r3, r2, r3
 8004f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004fa2:	f7fb f98d 	bl	80002c0 <__aeabi_uldivmod>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	4b3b      	ldr	r3, [pc, #236]	@ (800509c <UART_SetConfig+0x2d4>)
 8004fae:	fba3 2301 	umull	r2, r3, r3, r1
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2264      	movs	r2, #100	@ 0x64
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	1acb      	subs	r3, r1, r3
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fc2:	4b36      	ldr	r3, [pc, #216]	@ (800509c <UART_SetConfig+0x2d4>)
 8004fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fd0:	441c      	add	r4, r3
 8004fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fe0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	1891      	adds	r1, r2, r2
 8004fea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fec:	415b      	adcs	r3, r3
 8004fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ff0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ff4:	4641      	mov	r1, r8
 8004ff6:	1851      	adds	r1, r2, r1
 8004ff8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	414b      	adcs	r3, r1
 8004ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800500c:	4659      	mov	r1, fp
 800500e:	00cb      	lsls	r3, r1, #3
 8005010:	4651      	mov	r1, sl
 8005012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005016:	4651      	mov	r1, sl
 8005018:	00ca      	lsls	r2, r1, #3
 800501a:	4610      	mov	r0, r2
 800501c:	4619      	mov	r1, r3
 800501e:	4603      	mov	r3, r0
 8005020:	4642      	mov	r2, r8
 8005022:	189b      	adds	r3, r3, r2
 8005024:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005028:	464b      	mov	r3, r9
 800502a:	460a      	mov	r2, r1
 800502c:	eb42 0303 	adc.w	r3, r2, r3
 8005030:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005040:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005044:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005048:	460b      	mov	r3, r1
 800504a:	18db      	adds	r3, r3, r3
 800504c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800504e:	4613      	mov	r3, r2
 8005050:	eb42 0303 	adc.w	r3, r2, r3
 8005054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005056:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800505a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800505e:	f7fb f92f 	bl	80002c0 <__aeabi_uldivmod>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4b0d      	ldr	r3, [pc, #52]	@ (800509c <UART_SetConfig+0x2d4>)
 8005068:	fba3 1302 	umull	r1, r3, r3, r2
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	2164      	movs	r1, #100	@ 0x64
 8005070:	fb01 f303 	mul.w	r3, r1, r3
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	3332      	adds	r3, #50	@ 0x32
 800507a:	4a08      	ldr	r2, [pc, #32]	@ (800509c <UART_SetConfig+0x2d4>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	f003 0207 	and.w	r2, r3, #7
 8005086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4422      	add	r2, r4
 800508e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005090:	e106      	b.n	80052a0 <UART_SetConfig+0x4d8>
 8005092:	bf00      	nop
 8005094:	40011000 	.word	0x40011000
 8005098:	40011400 	.word	0x40011400
 800509c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80050b2:	4642      	mov	r2, r8
 80050b4:	464b      	mov	r3, r9
 80050b6:	1891      	adds	r1, r2, r2
 80050b8:	6239      	str	r1, [r7, #32]
 80050ba:	415b      	adcs	r3, r3
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80050be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050c2:	4641      	mov	r1, r8
 80050c4:	1854      	adds	r4, r2, r1
 80050c6:	4649      	mov	r1, r9
 80050c8:	eb43 0501 	adc.w	r5, r3, r1
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	00eb      	lsls	r3, r5, #3
 80050d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050da:	00e2      	lsls	r2, r4, #3
 80050dc:	4614      	mov	r4, r2
 80050de:	461d      	mov	r5, r3
 80050e0:	4643      	mov	r3, r8
 80050e2:	18e3      	adds	r3, r4, r3
 80050e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050e8:	464b      	mov	r3, r9
 80050ea:	eb45 0303 	adc.w	r3, r5, r3
 80050ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800510e:	4629      	mov	r1, r5
 8005110:	008b      	lsls	r3, r1, #2
 8005112:	4621      	mov	r1, r4
 8005114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005118:	4621      	mov	r1, r4
 800511a:	008a      	lsls	r2, r1, #2
 800511c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005120:	f7fb f8ce 	bl	80002c0 <__aeabi_uldivmod>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4b60      	ldr	r3, [pc, #384]	@ (80052ac <UART_SetConfig+0x4e4>)
 800512a:	fba3 2302 	umull	r2, r3, r3, r2
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	011c      	lsls	r4, r3, #4
 8005132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005136:	2200      	movs	r2, #0
 8005138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800513c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005140:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005144:	4642      	mov	r2, r8
 8005146:	464b      	mov	r3, r9
 8005148:	1891      	adds	r1, r2, r2
 800514a:	61b9      	str	r1, [r7, #24]
 800514c:	415b      	adcs	r3, r3
 800514e:	61fb      	str	r3, [r7, #28]
 8005150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005154:	4641      	mov	r1, r8
 8005156:	1851      	adds	r1, r2, r1
 8005158:	6139      	str	r1, [r7, #16]
 800515a:	4649      	mov	r1, r9
 800515c:	414b      	adcs	r3, r1
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800516c:	4659      	mov	r1, fp
 800516e:	00cb      	lsls	r3, r1, #3
 8005170:	4651      	mov	r1, sl
 8005172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005176:	4651      	mov	r1, sl
 8005178:	00ca      	lsls	r2, r1, #3
 800517a:	4610      	mov	r0, r2
 800517c:	4619      	mov	r1, r3
 800517e:	4603      	mov	r3, r0
 8005180:	4642      	mov	r2, r8
 8005182:	189b      	adds	r3, r3, r2
 8005184:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005188:	464b      	mov	r3, r9
 800518a:	460a      	mov	r2, r1
 800518c:	eb42 0303 	adc.w	r3, r2, r3
 8005190:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800519e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051ac:	4649      	mov	r1, r9
 80051ae:	008b      	lsls	r3, r1, #2
 80051b0:	4641      	mov	r1, r8
 80051b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051b6:	4641      	mov	r1, r8
 80051b8:	008a      	lsls	r2, r1, #2
 80051ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051be:	f7fb f87f 	bl	80002c0 <__aeabi_uldivmod>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4611      	mov	r1, r2
 80051c8:	4b38      	ldr	r3, [pc, #224]	@ (80052ac <UART_SetConfig+0x4e4>)
 80051ca:	fba3 2301 	umull	r2, r3, r3, r1
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	2264      	movs	r2, #100	@ 0x64
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	1acb      	subs	r3, r1, r3
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	3332      	adds	r3, #50	@ 0x32
 80051dc:	4a33      	ldr	r2, [pc, #204]	@ (80052ac <UART_SetConfig+0x4e4>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051e8:	441c      	add	r4, r3
 80051ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ee:	2200      	movs	r2, #0
 80051f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80051f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80051f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051f8:	4642      	mov	r2, r8
 80051fa:	464b      	mov	r3, r9
 80051fc:	1891      	adds	r1, r2, r2
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	415b      	adcs	r3, r3
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005208:	4641      	mov	r1, r8
 800520a:	1851      	adds	r1, r2, r1
 800520c:	6039      	str	r1, [r7, #0]
 800520e:	4649      	mov	r1, r9
 8005210:	414b      	adcs	r3, r1
 8005212:	607b      	str	r3, [r7, #4]
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005220:	4659      	mov	r1, fp
 8005222:	00cb      	lsls	r3, r1, #3
 8005224:	4651      	mov	r1, sl
 8005226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800522a:	4651      	mov	r1, sl
 800522c:	00ca      	lsls	r2, r1, #3
 800522e:	4610      	mov	r0, r2
 8005230:	4619      	mov	r1, r3
 8005232:	4603      	mov	r3, r0
 8005234:	4642      	mov	r2, r8
 8005236:	189b      	adds	r3, r3, r2
 8005238:	66bb      	str	r3, [r7, #104]	@ 0x68
 800523a:	464b      	mov	r3, r9
 800523c:	460a      	mov	r2, r1
 800523e:	eb42 0303 	adc.w	r3, r2, r3
 8005242:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	663b      	str	r3, [r7, #96]	@ 0x60
 800524e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800525c:	4649      	mov	r1, r9
 800525e:	008b      	lsls	r3, r1, #2
 8005260:	4641      	mov	r1, r8
 8005262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005266:	4641      	mov	r1, r8
 8005268:	008a      	lsls	r2, r1, #2
 800526a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800526e:	f7fb f827 	bl	80002c0 <__aeabi_uldivmod>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4b0d      	ldr	r3, [pc, #52]	@ (80052ac <UART_SetConfig+0x4e4>)
 8005278:	fba3 1302 	umull	r1, r3, r3, r2
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	2164      	movs	r1, #100	@ 0x64
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	3332      	adds	r3, #50	@ 0x32
 800528a:	4a08      	ldr	r2, [pc, #32]	@ (80052ac <UART_SetConfig+0x4e4>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	f003 020f 	and.w	r2, r3, #15
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4422      	add	r2, r4
 800529e:	609a      	str	r2, [r3, #8]
}
 80052a0:	bf00      	nop
 80052a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052a6:	46bd      	mov	sp, r7
 80052a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ac:	51eb851f 	.word	0x51eb851f

080052b0 <__NVIC_SetPriority>:
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	6039      	str	r1, [r7, #0]
 80052ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	db0a      	blt.n	80052da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	490c      	ldr	r1, [pc, #48]	@ (80052fc <__NVIC_SetPriority+0x4c>)
 80052ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ce:	0112      	lsls	r2, r2, #4
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	440b      	add	r3, r1
 80052d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80052d8:	e00a      	b.n	80052f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	4908      	ldr	r1, [pc, #32]	@ (8005300 <__NVIC_SetPriority+0x50>)
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	3b04      	subs	r3, #4
 80052e8:	0112      	lsls	r2, r2, #4
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	440b      	add	r3, r1
 80052ee:	761a      	strb	r2, [r3, #24]
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	e000e100 	.word	0xe000e100
 8005300:	e000ed00 	.word	0xe000ed00

08005304 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005308:	4b05      	ldr	r3, [pc, #20]	@ (8005320 <SysTick_Handler+0x1c>)
 800530a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800530c:	f001 fd18 	bl	8006d40 <xTaskGetSchedulerState>
 8005310:	4603      	mov	r3, r0
 8005312:	2b01      	cmp	r3, #1
 8005314:	d001      	beq.n	800531a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005316:	f002 fb6f 	bl	80079f8 <xPortSysTickHandler>
  }
}
 800531a:	bf00      	nop
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	e000e010 	.word	0xe000e010

08005324 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005328:	2100      	movs	r1, #0
 800532a:	f06f 0004 	mvn.w	r0, #4
 800532e:	f7ff ffbf 	bl	80052b0 <__NVIC_SetPriority>
#endif
}
 8005332:	bf00      	nop
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800533e:	f3ef 8305 	mrs	r3, IPSR
 8005342:	603b      	str	r3, [r7, #0]
  return(result);
 8005344:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800534a:	f06f 0305 	mvn.w	r3, #5
 800534e:	607b      	str	r3, [r7, #4]
 8005350:	e00c      	b.n	800536c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005352:	4b0a      	ldr	r3, [pc, #40]	@ (800537c <osKernelInitialize+0x44>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d105      	bne.n	8005366 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800535a:	4b08      	ldr	r3, [pc, #32]	@ (800537c <osKernelInitialize+0x44>)
 800535c:	2201      	movs	r2, #1
 800535e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005360:	2300      	movs	r3, #0
 8005362:	607b      	str	r3, [r7, #4]
 8005364:	e002      	b.n	800536c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005366:	f04f 33ff 	mov.w	r3, #4294967295
 800536a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800536c:	687b      	ldr	r3, [r7, #4]
}
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	20000628 	.word	0x20000628

08005380 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005386:	f3ef 8305 	mrs	r3, IPSR
 800538a:	603b      	str	r3, [r7, #0]
  return(result);
 800538c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005392:	f06f 0305 	mvn.w	r3, #5
 8005396:	607b      	str	r3, [r7, #4]
 8005398:	e010      	b.n	80053bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800539a:	4b0b      	ldr	r3, [pc, #44]	@ (80053c8 <osKernelStart+0x48>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d109      	bne.n	80053b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80053a2:	f7ff ffbf 	bl	8005324 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80053a6:	4b08      	ldr	r3, [pc, #32]	@ (80053c8 <osKernelStart+0x48>)
 80053a8:	2202      	movs	r2, #2
 80053aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80053ac:	f001 f87a 	bl	80064a4 <vTaskStartScheduler>
      stat = osOK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	607b      	str	r3, [r7, #4]
 80053b4:	e002      	b.n	80053bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80053b6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053bc:	687b      	ldr	r3, [r7, #4]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000628 	.word	0x20000628

080053cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08e      	sub	sp, #56	@ 0x38
 80053d0:	af04      	add	r7, sp, #16
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053dc:	f3ef 8305 	mrs	r3, IPSR
 80053e0:	617b      	str	r3, [r7, #20]
  return(result);
 80053e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d17e      	bne.n	80054e6 <osThreadNew+0x11a>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d07b      	beq.n	80054e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80053ee:	2380      	movs	r3, #128	@ 0x80
 80053f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80053f2:	2318      	movs	r3, #24
 80053f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80053fa:	f04f 33ff 	mov.w	r3, #4294967295
 80053fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d045      	beq.n	8005492 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <osThreadNew+0x48>
        name = attr->name;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <osThreadNew+0x6e>
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2b38      	cmp	r3, #56	@ 0x38
 800542c:	d805      	bhi.n	800543a <osThreadNew+0x6e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <osThreadNew+0x72>
        return (NULL);
 800543a:	2300      	movs	r3, #0
 800543c:	e054      	b.n	80054e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	089b      	lsrs	r3, r3, #2
 800544c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00e      	beq.n	8005474 <osThreadNew+0xa8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	2b5b      	cmp	r3, #91	@ 0x5b
 800545c:	d90a      	bls.n	8005474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005462:	2b00      	cmp	r3, #0
 8005464:	d006      	beq.n	8005474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <osThreadNew+0xa8>
        mem = 1;
 800546e:	2301      	movs	r3, #1
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	e010      	b.n	8005496 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10c      	bne.n	8005496 <osThreadNew+0xca>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d108      	bne.n	8005496 <osThreadNew+0xca>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d104      	bne.n	8005496 <osThreadNew+0xca>
          mem = 0;
 800548c:	2300      	movs	r3, #0
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	e001      	b.n	8005496 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005492:	2300      	movs	r3, #0
 8005494:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d110      	bne.n	80054be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054a4:	9202      	str	r2, [sp, #8]
 80054a6:	9301      	str	r3, [sp, #4]
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6a3a      	ldr	r2, [r7, #32]
 80054b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 fe1a 	bl	80060ec <xTaskCreateStatic>
 80054b8:	4603      	mov	r3, r0
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	e013      	b.n	80054e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d110      	bne.n	80054e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	f107 0310 	add.w	r3, r7, #16
 80054cc:	9301      	str	r3, [sp, #4]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 fe68 	bl	80061ac <xTaskCreate>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d001      	beq.n	80054e6 <osThreadNew+0x11a>
            hTask = NULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054e6:	693b      	ldr	r3, [r7, #16]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3728      	adds	r7, #40	@ 0x28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054f8:	f3ef 8305 	mrs	r3, IPSR
 80054fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80054fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <osDelay+0x1c>
    stat = osErrorISR;
 8005504:	f06f 0305 	mvn.w	r3, #5
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	e007      	b.n	800551c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 ff8e 	bl	8006438 <vTaskDelay>
    }
  }

  return (stat);
 800551c:	68fb      	ldr	r3, [r7, #12]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4a07      	ldr	r2, [pc, #28]	@ (8005554 <vApplicationGetIdleTaskMemory+0x2c>)
 8005538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4a06      	ldr	r2, [pc, #24]	@ (8005558 <vApplicationGetIdleTaskMemory+0x30>)
 800553e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2280      	movs	r2, #128	@ 0x80
 8005544:	601a      	str	r2, [r3, #0]
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	2000062c 	.word	0x2000062c
 8005558:	20000688 	.word	0x20000688

0800555c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4a07      	ldr	r2, [pc, #28]	@ (8005588 <vApplicationGetTimerTaskMemory+0x2c>)
 800556c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	4a06      	ldr	r2, [pc, #24]	@ (800558c <vApplicationGetTimerTaskMemory+0x30>)
 8005572:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800557a:	601a      	str	r2, [r3, #0]
}
 800557c:	bf00      	nop
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	20000888 	.word	0x20000888
 800558c:	200008e4 	.word	0x200008e4

08005590 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f103 0208 	add.w	r2, r3, #8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f04f 32ff 	mov.w	r2, #4294967295
 80055a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f103 0208 	add.w	r2, r3, #8
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f103 0208 	add.w	r2, r3, #8
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
}
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005632:	b480      	push	{r7}
 8005634:	b085      	sub	sp, #20
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d103      	bne.n	8005652 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	e00c      	b.n	800566c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3308      	adds	r3, #8
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	e002      	b.n	8005660 <vListInsert+0x2e>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	429a      	cmp	r2, r3
 800566a:	d2f6      	bcs.n	800565a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	601a      	str	r2, [r3, #0]
}
 8005698:	bf00      	nop
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6892      	ldr	r2, [r2, #8]
 80056ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6852      	ldr	r2, [r2, #4]
 80056c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d103      	bne.n	80056d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	1e5a      	subs	r2, r3, #1
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10b      	bne.n	8005724 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800571e:	bf00      	nop
 8005720:	bf00      	nop
 8005722:	e7fd      	b.n	8005720 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005724:	f002 f8d8 	bl	80078d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005730:	68f9      	ldr	r1, [r7, #12]
 8005732:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005734:	fb01 f303 	mul.w	r3, r1, r3
 8005738:	441a      	add	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005754:	3b01      	subs	r3, #1
 8005756:	68f9      	ldr	r1, [r7, #12]
 8005758:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800575a:	fb01 f303 	mul.w	r3, r1, r3
 800575e:	441a      	add	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	22ff      	movs	r2, #255	@ 0xff
 8005768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	22ff      	movs	r2, #255	@ 0xff
 8005770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d114      	bne.n	80057a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d01a      	beq.n	80057b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3310      	adds	r3, #16
 8005786:	4618      	mov	r0, r3
 8005788:	f001 f91a 	bl	80069c0 <xTaskRemoveFromEventList>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d012      	beq.n	80057b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005792:	4b0d      	ldr	r3, [pc, #52]	@ (80057c8 <xQueueGenericReset+0xd0>)
 8005794:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	e009      	b.n	80057b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3310      	adds	r3, #16
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff fef1 	bl	8005590 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3324      	adds	r3, #36	@ 0x24
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff feec 	bl	8005590 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057b8:	f002 f8c0 	bl	800793c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057bc:	2301      	movs	r3, #1
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08e      	sub	sp, #56	@ 0x38
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10b      	bne.n	80057f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	e7fd      	b.n	80057f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10b      	bne.n	8005816 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	e7fd      	b.n	8005812 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <xQueueGenericCreateStatic+0x56>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <xQueueGenericCreateStatic+0x5a>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <xQueueGenericCreateStatic+0x5c>
 8005826:	2300      	movs	r3, #0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10b      	bne.n	8005844 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800582c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	623b      	str	r3, [r7, #32]
}
 800583e:	bf00      	nop
 8005840:	bf00      	nop
 8005842:	e7fd      	b.n	8005840 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d102      	bne.n	8005850 <xQueueGenericCreateStatic+0x84>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <xQueueGenericCreateStatic+0x88>
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <xQueueGenericCreateStatic+0x8a>
 8005854:	2300      	movs	r3, #0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10b      	bne.n	8005872 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	61fb      	str	r3, [r7, #28]
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	e7fd      	b.n	800586e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005872:	2350      	movs	r3, #80	@ 0x50
 8005874:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2b50      	cmp	r3, #80	@ 0x50
 800587a:	d00b      	beq.n	8005894 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	61bb      	str	r3, [r7, #24]
}
 800588e:	bf00      	nop
 8005890:	bf00      	nop
 8005892:	e7fd      	b.n	8005890 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005894:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800589a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00d      	beq.n	80058bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80058ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	4613      	mov	r3, r2
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f805 	bl	80058c6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80058be:	4618      	mov	r0, r3
 80058c0:	3730      	adds	r7, #48	@ 0x30
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	607a      	str	r2, [r7, #4]
 80058d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d103      	bne.n	80058e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	e002      	b.n	80058e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058f4:	2101      	movs	r1, #1
 80058f6:	69b8      	ldr	r0, [r7, #24]
 80058f8:	f7ff fefe 	bl	80056f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	78fa      	ldrb	r2, [r7, #3]
 8005900:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08e      	sub	sp, #56	@ 0x38
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800591a:	2300      	movs	r3, #0
 800591c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10b      	bne.n	8005940 <xQueueGenericSend+0x34>
	__asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800593a:	bf00      	nop
 800593c:	bf00      	nop
 800593e:	e7fd      	b.n	800593c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d103      	bne.n	800594e <xQueueGenericSend+0x42>
 8005946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <xQueueGenericSend+0x46>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <xQueueGenericSend+0x48>
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10b      	bne.n	8005970 <xQueueGenericSend+0x64>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800596a:	bf00      	nop
 800596c:	bf00      	nop
 800596e:	e7fd      	b.n	800596c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d103      	bne.n	800597e <xQueueGenericSend+0x72>
 8005976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <xQueueGenericSend+0x76>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <xQueueGenericSend+0x78>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10b      	bne.n	80059a0 <xQueueGenericSend+0x94>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	623b      	str	r3, [r7, #32]
}
 800599a:	bf00      	nop
 800599c:	bf00      	nop
 800599e:	e7fd      	b.n	800599c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059a0:	f001 f9ce 	bl	8006d40 <xTaskGetSchedulerState>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d102      	bne.n	80059b0 <xQueueGenericSend+0xa4>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <xQueueGenericSend+0xa8>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <xQueueGenericSend+0xaa>
 80059b4:	2300      	movs	r3, #0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10b      	bne.n	80059d2 <xQueueGenericSend+0xc6>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	61fb      	str	r3, [r7, #28]
}
 80059cc:	bf00      	nop
 80059ce:	bf00      	nop
 80059d0:	e7fd      	b.n	80059ce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059d2:	f001 ff81 	bl	80078d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059de:	429a      	cmp	r2, r3
 80059e0:	d302      	bcc.n	80059e8 <xQueueGenericSend+0xdc>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d129      	bne.n	8005a3c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059ee:	f000 fa0f 	bl	8005e10 <prvCopyDataToQueue>
 80059f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d010      	beq.n	8005a1e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fe:	3324      	adds	r3, #36	@ 0x24
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 ffdd 	bl	80069c0 <xTaskRemoveFromEventList>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d013      	beq.n	8005a34 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a0c:	4b3f      	ldr	r3, [pc, #252]	@ (8005b0c <xQueueGenericSend+0x200>)
 8005a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	e00a      	b.n	8005a34 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a24:	4b39      	ldr	r3, [pc, #228]	@ (8005b0c <xQueueGenericSend+0x200>)
 8005a26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a34:	f001 ff82 	bl	800793c <vPortExitCritical>
				return pdPASS;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e063      	b.n	8005b04 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a42:	f001 ff7b 	bl	800793c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	e05c      	b.n	8005b04 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a50:	f107 0314 	add.w	r3, r7, #20
 8005a54:	4618      	mov	r0, r3
 8005a56:	f001 f817 	bl	8006a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a5e:	f001 ff6d 	bl	800793c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a62:	f000 fd87 	bl	8006574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a66:	f001 ff37 	bl	80078d8 <vPortEnterCritical>
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a70:	b25b      	sxtb	r3, r3
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d103      	bne.n	8005a80 <xQueueGenericSend+0x174>
 8005a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a86:	b25b      	sxtb	r3, r3
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8c:	d103      	bne.n	8005a96 <xQueueGenericSend+0x18a>
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a96:	f001 ff51 	bl	800793c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a9a:	1d3a      	adds	r2, r7, #4
 8005a9c:	f107 0314 	add.w	r3, r7, #20
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 f806 	bl	8006ab4 <xTaskCheckForTimeOut>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d124      	bne.n	8005af8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005aae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ab0:	f000 faa6 	bl	8006000 <prvIsQueueFull>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d018      	beq.n	8005aec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abc:	3310      	adds	r3, #16
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 ff2a 	bl	800691c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ac8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005aca:	f000 fa31 	bl	8005f30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ace:	f000 fd5f 	bl	8006590 <xTaskResumeAll>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f47f af7c 	bne.w	80059d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005ada:	4b0c      	ldr	r3, [pc, #48]	@ (8005b0c <xQueueGenericSend+0x200>)
 8005adc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	e772      	b.n	80059d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005aec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005aee:	f000 fa1f 	bl	8005f30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005af2:	f000 fd4d 	bl	8006590 <xTaskResumeAll>
 8005af6:	e76c      	b.n	80059d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005af8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005afa:	f000 fa19 	bl	8005f30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005afe:	f000 fd47 	bl	8006590 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3738      	adds	r7, #56	@ 0x38
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	e000ed04 	.word	0xe000ed04

08005b10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b090      	sub	sp, #64	@ 0x40
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10b      	bne.n	8005b40 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b3a:	bf00      	nop
 8005b3c:	bf00      	nop
 8005b3e:	e7fd      	b.n	8005b3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d103      	bne.n	8005b4e <xQueueGenericSendFromISR+0x3e>
 8005b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <xQueueGenericSendFromISR+0x42>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <xQueueGenericSendFromISR+0x44>
 8005b52:	2300      	movs	r3, #0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10b      	bne.n	8005b70 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b6a:	bf00      	nop
 8005b6c:	bf00      	nop
 8005b6e:	e7fd      	b.n	8005b6c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d103      	bne.n	8005b7e <xQueueGenericSendFromISR+0x6e>
 8005b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d101      	bne.n	8005b82 <xQueueGenericSendFromISR+0x72>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <xQueueGenericSendFromISR+0x74>
 8005b82:	2300      	movs	r3, #0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10b      	bne.n	8005ba0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	623b      	str	r3, [r7, #32]
}
 8005b9a:	bf00      	nop
 8005b9c:	bf00      	nop
 8005b9e:	e7fd      	b.n	8005b9c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ba0:	f001 ff7a 	bl	8007a98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ba4:	f3ef 8211 	mrs	r2, BASEPRI
 8005ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	61fa      	str	r2, [r7, #28]
 8005bba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bbe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d302      	bcc.n	8005bd2 <xQueueGenericSendFromISR+0xc2>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d12f      	bne.n	8005c32 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005be8:	f000 f912 	bl	8005e10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d112      	bne.n	8005c1c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d016      	beq.n	8005c2c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c00:	3324      	adds	r3, #36	@ 0x24
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 fedc 	bl	80069c0 <xTaskRemoveFromEventList>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00e      	beq.n	8005c2c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00b      	beq.n	8005c2c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	e007      	b.n	8005c2c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c20:	3301      	adds	r3, #1
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	b25a      	sxtb	r2, r3
 8005c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005c30:	e001      	b.n	8005c36 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c38:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3740      	adds	r7, #64	@ 0x40
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08c      	sub	sp, #48	@ 0x30
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10b      	bne.n	8005c7e <xQueueReceive+0x32>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	623b      	str	r3, [r7, #32]
}
 8005c78:	bf00      	nop
 8005c7a:	bf00      	nop
 8005c7c:	e7fd      	b.n	8005c7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d103      	bne.n	8005c8c <xQueueReceive+0x40>
 8005c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <xQueueReceive+0x44>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <xQueueReceive+0x46>
 8005c90:	2300      	movs	r3, #0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <xQueueReceive+0x62>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	61fb      	str	r3, [r7, #28]
}
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	e7fd      	b.n	8005caa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cae:	f001 f847 	bl	8006d40 <xTaskGetSchedulerState>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d102      	bne.n	8005cbe <xQueueReceive+0x72>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <xQueueReceive+0x76>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e000      	b.n	8005cc4 <xQueueReceive+0x78>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10b      	bne.n	8005ce0 <xQueueReceive+0x94>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	61bb      	str	r3, [r7, #24]
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	e7fd      	b.n	8005cdc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ce0:	f001 fdfa 	bl	80078d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01f      	beq.n	8005d30 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cf4:	f000 f8f6 	bl	8005ee4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	1e5a      	subs	r2, r3, #1
 8005cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00f      	beq.n	8005d28 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0a:	3310      	adds	r3, #16
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fe57 	bl	80069c0 <xTaskRemoveFromEventList>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d007      	beq.n	8005d28 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d18:	4b3c      	ldr	r3, [pc, #240]	@ (8005e0c <xQueueReceive+0x1c0>)
 8005d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d28:	f001 fe08 	bl	800793c <vPortExitCritical>
				return pdPASS;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e069      	b.n	8005e04 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d103      	bne.n	8005d3e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d36:	f001 fe01 	bl	800793c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	e062      	b.n	8005e04 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d44:	f107 0310 	add.w	r3, r7, #16
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fe9d 	bl	8006a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d52:	f001 fdf3 	bl	800793c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d56:	f000 fc0d 	bl	8006574 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d5a:	f001 fdbd 	bl	80078d8 <vPortEnterCritical>
 8005d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d64:	b25b      	sxtb	r3, r3
 8005d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6a:	d103      	bne.n	8005d74 <xQueueReceive+0x128>
 8005d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d7a:	b25b      	sxtb	r3, r3
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d80:	d103      	bne.n	8005d8a <xQueueReceive+0x13e>
 8005d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d8a:	f001 fdd7 	bl	800793c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d8e:	1d3a      	adds	r2, r7, #4
 8005d90:	f107 0310 	add.w	r3, r7, #16
 8005d94:	4611      	mov	r1, r2
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fe8c 	bl	8006ab4 <xTaskCheckForTimeOut>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d123      	bne.n	8005dea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005da2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005da4:	f000 f916 	bl	8005fd4 <prvIsQueueEmpty>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d017      	beq.n	8005dde <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db0:	3324      	adds	r3, #36	@ 0x24
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	4611      	mov	r1, r2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fdb0 	bl	800691c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005dbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dbe:	f000 f8b7 	bl	8005f30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dc2:	f000 fbe5 	bl	8006590 <xTaskResumeAll>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d189      	bne.n	8005ce0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e0c <xQueueReceive+0x1c0>)
 8005dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	e780      	b.n	8005ce0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005dde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005de0:	f000 f8a6 	bl	8005f30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005de4:	f000 fbd4 	bl	8006590 <xTaskResumeAll>
 8005de8:	e77a      	b.n	8005ce0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dec:	f000 f8a0 	bl	8005f30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005df0:	f000 fbce 	bl	8006590 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005df4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005df6:	f000 f8ed 	bl	8005fd4 <prvIsQueueEmpty>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f43f af6f 	beq.w	8005ce0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3730      	adds	r7, #48	@ 0x30
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	e000ed04 	.word	0xe000ed04

08005e10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10d      	bne.n	8005e4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d14d      	bne.n	8005ed2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 ff9e 	bl	8006d7c <xTaskPriorityDisinherit>
 8005e40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	609a      	str	r2, [r3, #8]
 8005e48:	e043      	b.n	8005ed2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d119      	bne.n	8005e84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6858      	ldr	r0, [r3, #4]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e58:	461a      	mov	r2, r3
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	f002 f8a0 	bl	8007fa0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e68:	441a      	add	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d32b      	bcc.n	8005ed2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	605a      	str	r2, [r3, #4]
 8005e82:	e026      	b.n	8005ed2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68d8      	ldr	r0, [r3, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	f002 f886 	bl	8007fa0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9c:	425b      	negs	r3, r3
 8005e9e:	441a      	add	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d207      	bcs.n	8005ec0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb8:	425b      	negs	r3, r3
 8005eba:	441a      	add	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d105      	bne.n	8005ed2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005eda:	697b      	ldr	r3, [r7, #20]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d018      	beq.n	8005f28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efe:	441a      	add	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d303      	bcc.n	8005f18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68d9      	ldr	r1, [r3, #12]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f20:	461a      	mov	r2, r3
 8005f22:	6838      	ldr	r0, [r7, #0]
 8005f24:	f002 f83c 	bl	8007fa0 <memcpy>
	}
}
 8005f28:	bf00      	nop
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f38:	f001 fcce 	bl	80078d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f44:	e011      	b.n	8005f6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d012      	beq.n	8005f74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	3324      	adds	r3, #36	@ 0x24
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fd34 	bl	80069c0 <xTaskRemoveFromEventList>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f5e:	f000 fe0d 	bl	8006b7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	dce9      	bgt.n	8005f46 <prvUnlockQueue+0x16>
 8005f72:	e000      	b.n	8005f76 <prvUnlockQueue+0x46>
					break;
 8005f74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	22ff      	movs	r2, #255	@ 0xff
 8005f7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005f7e:	f001 fcdd 	bl	800793c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f82:	f001 fca9 	bl	80078d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f8e:	e011      	b.n	8005fb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d012      	beq.n	8005fbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3310      	adds	r3, #16
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fd0f 	bl	80069c0 <xTaskRemoveFromEventList>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005fa8:	f000 fde8 	bl	8006b7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005fac:	7bbb      	ldrb	r3, [r7, #14]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	dce9      	bgt.n	8005f90 <prvUnlockQueue+0x60>
 8005fbc:	e000      	b.n	8005fc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005fbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	22ff      	movs	r2, #255	@ 0xff
 8005fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005fc8:	f001 fcb8 	bl	800793c <vPortExitCritical>
}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fdc:	f001 fc7c 	bl	80078d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d102      	bne.n	8005fee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	e001      	b.n	8005ff2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ff2:	f001 fca3 	bl	800793c <vPortExitCritical>

	return xReturn;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006008:	f001 fc66 	bl	80078d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006014:	429a      	cmp	r2, r3
 8006016:	d102      	bne.n	800601e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006018:	2301      	movs	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e001      	b.n	8006022 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006022:	f001 fc8b 	bl	800793c <vPortExitCritical>

	return xReturn;
 8006026:	68fb      	ldr	r3, [r7, #12]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	e014      	b.n	800606a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006040:	4a0f      	ldr	r2, [pc, #60]	@ (8006080 <vQueueAddToRegistry+0x50>)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10b      	bne.n	8006064 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800604c:	490c      	ldr	r1, [pc, #48]	@ (8006080 <vQueueAddToRegistry+0x50>)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006056:	4a0a      	ldr	r2, [pc, #40]	@ (8006080 <vQueueAddToRegistry+0x50>)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	4413      	add	r3, r2
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006062:	e006      	b.n	8006072 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	3301      	adds	r3, #1
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b07      	cmp	r3, #7
 800606e:	d9e7      	bls.n	8006040 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006070:	bf00      	nop
 8006072:	bf00      	nop
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20000ce4 	.word	0x20000ce4

08006084 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006094:	f001 fc20 	bl	80078d8 <vPortEnterCritical>
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800609e:	b25b      	sxtb	r3, r3
 80060a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a4:	d103      	bne.n	80060ae <vQueueWaitForMessageRestricted+0x2a>
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060b4:	b25b      	sxtb	r3, r3
 80060b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ba:	d103      	bne.n	80060c4 <vQueueWaitForMessageRestricted+0x40>
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060c4:	f001 fc3a 	bl	800793c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d106      	bne.n	80060de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	3324      	adds	r3, #36	@ 0x24
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	68b9      	ldr	r1, [r7, #8]
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 fc45 	bl	8006968 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060de:	6978      	ldr	r0, [r7, #20]
 80060e0:	f7ff ff26 	bl	8005f30 <prvUnlockQueue>
	}
 80060e4:	bf00      	nop
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08e      	sub	sp, #56	@ 0x38
 80060f0:	af04      	add	r7, sp, #16
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10b      	bne.n	8006118 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	623b      	str	r3, [r7, #32]
}
 8006112:	bf00      	nop
 8006114:	bf00      	nop
 8006116:	e7fd      	b.n	8006114 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10b      	bne.n	8006136 <xTaskCreateStatic+0x4a>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	61fb      	str	r3, [r7, #28]
}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	e7fd      	b.n	8006132 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006136:	235c      	movs	r3, #92	@ 0x5c
 8006138:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	2b5c      	cmp	r3, #92	@ 0x5c
 800613e:	d00b      	beq.n	8006158 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	61bb      	str	r3, [r7, #24]
}
 8006152:	bf00      	nop
 8006154:	bf00      	nop
 8006156:	e7fd      	b.n	8006154 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006158:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800615a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615c:	2b00      	cmp	r3, #0
 800615e:	d01e      	beq.n	800619e <xTaskCreateStatic+0xb2>
 8006160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006162:	2b00      	cmp	r3, #0
 8006164:	d01b      	beq.n	800619e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006168:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800616e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	2202      	movs	r2, #2
 8006174:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006178:	2300      	movs	r3, #0
 800617a:	9303      	str	r3, [sp, #12]
 800617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617e:	9302      	str	r3, [sp, #8]
 8006180:	f107 0314 	add.w	r3, r7, #20
 8006184:	9301      	str	r3, [sp, #4]
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 f850 	bl	8006236 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006196:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006198:	f000 f8de 	bl	8006358 <prvAddNewTaskToReadyList>
 800619c:	e001      	b.n	80061a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800619e:	2300      	movs	r3, #0
 80061a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061a2:	697b      	ldr	r3, [r7, #20]
	}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3728      	adds	r7, #40	@ 0x28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08c      	sub	sp, #48	@ 0x30
 80061b0:	af04      	add	r7, sp, #16
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	4613      	mov	r3, r2
 80061ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061bc:	88fb      	ldrh	r3, [r7, #6]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 fcab 	bl	8007b1c <pvPortMalloc>
 80061c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00e      	beq.n	80061ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061ce:	205c      	movs	r0, #92	@ 0x5c
 80061d0:	f001 fca4 	bl	8007b1c <pvPortMalloc>
 80061d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80061e2:	e005      	b.n	80061f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061e4:	6978      	ldr	r0, [r7, #20]
 80061e6:	f001 fd67 	bl	8007cb8 <vPortFree>
 80061ea:	e001      	b.n	80061f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d017      	beq.n	8006226 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061fe:	88fa      	ldrh	r2, [r7, #6]
 8006200:	2300      	movs	r3, #0
 8006202:	9303      	str	r3, [sp, #12]
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	9302      	str	r3, [sp, #8]
 8006208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620a:	9301      	str	r3, [sp, #4]
 800620c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f80e 	bl	8006236 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800621a:	69f8      	ldr	r0, [r7, #28]
 800621c:	f000 f89c 	bl	8006358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006220:	2301      	movs	r3, #1
 8006222:	61bb      	str	r3, [r7, #24]
 8006224:	e002      	b.n	800622c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006226:	f04f 33ff 	mov.w	r3, #4294967295
 800622a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800622c:	69bb      	ldr	r3, [r7, #24]
	}
 800622e:	4618      	mov	r0, r3
 8006230:	3720      	adds	r7, #32
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b088      	sub	sp, #32
 800623a:	af00      	add	r7, sp, #0
 800623c:	60f8      	str	r0, [r7, #12]
 800623e:	60b9      	str	r1, [r7, #8]
 8006240:	607a      	str	r2, [r7, #4]
 8006242:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006246:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	461a      	mov	r2, r3
 800624e:	21a5      	movs	r1, #165	@ 0xa5
 8006250:	f001 fe72 	bl	8007f38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006256:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800625e:	3b01      	subs	r3, #1
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	f023 0307 	bic.w	r3, r3, #7
 800626c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00b      	beq.n	8006290 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	617b      	str	r3, [r7, #20]
}
 800628a:	bf00      	nop
 800628c:	bf00      	nop
 800628e:	e7fd      	b.n	800628c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d01f      	beq.n	80062d6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006296:	2300      	movs	r3, #0
 8006298:	61fb      	str	r3, [r7, #28]
 800629a:	e012      	b.n	80062c2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	4413      	add	r3, r2
 80062a2:	7819      	ldrb	r1, [r3, #0]
 80062a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	4413      	add	r3, r2
 80062aa:	3334      	adds	r3, #52	@ 0x34
 80062ac:	460a      	mov	r2, r1
 80062ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d006      	beq.n	80062ca <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	3301      	adds	r3, #1
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	2b0f      	cmp	r3, #15
 80062c6:	d9e9      	bls.n	800629c <prvInitialiseNewTask+0x66>
 80062c8:	e000      	b.n	80062cc <prvInitialiseNewTask+0x96>
			{
				break;
 80062ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062d4:	e003      	b.n	80062de <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e0:	2b37      	cmp	r3, #55	@ 0x37
 80062e2:	d901      	bls.n	80062e8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062e4:	2337      	movs	r3, #55	@ 0x37
 80062e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062f2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f6:	2200      	movs	r2, #0
 80062f8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fc:	3304      	adds	r3, #4
 80062fe:	4618      	mov	r0, r3
 8006300:	f7ff f966 	bl	80055d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006306:	3318      	adds	r3, #24
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff f961 	bl	80055d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800630e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006312:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006316:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800631a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800631e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006322:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	2200      	movs	r2, #0
 8006328:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	68f9      	ldr	r1, [r7, #12]
 8006336:	69b8      	ldr	r0, [r7, #24]
 8006338:	f001 f99c 	bl	8007674 <pxPortInitialiseStack>
 800633c:	4602      	mov	r2, r0
 800633e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006340:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800634c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800634e:	bf00      	nop
 8006350:	3720      	adds	r7, #32
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006360:	f001 faba 	bl	80078d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006364:	4b2d      	ldr	r3, [pc, #180]	@ (800641c <prvAddNewTaskToReadyList+0xc4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3301      	adds	r3, #1
 800636a:	4a2c      	ldr	r2, [pc, #176]	@ (800641c <prvAddNewTaskToReadyList+0xc4>)
 800636c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800636e:	4b2c      	ldr	r3, [pc, #176]	@ (8006420 <prvAddNewTaskToReadyList+0xc8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d109      	bne.n	800638a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006376:	4a2a      	ldr	r2, [pc, #168]	@ (8006420 <prvAddNewTaskToReadyList+0xc8>)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800637c:	4b27      	ldr	r3, [pc, #156]	@ (800641c <prvAddNewTaskToReadyList+0xc4>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d110      	bne.n	80063a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006384:	f000 fc1e 	bl	8006bc4 <prvInitialiseTaskLists>
 8006388:	e00d      	b.n	80063a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800638a:	4b26      	ldr	r3, [pc, #152]	@ (8006424 <prvAddNewTaskToReadyList+0xcc>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d109      	bne.n	80063a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006392:	4b23      	ldr	r3, [pc, #140]	@ (8006420 <prvAddNewTaskToReadyList+0xc8>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639c:	429a      	cmp	r2, r3
 800639e:	d802      	bhi.n	80063a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006420 <prvAddNewTaskToReadyList+0xc8>)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063a6:	4b20      	ldr	r3, [pc, #128]	@ (8006428 <prvAddNewTaskToReadyList+0xd0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3301      	adds	r3, #1
 80063ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006428 <prvAddNewTaskToReadyList+0xd0>)
 80063ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006428 <prvAddNewTaskToReadyList+0xd0>)
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063bc:	4b1b      	ldr	r3, [pc, #108]	@ (800642c <prvAddNewTaskToReadyList+0xd4>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d903      	bls.n	80063cc <prvAddNewTaskToReadyList+0x74>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c8:	4a18      	ldr	r2, [pc, #96]	@ (800642c <prvAddNewTaskToReadyList+0xd4>)
 80063ca:	6013      	str	r3, [r2, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4a15      	ldr	r2, [pc, #84]	@ (8006430 <prvAddNewTaskToReadyList+0xd8>)
 80063da:	441a      	add	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3304      	adds	r3, #4
 80063e0:	4619      	mov	r1, r3
 80063e2:	4610      	mov	r0, r2
 80063e4:	f7ff f901 	bl	80055ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063e8:	f001 faa8 	bl	800793c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006424 <prvAddNewTaskToReadyList+0xcc>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00e      	beq.n	8006412 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006420 <prvAddNewTaskToReadyList+0xc8>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fe:	429a      	cmp	r2, r3
 8006400:	d207      	bcs.n	8006412 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006402:	4b0c      	ldr	r3, [pc, #48]	@ (8006434 <prvAddNewTaskToReadyList+0xdc>)
 8006404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006412:	bf00      	nop
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	200011f8 	.word	0x200011f8
 8006420:	20000d24 	.word	0x20000d24
 8006424:	20001204 	.word	0x20001204
 8006428:	20001214 	.word	0x20001214
 800642c:	20001200 	.word	0x20001200
 8006430:	20000d28 	.word	0x20000d28
 8006434:	e000ed04 	.word	0xe000ed04

08006438 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d018      	beq.n	800647c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800644a:	4b14      	ldr	r3, [pc, #80]	@ (800649c <vTaskDelay+0x64>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00b      	beq.n	800646a <vTaskDelay+0x32>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	60bb      	str	r3, [r7, #8]
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	e7fd      	b.n	8006466 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800646a:	f000 f883 	bl	8006574 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800646e:	2100      	movs	r1, #0
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fcf3 	bl	8006e5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006476:	f000 f88b 	bl	8006590 <xTaskResumeAll>
 800647a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d107      	bne.n	8006492 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006482:	4b07      	ldr	r3, [pc, #28]	@ (80064a0 <vTaskDelay+0x68>)
 8006484:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006492:	bf00      	nop
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	20001220 	.word	0x20001220
 80064a0:	e000ed04 	.word	0xe000ed04

080064a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08a      	sub	sp, #40	@ 0x28
 80064a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064b2:	463a      	mov	r2, r7
 80064b4:	1d39      	adds	r1, r7, #4
 80064b6:	f107 0308 	add.w	r3, r7, #8
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff f834 	bl	8005528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	9202      	str	r2, [sp, #8]
 80064c8:	9301      	str	r3, [sp, #4]
 80064ca:	2300      	movs	r3, #0
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	2300      	movs	r3, #0
 80064d0:	460a      	mov	r2, r1
 80064d2:	4922      	ldr	r1, [pc, #136]	@ (800655c <vTaskStartScheduler+0xb8>)
 80064d4:	4822      	ldr	r0, [pc, #136]	@ (8006560 <vTaskStartScheduler+0xbc>)
 80064d6:	f7ff fe09 	bl	80060ec <xTaskCreateStatic>
 80064da:	4603      	mov	r3, r0
 80064dc:	4a21      	ldr	r2, [pc, #132]	@ (8006564 <vTaskStartScheduler+0xc0>)
 80064de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064e0:	4b20      	ldr	r3, [pc, #128]	@ (8006564 <vTaskStartScheduler+0xc0>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064e8:	2301      	movs	r3, #1
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	e001      	b.n	80064f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d102      	bne.n	80064fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80064f8:	f000 fd04 	bl	8006f04 <xTimerCreateTimerTask>
 80064fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d116      	bne.n	8006532 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	613b      	str	r3, [r7, #16]
}
 8006516:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006518:	4b13      	ldr	r3, [pc, #76]	@ (8006568 <vTaskStartScheduler+0xc4>)
 800651a:	f04f 32ff 	mov.w	r2, #4294967295
 800651e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006520:	4b12      	ldr	r3, [pc, #72]	@ (800656c <vTaskStartScheduler+0xc8>)
 8006522:	2201      	movs	r2, #1
 8006524:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006526:	4b12      	ldr	r3, [pc, #72]	@ (8006570 <vTaskStartScheduler+0xcc>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800652c:	f001 f930 	bl	8007790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006530:	e00f      	b.n	8006552 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d10b      	bne.n	8006552 <vTaskStartScheduler+0xae>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	60fb      	str	r3, [r7, #12]
}
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	e7fd      	b.n	800654e <vTaskStartScheduler+0xaa>
}
 8006552:	bf00      	nop
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	080088d0 	.word	0x080088d0
 8006560:	08006b95 	.word	0x08006b95
 8006564:	2000121c 	.word	0x2000121c
 8006568:	20001218 	.word	0x20001218
 800656c:	20001204 	.word	0x20001204
 8006570:	200011fc 	.word	0x200011fc

08006574 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006578:	4b04      	ldr	r3, [pc, #16]	@ (800658c <vTaskSuspendAll+0x18>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3301      	adds	r3, #1
 800657e:	4a03      	ldr	r2, [pc, #12]	@ (800658c <vTaskSuspendAll+0x18>)
 8006580:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006582:	bf00      	nop
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	20001220 	.word	0x20001220

08006590 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800659a:	2300      	movs	r3, #0
 800659c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800659e:	4b42      	ldr	r3, [pc, #264]	@ (80066a8 <xTaskResumeAll+0x118>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10b      	bne.n	80065be <xTaskResumeAll+0x2e>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	603b      	str	r3, [r7, #0]
}
 80065b8:	bf00      	nop
 80065ba:	bf00      	nop
 80065bc:	e7fd      	b.n	80065ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065be:	f001 f98b 	bl	80078d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065c2:	4b39      	ldr	r3, [pc, #228]	@ (80066a8 <xTaskResumeAll+0x118>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	4a37      	ldr	r2, [pc, #220]	@ (80066a8 <xTaskResumeAll+0x118>)
 80065ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065cc:	4b36      	ldr	r3, [pc, #216]	@ (80066a8 <xTaskResumeAll+0x118>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d162      	bne.n	800669a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065d4:	4b35      	ldr	r3, [pc, #212]	@ (80066ac <xTaskResumeAll+0x11c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d05e      	beq.n	800669a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065dc:	e02f      	b.n	800663e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065de:	4b34      	ldr	r3, [pc, #208]	@ (80066b0 <xTaskResumeAll+0x120>)
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3318      	adds	r3, #24
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff f85a 	bl	80056a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3304      	adds	r3, #4
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff f855 	bl	80056a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065fe:	4b2d      	ldr	r3, [pc, #180]	@ (80066b4 <xTaskResumeAll+0x124>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d903      	bls.n	800660e <xTaskResumeAll+0x7e>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660a:	4a2a      	ldr	r2, [pc, #168]	@ (80066b4 <xTaskResumeAll+0x124>)
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006612:	4613      	mov	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4a27      	ldr	r2, [pc, #156]	@ (80066b8 <xTaskResumeAll+0x128>)
 800661c:	441a      	add	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3304      	adds	r3, #4
 8006622:	4619      	mov	r1, r3
 8006624:	4610      	mov	r0, r2
 8006626:	f7fe ffe0 	bl	80055ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800662e:	4b23      	ldr	r3, [pc, #140]	@ (80066bc <xTaskResumeAll+0x12c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006634:	429a      	cmp	r2, r3
 8006636:	d302      	bcc.n	800663e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006638:	4b21      	ldr	r3, [pc, #132]	@ (80066c0 <xTaskResumeAll+0x130>)
 800663a:	2201      	movs	r2, #1
 800663c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800663e:	4b1c      	ldr	r3, [pc, #112]	@ (80066b0 <xTaskResumeAll+0x120>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1cb      	bne.n	80065de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800664c:	f000 fb58 	bl	8006d00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006650:	4b1c      	ldr	r3, [pc, #112]	@ (80066c4 <xTaskResumeAll+0x134>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d010      	beq.n	800667e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800665c:	f000 f846 	bl	80066ec <xTaskIncrementTick>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006666:	4b16      	ldr	r3, [pc, #88]	@ (80066c0 <xTaskResumeAll+0x130>)
 8006668:	2201      	movs	r2, #1
 800666a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3b01      	subs	r3, #1
 8006670:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1f1      	bne.n	800665c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006678:	4b12      	ldr	r3, [pc, #72]	@ (80066c4 <xTaskResumeAll+0x134>)
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800667e:	4b10      	ldr	r3, [pc, #64]	@ (80066c0 <xTaskResumeAll+0x130>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006686:	2301      	movs	r3, #1
 8006688:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800668a:	4b0f      	ldr	r3, [pc, #60]	@ (80066c8 <xTaskResumeAll+0x138>)
 800668c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800669a:	f001 f94f 	bl	800793c <vPortExitCritical>

	return xAlreadyYielded;
 800669e:	68bb      	ldr	r3, [r7, #8]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20001220 	.word	0x20001220
 80066ac:	200011f8 	.word	0x200011f8
 80066b0:	200011b8 	.word	0x200011b8
 80066b4:	20001200 	.word	0x20001200
 80066b8:	20000d28 	.word	0x20000d28
 80066bc:	20000d24 	.word	0x20000d24
 80066c0:	2000120c 	.word	0x2000120c
 80066c4:	20001208 	.word	0x20001208
 80066c8:	e000ed04 	.word	0xe000ed04

080066cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066d2:	4b05      	ldr	r3, [pc, #20]	@ (80066e8 <xTaskGetTickCount+0x1c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066d8:	687b      	ldr	r3, [r7, #4]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	200011fc 	.word	0x200011fc

080066ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066f6:	4b4f      	ldr	r3, [pc, #316]	@ (8006834 <xTaskIncrementTick+0x148>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f040 8090 	bne.w	8006820 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006700:	4b4d      	ldr	r3, [pc, #308]	@ (8006838 <xTaskIncrementTick+0x14c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3301      	adds	r3, #1
 8006706:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006708:	4a4b      	ldr	r2, [pc, #300]	@ (8006838 <xTaskIncrementTick+0x14c>)
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d121      	bne.n	8006758 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006714:	4b49      	ldr	r3, [pc, #292]	@ (800683c <xTaskIncrementTick+0x150>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00b      	beq.n	8006736 <xTaskIncrementTick+0x4a>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	603b      	str	r3, [r7, #0]
}
 8006730:	bf00      	nop
 8006732:	bf00      	nop
 8006734:	e7fd      	b.n	8006732 <xTaskIncrementTick+0x46>
 8006736:	4b41      	ldr	r3, [pc, #260]	@ (800683c <xTaskIncrementTick+0x150>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	4b40      	ldr	r3, [pc, #256]	@ (8006840 <xTaskIncrementTick+0x154>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a3e      	ldr	r2, [pc, #248]	@ (800683c <xTaskIncrementTick+0x150>)
 8006742:	6013      	str	r3, [r2, #0]
 8006744:	4a3e      	ldr	r2, [pc, #248]	@ (8006840 <xTaskIncrementTick+0x154>)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	4b3e      	ldr	r3, [pc, #248]	@ (8006844 <xTaskIncrementTick+0x158>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3301      	adds	r3, #1
 8006750:	4a3c      	ldr	r2, [pc, #240]	@ (8006844 <xTaskIncrementTick+0x158>)
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	f000 fad4 	bl	8006d00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006758:	4b3b      	ldr	r3, [pc, #236]	@ (8006848 <xTaskIncrementTick+0x15c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	429a      	cmp	r2, r3
 8006760:	d349      	bcc.n	80067f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006762:	4b36      	ldr	r3, [pc, #216]	@ (800683c <xTaskIncrementTick+0x150>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d104      	bne.n	8006776 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800676c:	4b36      	ldr	r3, [pc, #216]	@ (8006848 <xTaskIncrementTick+0x15c>)
 800676e:	f04f 32ff 	mov.w	r2, #4294967295
 8006772:	601a      	str	r2, [r3, #0]
					break;
 8006774:	e03f      	b.n	80067f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006776:	4b31      	ldr	r3, [pc, #196]	@ (800683c <xTaskIncrementTick+0x150>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	429a      	cmp	r2, r3
 800678c:	d203      	bcs.n	8006796 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800678e:	4a2e      	ldr	r2, [pc, #184]	@ (8006848 <xTaskIncrementTick+0x15c>)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006794:	e02f      	b.n	80067f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	3304      	adds	r3, #4
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe ff82 	bl	80056a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d004      	beq.n	80067b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	3318      	adds	r3, #24
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe ff79 	bl	80056a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b6:	4b25      	ldr	r3, [pc, #148]	@ (800684c <xTaskIncrementTick+0x160>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d903      	bls.n	80067c6 <xTaskIncrementTick+0xda>
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c2:	4a22      	ldr	r2, [pc, #136]	@ (800684c <xTaskIncrementTick+0x160>)
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ca:	4613      	mov	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006850 <xTaskIncrementTick+0x164>)
 80067d4:	441a      	add	r2, r3
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	3304      	adds	r3, #4
 80067da:	4619      	mov	r1, r3
 80067dc:	4610      	mov	r0, r2
 80067de:	f7fe ff04 	bl	80055ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006854 <xTaskIncrementTick+0x168>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d3b8      	bcc.n	8006762 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80067f0:	2301      	movs	r3, #1
 80067f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067f4:	e7b5      	b.n	8006762 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067f6:	4b17      	ldr	r3, [pc, #92]	@ (8006854 <xTaskIncrementTick+0x168>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067fc:	4914      	ldr	r1, [pc, #80]	@ (8006850 <xTaskIncrementTick+0x164>)
 80067fe:	4613      	mov	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	440b      	add	r3, r1
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d901      	bls.n	8006812 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800680e:	2301      	movs	r3, #1
 8006810:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006812:	4b11      	ldr	r3, [pc, #68]	@ (8006858 <xTaskIncrementTick+0x16c>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d007      	beq.n	800682a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800681a:	2301      	movs	r3, #1
 800681c:	617b      	str	r3, [r7, #20]
 800681e:	e004      	b.n	800682a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006820:	4b0e      	ldr	r3, [pc, #56]	@ (800685c <xTaskIncrementTick+0x170>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3301      	adds	r3, #1
 8006826:	4a0d      	ldr	r2, [pc, #52]	@ (800685c <xTaskIncrementTick+0x170>)
 8006828:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800682a:	697b      	ldr	r3, [r7, #20]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20001220 	.word	0x20001220
 8006838:	200011fc 	.word	0x200011fc
 800683c:	200011b0 	.word	0x200011b0
 8006840:	200011b4 	.word	0x200011b4
 8006844:	20001210 	.word	0x20001210
 8006848:	20001218 	.word	0x20001218
 800684c:	20001200 	.word	0x20001200
 8006850:	20000d28 	.word	0x20000d28
 8006854:	20000d24 	.word	0x20000d24
 8006858:	2000120c 	.word	0x2000120c
 800685c:	20001208 	.word	0x20001208

08006860 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006866:	4b28      	ldr	r3, [pc, #160]	@ (8006908 <vTaskSwitchContext+0xa8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800686e:	4b27      	ldr	r3, [pc, #156]	@ (800690c <vTaskSwitchContext+0xac>)
 8006870:	2201      	movs	r2, #1
 8006872:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006874:	e042      	b.n	80068fc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006876:	4b25      	ldr	r3, [pc, #148]	@ (800690c <vTaskSwitchContext+0xac>)
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800687c:	4b24      	ldr	r3, [pc, #144]	@ (8006910 <vTaskSwitchContext+0xb0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	e011      	b.n	80068a8 <vTaskSwitchContext+0x48>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <vTaskSwitchContext+0x42>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	607b      	str	r3, [r7, #4]
}
 800689c:	bf00      	nop
 800689e:	bf00      	nop
 80068a0:	e7fd      	b.n	800689e <vTaskSwitchContext+0x3e>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	491a      	ldr	r1, [pc, #104]	@ (8006914 <vTaskSwitchContext+0xb4>)
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	4613      	mov	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0e3      	beq.n	8006884 <vTaskSwitchContext+0x24>
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4a13      	ldr	r2, [pc, #76]	@ (8006914 <vTaskSwitchContext+0xb4>)
 80068c8:	4413      	add	r3, r2
 80068ca:	60bb      	str	r3, [r7, #8]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	605a      	str	r2, [r3, #4]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	3308      	adds	r3, #8
 80068de:	429a      	cmp	r2, r3
 80068e0:	d104      	bne.n	80068ec <vTaskSwitchContext+0x8c>
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	605a      	str	r2, [r3, #4]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	4a09      	ldr	r2, [pc, #36]	@ (8006918 <vTaskSwitchContext+0xb8>)
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	4a06      	ldr	r2, [pc, #24]	@ (8006910 <vTaskSwitchContext+0xb0>)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6013      	str	r3, [r2, #0]
}
 80068fc:	bf00      	nop
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	20001220 	.word	0x20001220
 800690c:	2000120c 	.word	0x2000120c
 8006910:	20001200 	.word	0x20001200
 8006914:	20000d28 	.word	0x20000d28
 8006918:	20000d24 	.word	0x20000d24

0800691c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10b      	bne.n	8006944 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	60fb      	str	r3, [r7, #12]
}
 800693e:	bf00      	nop
 8006940:	bf00      	nop
 8006942:	e7fd      	b.n	8006940 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006944:	4b07      	ldr	r3, [pc, #28]	@ (8006964 <vTaskPlaceOnEventList+0x48>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3318      	adds	r3, #24
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7fe fe70 	bl	8005632 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006952:	2101      	movs	r1, #1
 8006954:	6838      	ldr	r0, [r7, #0]
 8006956:	f000 fa81 	bl	8006e5c <prvAddCurrentTaskToDelayedList>
}
 800695a:	bf00      	nop
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20000d24 	.word	0x20000d24

08006968 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10b      	bne.n	8006992 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	617b      	str	r3, [r7, #20]
}
 800698c:	bf00      	nop
 800698e:	bf00      	nop
 8006990:	e7fd      	b.n	800698e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006992:	4b0a      	ldr	r3, [pc, #40]	@ (80069bc <vTaskPlaceOnEventListRestricted+0x54>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3318      	adds	r3, #24
 8006998:	4619      	mov	r1, r3
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f7fe fe25 	bl	80055ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80069a6:	f04f 33ff 	mov.w	r3, #4294967295
 80069aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	68b8      	ldr	r0, [r7, #8]
 80069b0:	f000 fa54 	bl	8006e5c <prvAddCurrentTaskToDelayedList>
	}
 80069b4:	bf00      	nop
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20000d24 	.word	0x20000d24

080069c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10b      	bne.n	80069ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	60fb      	str	r3, [r7, #12]
}
 80069e8:	bf00      	nop
 80069ea:	bf00      	nop
 80069ec:	e7fd      	b.n	80069ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	3318      	adds	r3, #24
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fe fe56 	bl	80056a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006a70 <xTaskRemoveFromEventList+0xb0>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d11d      	bne.n	8006a3c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	3304      	adds	r3, #4
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fe fe4d 	bl	80056a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a0e:	4b19      	ldr	r3, [pc, #100]	@ (8006a74 <xTaskRemoveFromEventList+0xb4>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d903      	bls.n	8006a1e <xTaskRemoveFromEventList+0x5e>
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1a:	4a16      	ldr	r2, [pc, #88]	@ (8006a74 <xTaskRemoveFromEventList+0xb4>)
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4a13      	ldr	r2, [pc, #76]	@ (8006a78 <xTaskRemoveFromEventList+0xb8>)
 8006a2c:	441a      	add	r2, r3
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	3304      	adds	r3, #4
 8006a32:	4619      	mov	r1, r3
 8006a34:	4610      	mov	r0, r2
 8006a36:	f7fe fdd8 	bl	80055ea <vListInsertEnd>
 8006a3a:	e005      	b.n	8006a48 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	3318      	adds	r3, #24
 8006a40:	4619      	mov	r1, r3
 8006a42:	480e      	ldr	r0, [pc, #56]	@ (8006a7c <xTaskRemoveFromEventList+0xbc>)
 8006a44:	f7fe fdd1 	bl	80055ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a80 <xTaskRemoveFromEventList+0xc0>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d905      	bls.n	8006a62 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a56:	2301      	movs	r3, #1
 8006a58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a84 <xTaskRemoveFromEventList+0xc4>)
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	e001      	b.n	8006a66 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006a62:	2300      	movs	r3, #0
 8006a64:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a66:	697b      	ldr	r3, [r7, #20]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	20001220 	.word	0x20001220
 8006a74:	20001200 	.word	0x20001200
 8006a78:	20000d28 	.word	0x20000d28
 8006a7c:	200011b8 	.word	0x200011b8
 8006a80:	20000d24 	.word	0x20000d24
 8006a84:	2000120c 	.word	0x2000120c

08006a88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a90:	4b06      	ldr	r3, [pc, #24]	@ (8006aac <vTaskInternalSetTimeOutState+0x24>)
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a98:	4b05      	ldr	r3, [pc, #20]	@ (8006ab0 <vTaskInternalSetTimeOutState+0x28>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	605a      	str	r2, [r3, #4]
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	20001210 	.word	0x20001210
 8006ab0:	200011fc 	.word	0x200011fc

08006ab4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10b      	bne.n	8006adc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	613b      	str	r3, [r7, #16]
}
 8006ad6:	bf00      	nop
 8006ad8:	bf00      	nop
 8006ada:	e7fd      	b.n	8006ad8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10b      	bne.n	8006afa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	60fb      	str	r3, [r7, #12]
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop
 8006af8:	e7fd      	b.n	8006af6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006afa:	f000 feed 	bl	80078d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006afe:	4b1d      	ldr	r3, [pc, #116]	@ (8006b74 <xTaskCheckForTimeOut+0xc0>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d102      	bne.n	8006b1e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	61fb      	str	r3, [r7, #28]
 8006b1c:	e023      	b.n	8006b66 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	4b15      	ldr	r3, [pc, #84]	@ (8006b78 <xTaskCheckForTimeOut+0xc4>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d007      	beq.n	8006b3a <xTaskCheckForTimeOut+0x86>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d302      	bcc.n	8006b3a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b34:	2301      	movs	r3, #1
 8006b36:	61fb      	str	r3, [r7, #28]
 8006b38:	e015      	b.n	8006b66 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d20b      	bcs.n	8006b5c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	1ad2      	subs	r2, r2, r3
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff ff99 	bl	8006a88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	61fb      	str	r3, [r7, #28]
 8006b5a:	e004      	b.n	8006b66 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b62:	2301      	movs	r3, #1
 8006b64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b66:	f000 fee9 	bl	800793c <vPortExitCritical>

	return xReturn;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	200011fc 	.word	0x200011fc
 8006b78:	20001210 	.word	0x20001210

08006b7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b80:	4b03      	ldr	r3, [pc, #12]	@ (8006b90 <vTaskMissedYield+0x14>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	601a      	str	r2, [r3, #0]
}
 8006b86:	bf00      	nop
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	2000120c 	.word	0x2000120c

08006b94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b9c:	f000 f852 	bl	8006c44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ba0:	4b06      	ldr	r3, [pc, #24]	@ (8006bbc <prvIdleTask+0x28>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d9f9      	bls.n	8006b9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ba8:	4b05      	ldr	r3, [pc, #20]	@ (8006bc0 <prvIdleTask+0x2c>)
 8006baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bae:	601a      	str	r2, [r3, #0]
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bb8:	e7f0      	b.n	8006b9c <prvIdleTask+0x8>
 8006bba:	bf00      	nop
 8006bbc:	20000d28 	.word	0x20000d28
 8006bc0:	e000ed04 	.word	0xe000ed04

08006bc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	e00c      	b.n	8006bea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4a12      	ldr	r2, [pc, #72]	@ (8006c24 <prvInitialiseTaskLists+0x60>)
 8006bdc:	4413      	add	r3, r2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fcd6 	bl	8005590 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3301      	adds	r3, #1
 8006be8:	607b      	str	r3, [r7, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b37      	cmp	r3, #55	@ 0x37
 8006bee:	d9ef      	bls.n	8006bd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bf0:	480d      	ldr	r0, [pc, #52]	@ (8006c28 <prvInitialiseTaskLists+0x64>)
 8006bf2:	f7fe fccd 	bl	8005590 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bf6:	480d      	ldr	r0, [pc, #52]	@ (8006c2c <prvInitialiseTaskLists+0x68>)
 8006bf8:	f7fe fcca 	bl	8005590 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bfc:	480c      	ldr	r0, [pc, #48]	@ (8006c30 <prvInitialiseTaskLists+0x6c>)
 8006bfe:	f7fe fcc7 	bl	8005590 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c02:	480c      	ldr	r0, [pc, #48]	@ (8006c34 <prvInitialiseTaskLists+0x70>)
 8006c04:	f7fe fcc4 	bl	8005590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c08:	480b      	ldr	r0, [pc, #44]	@ (8006c38 <prvInitialiseTaskLists+0x74>)
 8006c0a:	f7fe fcc1 	bl	8005590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c3c <prvInitialiseTaskLists+0x78>)
 8006c10:	4a05      	ldr	r2, [pc, #20]	@ (8006c28 <prvInitialiseTaskLists+0x64>)
 8006c12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c14:	4b0a      	ldr	r3, [pc, #40]	@ (8006c40 <prvInitialiseTaskLists+0x7c>)
 8006c16:	4a05      	ldr	r2, [pc, #20]	@ (8006c2c <prvInitialiseTaskLists+0x68>)
 8006c18:	601a      	str	r2, [r3, #0]
}
 8006c1a:	bf00      	nop
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20000d28 	.word	0x20000d28
 8006c28:	20001188 	.word	0x20001188
 8006c2c:	2000119c 	.word	0x2000119c
 8006c30:	200011b8 	.word	0x200011b8
 8006c34:	200011cc 	.word	0x200011cc
 8006c38:	200011e4 	.word	0x200011e4
 8006c3c:	200011b0 	.word	0x200011b0
 8006c40:	200011b4 	.word	0x200011b4

08006c44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c4a:	e019      	b.n	8006c80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c4c:	f000 fe44 	bl	80078d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c50:	4b10      	ldr	r3, [pc, #64]	@ (8006c94 <prvCheckTasksWaitingTermination+0x50>)
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fd21 	bl	80056a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c62:	4b0d      	ldr	r3, [pc, #52]	@ (8006c98 <prvCheckTasksWaitingTermination+0x54>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	4a0b      	ldr	r2, [pc, #44]	@ (8006c98 <prvCheckTasksWaitingTermination+0x54>)
 8006c6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006c9c <prvCheckTasksWaitingTermination+0x58>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	4a0a      	ldr	r2, [pc, #40]	@ (8006c9c <prvCheckTasksWaitingTermination+0x58>)
 8006c74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c76:	f000 fe61 	bl	800793c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f810 	bl	8006ca0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c80:	4b06      	ldr	r3, [pc, #24]	@ (8006c9c <prvCheckTasksWaitingTermination+0x58>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e1      	bne.n	8006c4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	200011cc 	.word	0x200011cc
 8006c98:	200011f8 	.word	0x200011f8
 8006c9c:	200011e0 	.word	0x200011e0

08006ca0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d108      	bne.n	8006cc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fffe 	bl	8007cb8 <vPortFree>
				vPortFree( pxTCB );
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fffb 	bl	8007cb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cc2:	e019      	b.n	8006cf8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d103      	bne.n	8006cd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fff2 	bl	8007cb8 <vPortFree>
	}
 8006cd4:	e010      	b.n	8006cf8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d00b      	beq.n	8006cf8 <prvDeleteTCB+0x58>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	60fb      	str	r3, [r7, #12]
}
 8006cf2:	bf00      	nop
 8006cf4:	bf00      	nop
 8006cf6:	e7fd      	b.n	8006cf4 <prvDeleteTCB+0x54>
	}
 8006cf8:	bf00      	nop
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d06:	4b0c      	ldr	r3, [pc, #48]	@ (8006d38 <prvResetNextTaskUnblockTime+0x38>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d104      	bne.n	8006d1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d10:	4b0a      	ldr	r3, [pc, #40]	@ (8006d3c <prvResetNextTaskUnblockTime+0x3c>)
 8006d12:	f04f 32ff 	mov.w	r2, #4294967295
 8006d16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d18:	e008      	b.n	8006d2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d1a:	4b07      	ldr	r3, [pc, #28]	@ (8006d38 <prvResetNextTaskUnblockTime+0x38>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	4a04      	ldr	r2, [pc, #16]	@ (8006d3c <prvResetNextTaskUnblockTime+0x3c>)
 8006d2a:	6013      	str	r3, [r2, #0]
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	200011b0 	.word	0x200011b0
 8006d3c:	20001218 	.word	0x20001218

08006d40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d46:	4b0b      	ldr	r3, [pc, #44]	@ (8006d74 <xTaskGetSchedulerState+0x34>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d102      	bne.n	8006d54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	607b      	str	r3, [r7, #4]
 8006d52:	e008      	b.n	8006d66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d54:	4b08      	ldr	r3, [pc, #32]	@ (8006d78 <xTaskGetSchedulerState+0x38>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d102      	bne.n	8006d62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	607b      	str	r3, [r7, #4]
 8006d60:	e001      	b.n	8006d66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d62:	2300      	movs	r3, #0
 8006d64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d66:	687b      	ldr	r3, [r7, #4]
	}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	20001204 	.word	0x20001204
 8006d78:	20001220 	.word	0x20001220

08006d7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d058      	beq.n	8006e44 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d92:	4b2f      	ldr	r3, [pc, #188]	@ (8006e50 <xTaskPriorityDisinherit+0xd4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d00b      	beq.n	8006db4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	60fb      	str	r3, [r7, #12]
}
 8006dae:	bf00      	nop
 8006db0:	bf00      	nop
 8006db2:	e7fd      	b.n	8006db0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10b      	bne.n	8006dd4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	60bb      	str	r3, [r7, #8]
}
 8006dce:	bf00      	nop
 8006dd0:	bf00      	nop
 8006dd2:	e7fd      	b.n	8006dd0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dd8:	1e5a      	subs	r2, r3, #1
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d02c      	beq.n	8006e44 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d128      	bne.n	8006e44 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	3304      	adds	r3, #4
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fe fc54 	bl	80056a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e14:	4b0f      	ldr	r3, [pc, #60]	@ (8006e54 <xTaskPriorityDisinherit+0xd8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d903      	bls.n	8006e24 <xTaskPriorityDisinherit+0xa8>
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e20:	4a0c      	ldr	r2, [pc, #48]	@ (8006e54 <xTaskPriorityDisinherit+0xd8>)
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4a09      	ldr	r2, [pc, #36]	@ (8006e58 <xTaskPriorityDisinherit+0xdc>)
 8006e32:	441a      	add	r2, r3
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	3304      	adds	r3, #4
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	f7fe fbd5 	bl	80055ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e40:	2301      	movs	r3, #1
 8006e42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e44:	697b      	ldr	r3, [r7, #20]
	}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000d24 	.word	0x20000d24
 8006e54:	20001200 	.word	0x20001200
 8006e58:	20000d28 	.word	0x20000d28

08006e5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e66:	4b21      	ldr	r3, [pc, #132]	@ (8006eec <prvAddCurrentTaskToDelayedList+0x90>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e6c:	4b20      	ldr	r3, [pc, #128]	@ (8006ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3304      	adds	r3, #4
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe fc16 	bl	80056a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7e:	d10a      	bne.n	8006e96 <prvAddCurrentTaskToDelayedList+0x3a>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d007      	beq.n	8006e96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e86:	4b1a      	ldr	r3, [pc, #104]	@ (8006ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4819      	ldr	r0, [pc, #100]	@ (8006ef4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006e90:	f7fe fbab 	bl	80055ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e94:	e026      	b.n	8006ee4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e9e:	4b14      	ldr	r3, [pc, #80]	@ (8006ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d209      	bcs.n	8006ec2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eae:	4b12      	ldr	r3, [pc, #72]	@ (8006ef8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	f7fe fbb9 	bl	8005632 <vListInsert>
}
 8006ec0:	e010      	b.n	8006ee4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8006efc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f7fe fbaf 	bl	8005632 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8006f00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d202      	bcs.n	8006ee4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ede:	4a08      	ldr	r2, [pc, #32]	@ (8006f00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	6013      	str	r3, [r2, #0]
}
 8006ee4:	bf00      	nop
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	200011fc 	.word	0x200011fc
 8006ef0:	20000d24 	.word	0x20000d24
 8006ef4:	200011e4 	.word	0x200011e4
 8006ef8:	200011b4 	.word	0x200011b4
 8006efc:	200011b0 	.word	0x200011b0
 8006f00:	20001218 	.word	0x20001218

08006f04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08a      	sub	sp, #40	@ 0x28
 8006f08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f0e:	f000 fb71 	bl	80075f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f12:	4b1d      	ldr	r3, [pc, #116]	@ (8006f88 <xTimerCreateTimerTask+0x84>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d021      	beq.n	8006f5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f22:	1d3a      	adds	r2, r7, #4
 8006f24:	f107 0108 	add.w	r1, r7, #8
 8006f28:	f107 030c 	add.w	r3, r7, #12
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe fb15 	bl	800555c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	9202      	str	r2, [sp, #8]
 8006f3a:	9301      	str	r3, [sp, #4]
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	2300      	movs	r3, #0
 8006f42:	460a      	mov	r2, r1
 8006f44:	4911      	ldr	r1, [pc, #68]	@ (8006f8c <xTimerCreateTimerTask+0x88>)
 8006f46:	4812      	ldr	r0, [pc, #72]	@ (8006f90 <xTimerCreateTimerTask+0x8c>)
 8006f48:	f7ff f8d0 	bl	80060ec <xTaskCreateStatic>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	4a11      	ldr	r2, [pc, #68]	@ (8006f94 <xTimerCreateTimerTask+0x90>)
 8006f50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f52:	4b10      	ldr	r3, [pc, #64]	@ (8006f94 <xTimerCreateTimerTask+0x90>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10b      	bne.n	8006f7c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	613b      	str	r3, [r7, #16]
}
 8006f76:	bf00      	nop
 8006f78:	bf00      	nop
 8006f7a:	e7fd      	b.n	8006f78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f7c:	697b      	ldr	r3, [r7, #20]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20001254 	.word	0x20001254
 8006f8c:	080088d8 	.word	0x080088d8
 8006f90:	0800718d 	.word	0x0800718d
 8006f94:	20001258 	.word	0x20001258

08006f98 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b088      	sub	sp, #32
 8006f9c:	af02      	add	r7, sp, #8
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006fa6:	202c      	movs	r0, #44	@ 0x2c
 8006fa8:	f000 fdb8 	bl	8007b1c <pvPortMalloc>
 8006fac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00d      	beq.n	8006fd0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	9301      	str	r3, [sp, #4]
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	68b9      	ldr	r1, [r7, #8]
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 f805 	bl	8006fda <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006fd0:	697b      	ldr	r3, [r7, #20]
	}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b086      	sub	sp, #24
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	607a      	str	r2, [r7, #4]
 8006fe6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10b      	bne.n	8007006 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	617b      	str	r3, [r7, #20]
}
 8007000:	bf00      	nop
 8007002:	bf00      	nop
 8007004:	e7fd      	b.n	8007002 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01e      	beq.n	800704a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800700c:	f000 faf2 	bl	80075f4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800701c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007024:	6a3a      	ldr	r2, [r7, #32]
 8007026:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702a:	3304      	adds	r3, #4
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe facf 	bl	80055d0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d008      	beq.n	800704a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800703e:	f043 0304 	orr.w	r3, r3, #4
 8007042:	b2da      	uxtb	r2, r3
 8007044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007046:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800704a:	bf00      	nop
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08a      	sub	sp, #40	@ 0x28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007062:	2300      	movs	r3, #0
 8007064:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10b      	bne.n	8007084 <xTimerGenericCommand+0x30>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	623b      	str	r3, [r7, #32]
}
 800707e:	bf00      	nop
 8007080:	bf00      	nop
 8007082:	e7fd      	b.n	8007080 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007084:	4b19      	ldr	r3, [pc, #100]	@ (80070ec <xTimerGenericCommand+0x98>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d02a      	beq.n	80070e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b05      	cmp	r3, #5
 800709c:	dc18      	bgt.n	80070d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800709e:	f7ff fe4f 	bl	8006d40 <xTaskGetSchedulerState>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d109      	bne.n	80070bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070a8:	4b10      	ldr	r3, [pc, #64]	@ (80070ec <xTimerGenericCommand+0x98>)
 80070aa:	6818      	ldr	r0, [r3, #0]
 80070ac:	f107 0110 	add.w	r1, r7, #16
 80070b0:	2300      	movs	r3, #0
 80070b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070b4:	f7fe fc2a 	bl	800590c <xQueueGenericSend>
 80070b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80070ba:	e012      	b.n	80070e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070bc:	4b0b      	ldr	r3, [pc, #44]	@ (80070ec <xTimerGenericCommand+0x98>)
 80070be:	6818      	ldr	r0, [r3, #0]
 80070c0:	f107 0110 	add.w	r1, r7, #16
 80070c4:	2300      	movs	r3, #0
 80070c6:	2200      	movs	r2, #0
 80070c8:	f7fe fc20 	bl	800590c <xQueueGenericSend>
 80070cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80070ce:	e008      	b.n	80070e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070d0:	4b06      	ldr	r3, [pc, #24]	@ (80070ec <xTimerGenericCommand+0x98>)
 80070d2:	6818      	ldr	r0, [r3, #0]
 80070d4:	f107 0110 	add.w	r1, r7, #16
 80070d8:	2300      	movs	r3, #0
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	f7fe fd18 	bl	8005b10 <xQueueGenericSendFromISR>
 80070e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3728      	adds	r7, #40	@ 0x28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20001254 	.word	0x20001254

080070f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070fa:	4b23      	ldr	r3, [pc, #140]	@ (8007188 <prvProcessExpiredTimer+0x98>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	3304      	adds	r3, #4
 8007108:	4618      	mov	r0, r3
 800710a:	f7fe facb 	bl	80056a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d023      	beq.n	8007164 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	699a      	ldr	r2, [r3, #24]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	18d1      	adds	r1, r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	6978      	ldr	r0, [r7, #20]
 800712a:	f000 f8d5 	bl	80072d8 <prvInsertTimerInActiveList>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d020      	beq.n	8007176 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007134:	2300      	movs	r3, #0
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	2300      	movs	r3, #0
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	2100      	movs	r1, #0
 800713e:	6978      	ldr	r0, [r7, #20]
 8007140:	f7ff ff88 	bl	8007054 <xTimerGenericCommand>
 8007144:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d114      	bne.n	8007176 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	60fb      	str	r3, [r7, #12]
}
 800715e:	bf00      	nop
 8007160:	bf00      	nop
 8007162:	e7fd      	b.n	8007160 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800716a:	f023 0301 	bic.w	r3, r3, #1
 800716e:	b2da      	uxtb	r2, r3
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	6978      	ldr	r0, [r7, #20]
 800717c:	4798      	blx	r3
}
 800717e:	bf00      	nop
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	2000124c 	.word	0x2000124c

0800718c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007194:	f107 0308 	add.w	r3, r7, #8
 8007198:	4618      	mov	r0, r3
 800719a:	f000 f859 	bl	8007250 <prvGetNextExpireTime>
 800719e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	4619      	mov	r1, r3
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f805 	bl	80071b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071aa:	f000 f8d7 	bl	800735c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071ae:	bf00      	nop
 80071b0:	e7f0      	b.n	8007194 <prvTimerTask+0x8>
	...

080071b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071be:	f7ff f9d9 	bl	8006574 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071c2:	f107 0308 	add.w	r3, r7, #8
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 f866 	bl	8007298 <prvSampleTimeNow>
 80071cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d130      	bne.n	8007236 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <prvProcessTimerOrBlockTask+0x3c>
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d806      	bhi.n	80071f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80071e2:	f7ff f9d5 	bl	8006590 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071e6:	68f9      	ldr	r1, [r7, #12]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff ff81 	bl	80070f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071ee:	e024      	b.n	800723a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d008      	beq.n	8007208 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071f6:	4b13      	ldr	r3, [pc, #76]	@ (8007244 <prvProcessTimerOrBlockTask+0x90>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <prvProcessTimerOrBlockTask+0x50>
 8007200:	2301      	movs	r3, #1
 8007202:	e000      	b.n	8007206 <prvProcessTimerOrBlockTask+0x52>
 8007204:	2300      	movs	r3, #0
 8007206:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007208:	4b0f      	ldr	r3, [pc, #60]	@ (8007248 <prvProcessTimerOrBlockTask+0x94>)
 800720a:	6818      	ldr	r0, [r3, #0]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	4619      	mov	r1, r3
 8007216:	f7fe ff35 	bl	8006084 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800721a:	f7ff f9b9 	bl	8006590 <xTaskResumeAll>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10a      	bne.n	800723a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007224:	4b09      	ldr	r3, [pc, #36]	@ (800724c <prvProcessTimerOrBlockTask+0x98>)
 8007226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	f3bf 8f6f 	isb	sy
}
 8007234:	e001      	b.n	800723a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007236:	f7ff f9ab 	bl	8006590 <xTaskResumeAll>
}
 800723a:	bf00      	nop
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	20001250 	.word	0x20001250
 8007248:	20001254 	.word	0x20001254
 800724c:	e000ed04 	.word	0xe000ed04

08007250 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007258:	4b0e      	ldr	r3, [pc, #56]	@ (8007294 <prvGetNextExpireTime+0x44>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <prvGetNextExpireTime+0x16>
 8007262:	2201      	movs	r2, #1
 8007264:	e000      	b.n	8007268 <prvGetNextExpireTime+0x18>
 8007266:	2200      	movs	r2, #0
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d105      	bne.n	8007280 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007274:	4b07      	ldr	r3, [pc, #28]	@ (8007294 <prvGetNextExpireTime+0x44>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	60fb      	str	r3, [r7, #12]
 800727e:	e001      	b.n	8007284 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007284:	68fb      	ldr	r3, [r7, #12]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	2000124c 	.word	0x2000124c

08007298 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072a0:	f7ff fa14 	bl	80066cc <xTaskGetTickCount>
 80072a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072a6:	4b0b      	ldr	r3, [pc, #44]	@ (80072d4 <prvSampleTimeNow+0x3c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d205      	bcs.n	80072bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072b0:	f000 f93a 	bl	8007528 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	e002      	b.n	80072c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072c2:	4a04      	ldr	r2, [pc, #16]	@ (80072d4 <prvSampleTimeNow+0x3c>)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072c8:	68fb      	ldr	r3, [r7, #12]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	2000125c 	.word	0x2000125c

080072d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072e6:	2300      	movs	r3, #0
 80072e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d812      	bhi.n	8007324 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	1ad2      	subs	r2, r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	429a      	cmp	r2, r3
 800730a:	d302      	bcc.n	8007312 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800730c:	2301      	movs	r3, #1
 800730e:	617b      	str	r3, [r7, #20]
 8007310:	e01b      	b.n	800734a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007312:	4b10      	ldr	r3, [pc, #64]	@ (8007354 <prvInsertTimerInActiveList+0x7c>)
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3304      	adds	r3, #4
 800731a:	4619      	mov	r1, r3
 800731c:	4610      	mov	r0, r2
 800731e:	f7fe f988 	bl	8005632 <vListInsert>
 8007322:	e012      	b.n	800734a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d206      	bcs.n	800733a <prvInsertTimerInActiveList+0x62>
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	429a      	cmp	r2, r3
 8007332:	d302      	bcc.n	800733a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007334:	2301      	movs	r3, #1
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	e007      	b.n	800734a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800733a:	4b07      	ldr	r3, [pc, #28]	@ (8007358 <prvInsertTimerInActiveList+0x80>)
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3304      	adds	r3, #4
 8007342:	4619      	mov	r1, r3
 8007344:	4610      	mov	r0, r2
 8007346:	f7fe f974 	bl	8005632 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800734a:	697b      	ldr	r3, [r7, #20]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	20001250 	.word	0x20001250
 8007358:	2000124c 	.word	0x2000124c

0800735c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08e      	sub	sp, #56	@ 0x38
 8007360:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007362:	e0ce      	b.n	8007502 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	da19      	bge.n	800739e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800736a:	1d3b      	adds	r3, r7, #4
 800736c:	3304      	adds	r3, #4
 800736e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10b      	bne.n	800738e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	61fb      	str	r3, [r7, #28]
}
 8007388:	bf00      	nop
 800738a:	bf00      	nop
 800738c:	e7fd      	b.n	800738a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800738e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007394:	6850      	ldr	r0, [r2, #4]
 8007396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007398:	6892      	ldr	r2, [r2, #8]
 800739a:	4611      	mov	r1, r2
 800739c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f2c0 80ae 	blt.w	8007502 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d004      	beq.n	80073bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b4:	3304      	adds	r3, #4
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe f974 	bl	80056a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073bc:	463b      	mov	r3, r7
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff ff6a 	bl	8007298 <prvSampleTimeNow>
 80073c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b09      	cmp	r3, #9
 80073ca:	f200 8097 	bhi.w	80074fc <prvProcessReceivedCommands+0x1a0>
 80073ce:	a201      	add	r2, pc, #4	@ (adr r2, 80073d4 <prvProcessReceivedCommands+0x78>)
 80073d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d4:	080073fd 	.word	0x080073fd
 80073d8:	080073fd 	.word	0x080073fd
 80073dc:	080073fd 	.word	0x080073fd
 80073e0:	08007473 	.word	0x08007473
 80073e4:	08007487 	.word	0x08007487
 80073e8:	080074d3 	.word	0x080074d3
 80073ec:	080073fd 	.word	0x080073fd
 80073f0:	080073fd 	.word	0x080073fd
 80073f4:	08007473 	.word	0x08007473
 80073f8:	08007487 	.word	0x08007487
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007402:	f043 0301 	orr.w	r3, r3, #1
 8007406:	b2da      	uxtb	r2, r3
 8007408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	18d1      	adds	r1, r2, r3
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800741a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800741c:	f7ff ff5c 	bl	80072d8 <prvInsertTimerInActiveList>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d06c      	beq.n	8007500 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800742c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800742e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007430:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007434:	f003 0304 	and.w	r3, r3, #4
 8007438:	2b00      	cmp	r3, #0
 800743a:	d061      	beq.n	8007500 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	441a      	add	r2, r3
 8007444:	2300      	movs	r3, #0
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	2300      	movs	r3, #0
 800744a:	2100      	movs	r1, #0
 800744c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800744e:	f7ff fe01 	bl	8007054 <xTimerGenericCommand>
 8007452:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d152      	bne.n	8007500 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	61bb      	str	r3, [r7, #24]
}
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	e7fd      	b.n	800746e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007474:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007478:	f023 0301 	bic.w	r3, r3, #1
 800747c:	b2da      	uxtb	r2, r3
 800747e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007480:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007484:	e03d      	b.n	8007502 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800748c:	f043 0301 	orr.w	r3, r3, #1
 8007490:	b2da      	uxtb	r2, r3
 8007492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007494:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800749e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10b      	bne.n	80074be <prvProcessReceivedCommands+0x162>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	617b      	str	r3, [r7, #20]
}
 80074b8:	bf00      	nop
 80074ba:	bf00      	nop
 80074bc:	e7fd      	b.n	80074ba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c0:	699a      	ldr	r2, [r3, #24]
 80074c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c4:	18d1      	adds	r1, r2, r3
 80074c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074cc:	f7ff ff04 	bl	80072d8 <prvInsertTimerInActiveList>
					break;
 80074d0:	e017      	b.n	8007502 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d103      	bne.n	80074e8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80074e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074e2:	f000 fbe9 	bl	8007cb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074e6:	e00c      	b.n	8007502 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074ee:	f023 0301 	bic.w	r3, r3, #1
 80074f2:	b2da      	uxtb	r2, r3
 80074f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80074fa:	e002      	b.n	8007502 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80074fc:	bf00      	nop
 80074fe:	e000      	b.n	8007502 <prvProcessReceivedCommands+0x1a6>
					break;
 8007500:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007502:	4b08      	ldr	r3, [pc, #32]	@ (8007524 <prvProcessReceivedCommands+0x1c8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	1d39      	adds	r1, r7, #4
 8007508:	2200      	movs	r2, #0
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe fb9e 	bl	8005c4c <xQueueReceive>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	f47f af26 	bne.w	8007364 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	3730      	adds	r7, #48	@ 0x30
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20001254 	.word	0x20001254

08007528 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b088      	sub	sp, #32
 800752c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800752e:	e049      	b.n	80075c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007530:	4b2e      	ldr	r3, [pc, #184]	@ (80075ec <prvSwitchTimerLists+0xc4>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800753a:	4b2c      	ldr	r3, [pc, #176]	@ (80075ec <prvSwitchTimerLists+0xc4>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	3304      	adds	r3, #4
 8007548:	4618      	mov	r0, r3
 800754a:	f7fe f8ab 	bl	80056a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d02f      	beq.n	80075c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4413      	add	r3, r2
 800756c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	429a      	cmp	r2, r3
 8007574:	d90e      	bls.n	8007594 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007582:	4b1a      	ldr	r3, [pc, #104]	@ (80075ec <prvSwitchTimerLists+0xc4>)
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	3304      	adds	r3, #4
 800758a:	4619      	mov	r1, r3
 800758c:	4610      	mov	r0, r2
 800758e:	f7fe f850 	bl	8005632 <vListInsert>
 8007592:	e017      	b.n	80075c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007594:	2300      	movs	r3, #0
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	2300      	movs	r3, #0
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	2100      	movs	r1, #0
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f7ff fd58 	bl	8007054 <xTimerGenericCommand>
 80075a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10b      	bne.n	80075c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	603b      	str	r3, [r7, #0]
}
 80075be:	bf00      	nop
 80075c0:	bf00      	nop
 80075c2:	e7fd      	b.n	80075c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075c4:	4b09      	ldr	r3, [pc, #36]	@ (80075ec <prvSwitchTimerLists+0xc4>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1b0      	bne.n	8007530 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075ce:	4b07      	ldr	r3, [pc, #28]	@ (80075ec <prvSwitchTimerLists+0xc4>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075d4:	4b06      	ldr	r3, [pc, #24]	@ (80075f0 <prvSwitchTimerLists+0xc8>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a04      	ldr	r2, [pc, #16]	@ (80075ec <prvSwitchTimerLists+0xc4>)
 80075da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075dc:	4a04      	ldr	r2, [pc, #16]	@ (80075f0 <prvSwitchTimerLists+0xc8>)
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	6013      	str	r3, [r2, #0]
}
 80075e2:	bf00      	nop
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	2000124c 	.word	0x2000124c
 80075f0:	20001250 	.word	0x20001250

080075f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80075fa:	f000 f96d 	bl	80078d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80075fe:	4b15      	ldr	r3, [pc, #84]	@ (8007654 <prvCheckForValidListAndQueue+0x60>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d120      	bne.n	8007648 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007606:	4814      	ldr	r0, [pc, #80]	@ (8007658 <prvCheckForValidListAndQueue+0x64>)
 8007608:	f7fd ffc2 	bl	8005590 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800760c:	4813      	ldr	r0, [pc, #76]	@ (800765c <prvCheckForValidListAndQueue+0x68>)
 800760e:	f7fd ffbf 	bl	8005590 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007612:	4b13      	ldr	r3, [pc, #76]	@ (8007660 <prvCheckForValidListAndQueue+0x6c>)
 8007614:	4a10      	ldr	r2, [pc, #64]	@ (8007658 <prvCheckForValidListAndQueue+0x64>)
 8007616:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007618:	4b12      	ldr	r3, [pc, #72]	@ (8007664 <prvCheckForValidListAndQueue+0x70>)
 800761a:	4a10      	ldr	r2, [pc, #64]	@ (800765c <prvCheckForValidListAndQueue+0x68>)
 800761c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800761e:	2300      	movs	r3, #0
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	4b11      	ldr	r3, [pc, #68]	@ (8007668 <prvCheckForValidListAndQueue+0x74>)
 8007624:	4a11      	ldr	r2, [pc, #68]	@ (800766c <prvCheckForValidListAndQueue+0x78>)
 8007626:	2110      	movs	r1, #16
 8007628:	200a      	movs	r0, #10
 800762a:	f7fe f8cf 	bl	80057cc <xQueueGenericCreateStatic>
 800762e:	4603      	mov	r3, r0
 8007630:	4a08      	ldr	r2, [pc, #32]	@ (8007654 <prvCheckForValidListAndQueue+0x60>)
 8007632:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007634:	4b07      	ldr	r3, [pc, #28]	@ (8007654 <prvCheckForValidListAndQueue+0x60>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d005      	beq.n	8007648 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800763c:	4b05      	ldr	r3, [pc, #20]	@ (8007654 <prvCheckForValidListAndQueue+0x60>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	490b      	ldr	r1, [pc, #44]	@ (8007670 <prvCheckForValidListAndQueue+0x7c>)
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fcf4 	bl	8006030 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007648:	f000 f978 	bl	800793c <vPortExitCritical>
}
 800764c:	bf00      	nop
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	20001254 	.word	0x20001254
 8007658:	20001224 	.word	0x20001224
 800765c:	20001238 	.word	0x20001238
 8007660:	2000124c 	.word	0x2000124c
 8007664:	20001250 	.word	0x20001250
 8007668:	20001300 	.word	0x20001300
 800766c:	20001260 	.word	0x20001260
 8007670:	080088e0 	.word	0x080088e0

08007674 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3b04      	subs	r3, #4
 8007684:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800768c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3b04      	subs	r3, #4
 8007692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f023 0201 	bic.w	r2, r3, #1
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3b04      	subs	r3, #4
 80076a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076a4:	4a0c      	ldr	r2, [pc, #48]	@ (80076d8 <pxPortInitialiseStack+0x64>)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3b14      	subs	r3, #20
 80076ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3b04      	subs	r3, #4
 80076ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f06f 0202 	mvn.w	r2, #2
 80076c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3b20      	subs	r3, #32
 80076c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076ca:	68fb      	ldr	r3, [r7, #12]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	080076dd 	.word	0x080076dd

080076dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076e6:	4b13      	ldr	r3, [pc, #76]	@ (8007734 <prvTaskExitError+0x58>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ee:	d00b      	beq.n	8007708 <prvTaskExitError+0x2c>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60fb      	str	r3, [r7, #12]
}
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	e7fd      	b.n	8007704 <prvTaskExitError+0x28>
	__asm volatile
 8007708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	60bb      	str	r3, [r7, #8]
}
 800771a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800771c:	bf00      	nop
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d0fc      	beq.n	800771e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	20000018 	.word	0x20000018
	...

08007740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007740:	4b07      	ldr	r3, [pc, #28]	@ (8007760 <pxCurrentTCBConst2>)
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	6808      	ldr	r0, [r1, #0]
 8007746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774a:	f380 8809 	msr	PSP, r0
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f04f 0000 	mov.w	r0, #0
 8007756:	f380 8811 	msr	BASEPRI, r0
 800775a:	4770      	bx	lr
 800775c:	f3af 8000 	nop.w

08007760 <pxCurrentTCBConst2>:
 8007760:	20000d24 	.word	0x20000d24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007768:	4808      	ldr	r0, [pc, #32]	@ (800778c <prvPortStartFirstTask+0x24>)
 800776a:	6800      	ldr	r0, [r0, #0]
 800776c:	6800      	ldr	r0, [r0, #0]
 800776e:	f380 8808 	msr	MSP, r0
 8007772:	f04f 0000 	mov.w	r0, #0
 8007776:	f380 8814 	msr	CONTROL, r0
 800777a:	b662      	cpsie	i
 800777c:	b661      	cpsie	f
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	df00      	svc	0
 8007788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800778a:	bf00      	nop
 800778c:	e000ed08 	.word	0xe000ed08

08007790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007796:	4b47      	ldr	r3, [pc, #284]	@ (80078b4 <xPortStartScheduler+0x124>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a47      	ldr	r2, [pc, #284]	@ (80078b8 <xPortStartScheduler+0x128>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d10b      	bne.n	80077b8 <xPortStartScheduler+0x28>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	613b      	str	r3, [r7, #16]
}
 80077b2:	bf00      	nop
 80077b4:	bf00      	nop
 80077b6:	e7fd      	b.n	80077b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077b8:	4b3e      	ldr	r3, [pc, #248]	@ (80078b4 <xPortStartScheduler+0x124>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a3f      	ldr	r2, [pc, #252]	@ (80078bc <xPortStartScheduler+0x12c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d10b      	bne.n	80077da <xPortStartScheduler+0x4a>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	60fb      	str	r3, [r7, #12]
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	e7fd      	b.n	80077d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077da:	4b39      	ldr	r3, [pc, #228]	@ (80078c0 <xPortStartScheduler+0x130>)
 80077dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	22ff      	movs	r2, #255	@ 0xff
 80077ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	4b31      	ldr	r3, [pc, #196]	@ (80078c4 <xPortStartScheduler+0x134>)
 8007800:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007802:	4b31      	ldr	r3, [pc, #196]	@ (80078c8 <xPortStartScheduler+0x138>)
 8007804:	2207      	movs	r2, #7
 8007806:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007808:	e009      	b.n	800781e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800780a:	4b2f      	ldr	r3, [pc, #188]	@ (80078c8 <xPortStartScheduler+0x138>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3b01      	subs	r3, #1
 8007810:	4a2d      	ldr	r2, [pc, #180]	@ (80078c8 <xPortStartScheduler+0x138>)
 8007812:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007814:	78fb      	ldrb	r3, [r7, #3]
 8007816:	b2db      	uxtb	r3, r3
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	b2db      	uxtb	r3, r3
 800781c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	b2db      	uxtb	r3, r3
 8007822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007826:	2b80      	cmp	r3, #128	@ 0x80
 8007828:	d0ef      	beq.n	800780a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800782a:	4b27      	ldr	r3, [pc, #156]	@ (80078c8 <xPortStartScheduler+0x138>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f1c3 0307 	rsb	r3, r3, #7
 8007832:	2b04      	cmp	r3, #4
 8007834:	d00b      	beq.n	800784e <xPortStartScheduler+0xbe>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	60bb      	str	r3, [r7, #8]
}
 8007848:	bf00      	nop
 800784a:	bf00      	nop
 800784c:	e7fd      	b.n	800784a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800784e:	4b1e      	ldr	r3, [pc, #120]	@ (80078c8 <xPortStartScheduler+0x138>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	4a1c      	ldr	r2, [pc, #112]	@ (80078c8 <xPortStartScheduler+0x138>)
 8007856:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007858:	4b1b      	ldr	r3, [pc, #108]	@ (80078c8 <xPortStartScheduler+0x138>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007860:	4a19      	ldr	r2, [pc, #100]	@ (80078c8 <xPortStartScheduler+0x138>)
 8007862:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	b2da      	uxtb	r2, r3
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800786c:	4b17      	ldr	r3, [pc, #92]	@ (80078cc <xPortStartScheduler+0x13c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a16      	ldr	r2, [pc, #88]	@ (80078cc <xPortStartScheduler+0x13c>)
 8007872:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007876:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007878:	4b14      	ldr	r3, [pc, #80]	@ (80078cc <xPortStartScheduler+0x13c>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a13      	ldr	r2, [pc, #76]	@ (80078cc <xPortStartScheduler+0x13c>)
 800787e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007882:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007884:	f000 f8da 	bl	8007a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007888:	4b11      	ldr	r3, [pc, #68]	@ (80078d0 <xPortStartScheduler+0x140>)
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800788e:	f000 f8f9 	bl	8007a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007892:	4b10      	ldr	r3, [pc, #64]	@ (80078d4 <xPortStartScheduler+0x144>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a0f      	ldr	r2, [pc, #60]	@ (80078d4 <xPortStartScheduler+0x144>)
 8007898:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800789c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800789e:	f7ff ff63 	bl	8007768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078a2:	f7fe ffdd 	bl	8006860 <vTaskSwitchContext>
	prvTaskExitError();
 80078a6:	f7ff ff19 	bl	80076dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	e000ed00 	.word	0xe000ed00
 80078b8:	410fc271 	.word	0x410fc271
 80078bc:	410fc270 	.word	0x410fc270
 80078c0:	e000e400 	.word	0xe000e400
 80078c4:	20001350 	.word	0x20001350
 80078c8:	20001354 	.word	0x20001354
 80078cc:	e000ed20 	.word	0xe000ed20
 80078d0:	20000018 	.word	0x20000018
 80078d4:	e000ef34 	.word	0xe000ef34

080078d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	607b      	str	r3, [r7, #4]
}
 80078f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078f2:	4b10      	ldr	r3, [pc, #64]	@ (8007934 <vPortEnterCritical+0x5c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3301      	adds	r3, #1
 80078f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007934 <vPortEnterCritical+0x5c>)
 80078fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007934 <vPortEnterCritical+0x5c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d110      	bne.n	8007926 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007904:	4b0c      	ldr	r3, [pc, #48]	@ (8007938 <vPortEnterCritical+0x60>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <vPortEnterCritical+0x4e>
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	603b      	str	r3, [r7, #0]
}
 8007920:	bf00      	nop
 8007922:	bf00      	nop
 8007924:	e7fd      	b.n	8007922 <vPortEnterCritical+0x4a>
	}
}
 8007926:	bf00      	nop
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	20000018 	.word	0x20000018
 8007938:	e000ed04 	.word	0xe000ed04

0800793c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007942:	4b12      	ldr	r3, [pc, #72]	@ (800798c <vPortExitCritical+0x50>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10b      	bne.n	8007962 <vPortExitCritical+0x26>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	607b      	str	r3, [r7, #4]
}
 800795c:	bf00      	nop
 800795e:	bf00      	nop
 8007960:	e7fd      	b.n	800795e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007962:	4b0a      	ldr	r3, [pc, #40]	@ (800798c <vPortExitCritical+0x50>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3b01      	subs	r3, #1
 8007968:	4a08      	ldr	r2, [pc, #32]	@ (800798c <vPortExitCritical+0x50>)
 800796a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800796c:	4b07      	ldr	r3, [pc, #28]	@ (800798c <vPortExitCritical+0x50>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d105      	bne.n	8007980 <vPortExitCritical+0x44>
 8007974:	2300      	movs	r3, #0
 8007976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	f383 8811 	msr	BASEPRI, r3
}
 800797e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	20000018 	.word	0x20000018

08007990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007990:	f3ef 8009 	mrs	r0, PSP
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	4b15      	ldr	r3, [pc, #84]	@ (80079f0 <pxCurrentTCBConst>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	f01e 0f10 	tst.w	lr, #16
 80079a0:	bf08      	it	eq
 80079a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079aa:	6010      	str	r0, [r2, #0]
 80079ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80079b4:	f380 8811 	msr	BASEPRI, r0
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f7fe ff4e 	bl	8006860 <vTaskSwitchContext>
 80079c4:	f04f 0000 	mov.w	r0, #0
 80079c8:	f380 8811 	msr	BASEPRI, r0
 80079cc:	bc09      	pop	{r0, r3}
 80079ce:	6819      	ldr	r1, [r3, #0]
 80079d0:	6808      	ldr	r0, [r1, #0]
 80079d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d6:	f01e 0f10 	tst.w	lr, #16
 80079da:	bf08      	it	eq
 80079dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079e0:	f380 8809 	msr	PSP, r0
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	f3af 8000 	nop.w

080079f0 <pxCurrentTCBConst>:
 80079f0:	20000d24 	.word	0x20000d24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop

080079f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	607b      	str	r3, [r7, #4]
}
 8007a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a12:	f7fe fe6b 	bl	80066ec <xTaskIncrementTick>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a1c:	4b06      	ldr	r3, [pc, #24]	@ (8007a38 <xPortSysTickHandler+0x40>)
 8007a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	2300      	movs	r3, #0
 8007a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	f383 8811 	msr	BASEPRI, r3
}
 8007a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a30:	bf00      	nop
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	e000ed04 	.word	0xe000ed04

08007a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a40:	4b0b      	ldr	r3, [pc, #44]	@ (8007a70 <vPortSetupTimerInterrupt+0x34>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a46:	4b0b      	ldr	r3, [pc, #44]	@ (8007a74 <vPortSetupTimerInterrupt+0x38>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a78 <vPortSetupTimerInterrupt+0x3c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a0a      	ldr	r2, [pc, #40]	@ (8007a7c <vPortSetupTimerInterrupt+0x40>)
 8007a52:	fba2 2303 	umull	r2, r3, r2, r3
 8007a56:	099b      	lsrs	r3, r3, #6
 8007a58:	4a09      	ldr	r2, [pc, #36]	@ (8007a80 <vPortSetupTimerInterrupt+0x44>)
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a5e:	4b04      	ldr	r3, [pc, #16]	@ (8007a70 <vPortSetupTimerInterrupt+0x34>)
 8007a60:	2207      	movs	r2, #7
 8007a62:	601a      	str	r2, [r3, #0]
}
 8007a64:	bf00      	nop
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	e000e010 	.word	0xe000e010
 8007a74:	e000e018 	.word	0xe000e018
 8007a78:	2000000c 	.word	0x2000000c
 8007a7c:	10624dd3 	.word	0x10624dd3
 8007a80:	e000e014 	.word	0xe000e014

08007a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007a94 <vPortEnableVFP+0x10>
 8007a88:	6801      	ldr	r1, [r0, #0]
 8007a8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007a8e:	6001      	str	r1, [r0, #0]
 8007a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a92:	bf00      	nop
 8007a94:	e000ed88 	.word	0xe000ed88

08007a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a9e:	f3ef 8305 	mrs	r3, IPSR
 8007aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b0f      	cmp	r3, #15
 8007aa8:	d915      	bls.n	8007ad6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aaa:	4a18      	ldr	r2, [pc, #96]	@ (8007b0c <vPortValidateInterruptPriority+0x74>)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ab4:	4b16      	ldr	r3, [pc, #88]	@ (8007b10 <vPortValidateInterruptPriority+0x78>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	7afa      	ldrb	r2, [r7, #11]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d20b      	bcs.n	8007ad6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	607b      	str	r3, [r7, #4]
}
 8007ad0:	bf00      	nop
 8007ad2:	bf00      	nop
 8007ad4:	e7fd      	b.n	8007ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b14 <vPortValidateInterruptPriority+0x7c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007ade:	4b0e      	ldr	r3, [pc, #56]	@ (8007b18 <vPortValidateInterruptPriority+0x80>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d90b      	bls.n	8007afe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	603b      	str	r3, [r7, #0]
}
 8007af8:	bf00      	nop
 8007afa:	bf00      	nop
 8007afc:	e7fd      	b.n	8007afa <vPortValidateInterruptPriority+0x62>
	}
 8007afe:	bf00      	nop
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	e000e3f0 	.word	0xe000e3f0
 8007b10:	20001350 	.word	0x20001350
 8007b14:	e000ed0c 	.word	0xe000ed0c
 8007b18:	20001354 	.word	0x20001354

08007b1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08a      	sub	sp, #40	@ 0x28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b24:	2300      	movs	r3, #0
 8007b26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b28:	f7fe fd24 	bl	8006574 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b2c:	4b5c      	ldr	r3, [pc, #368]	@ (8007ca0 <pvPortMalloc+0x184>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b34:	f000 f924 	bl	8007d80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b38:	4b5a      	ldr	r3, [pc, #360]	@ (8007ca4 <pvPortMalloc+0x188>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4013      	ands	r3, r2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f040 8095 	bne.w	8007c70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d01e      	beq.n	8007b8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007b4c:	2208      	movs	r2, #8
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4413      	add	r3, r2
 8007b52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d015      	beq.n	8007b8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f023 0307 	bic.w	r3, r3, #7
 8007b64:	3308      	adds	r3, #8
 8007b66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00b      	beq.n	8007b8a <pvPortMalloc+0x6e>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	617b      	str	r3, [r7, #20]
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop
 8007b88:	e7fd      	b.n	8007b86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d06f      	beq.n	8007c70 <pvPortMalloc+0x154>
 8007b90:	4b45      	ldr	r3, [pc, #276]	@ (8007ca8 <pvPortMalloc+0x18c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d86a      	bhi.n	8007c70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b9a:	4b44      	ldr	r3, [pc, #272]	@ (8007cac <pvPortMalloc+0x190>)
 8007b9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b9e:	4b43      	ldr	r3, [pc, #268]	@ (8007cac <pvPortMalloc+0x190>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ba4:	e004      	b.n	8007bb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d903      	bls.n	8007bc2 <pvPortMalloc+0xa6>
 8007bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1f1      	bne.n	8007ba6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bc2:	4b37      	ldr	r3, [pc, #220]	@ (8007ca0 <pvPortMalloc+0x184>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d051      	beq.n	8007c70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	4413      	add	r3, r2
 8007bd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	1ad2      	subs	r2, r2, r3
 8007be6:	2308      	movs	r3, #8
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d920      	bls.n	8007c30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00b      	beq.n	8007c18 <pvPortMalloc+0xfc>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	613b      	str	r3, [r7, #16]
}
 8007c12:	bf00      	nop
 8007c14:	bf00      	nop
 8007c16:	e7fd      	b.n	8007c14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	1ad2      	subs	r2, r2, r3
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c2a:	69b8      	ldr	r0, [r7, #24]
 8007c2c:	f000 f90a 	bl	8007e44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c30:	4b1d      	ldr	r3, [pc, #116]	@ (8007ca8 <pvPortMalloc+0x18c>)
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ca8 <pvPortMalloc+0x18c>)
 8007c3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ca8 <pvPortMalloc+0x18c>)
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb0 <pvPortMalloc+0x194>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d203      	bcs.n	8007c52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c4a:	4b17      	ldr	r3, [pc, #92]	@ (8007ca8 <pvPortMalloc+0x18c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a18      	ldr	r2, [pc, #96]	@ (8007cb0 <pvPortMalloc+0x194>)
 8007c50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	4b13      	ldr	r3, [pc, #76]	@ (8007ca4 <pvPortMalloc+0x188>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c66:	4b13      	ldr	r3, [pc, #76]	@ (8007cb4 <pvPortMalloc+0x198>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	4a11      	ldr	r2, [pc, #68]	@ (8007cb4 <pvPortMalloc+0x198>)
 8007c6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c70:	f7fe fc8e 	bl	8006590 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	f003 0307 	and.w	r3, r3, #7
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00b      	beq.n	8007c96 <pvPortMalloc+0x17a>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	60fb      	str	r3, [r7, #12]
}
 8007c90:	bf00      	nop
 8007c92:	bf00      	nop
 8007c94:	e7fd      	b.n	8007c92 <pvPortMalloc+0x176>
	return pvReturn;
 8007c96:	69fb      	ldr	r3, [r7, #28]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3728      	adds	r7, #40	@ 0x28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20004f60 	.word	0x20004f60
 8007ca4:	20004f74 	.word	0x20004f74
 8007ca8:	20004f64 	.word	0x20004f64
 8007cac:	20004f58 	.word	0x20004f58
 8007cb0:	20004f68 	.word	0x20004f68
 8007cb4:	20004f6c 	.word	0x20004f6c

08007cb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d04f      	beq.n	8007d6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cca:	2308      	movs	r3, #8
 8007ccc:	425b      	negs	r3, r3
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	4b25      	ldr	r3, [pc, #148]	@ (8007d74 <vPortFree+0xbc>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10b      	bne.n	8007cfe <vPortFree+0x46>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	60fb      	str	r3, [r7, #12]
}
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	e7fd      	b.n	8007cfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00b      	beq.n	8007d1e <vPortFree+0x66>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	60bb      	str	r3, [r7, #8]
}
 8007d18:	bf00      	nop
 8007d1a:	bf00      	nop
 8007d1c:	e7fd      	b.n	8007d1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	4b14      	ldr	r3, [pc, #80]	@ (8007d74 <vPortFree+0xbc>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4013      	ands	r3, r2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d01e      	beq.n	8007d6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d11a      	bne.n	8007d6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	4b0e      	ldr	r3, [pc, #56]	@ (8007d74 <vPortFree+0xbc>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	43db      	mvns	r3, r3
 8007d3e:	401a      	ands	r2, r3
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d44:	f7fe fc16 	bl	8006574 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d78 <vPortFree+0xc0>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4413      	add	r3, r2
 8007d52:	4a09      	ldr	r2, [pc, #36]	@ (8007d78 <vPortFree+0xc0>)
 8007d54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d56:	6938      	ldr	r0, [r7, #16]
 8007d58:	f000 f874 	bl	8007e44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d5c:	4b07      	ldr	r3, [pc, #28]	@ (8007d7c <vPortFree+0xc4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3301      	adds	r3, #1
 8007d62:	4a06      	ldr	r2, [pc, #24]	@ (8007d7c <vPortFree+0xc4>)
 8007d64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d66:	f7fe fc13 	bl	8006590 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d6a:	bf00      	nop
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20004f74 	.word	0x20004f74
 8007d78:	20004f64 	.word	0x20004f64
 8007d7c:	20004f70 	.word	0x20004f70

08007d80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007d8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d8c:	4b27      	ldr	r3, [pc, #156]	@ (8007e2c <prvHeapInit+0xac>)
 8007d8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f003 0307 	and.w	r3, r3, #7
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00c      	beq.n	8007db4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3307      	adds	r3, #7
 8007d9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f023 0307 	bic.w	r3, r3, #7
 8007da6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	4a1f      	ldr	r2, [pc, #124]	@ (8007e2c <prvHeapInit+0xac>)
 8007db0:	4413      	add	r3, r2
 8007db2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007db8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e30 <prvHeapInit+0xb0>)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8007e30 <prvHeapInit+0xb0>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	4413      	add	r3, r2
 8007dca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007dcc:	2208      	movs	r2, #8
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	1a9b      	subs	r3, r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0307 	bic.w	r3, r3, #7
 8007dda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4a15      	ldr	r2, [pc, #84]	@ (8007e34 <prvHeapInit+0xb4>)
 8007de0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007de2:	4b14      	ldr	r3, [pc, #80]	@ (8007e34 <prvHeapInit+0xb4>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2200      	movs	r2, #0
 8007de8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dea:	4b12      	ldr	r3, [pc, #72]	@ (8007e34 <prvHeapInit+0xb4>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2200      	movs	r2, #0
 8007df0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	1ad2      	subs	r2, r2, r3
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e00:	4b0c      	ldr	r3, [pc, #48]	@ (8007e34 <prvHeapInit+0xb4>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e38 <prvHeapInit+0xb8>)
 8007e0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	4a09      	ldr	r2, [pc, #36]	@ (8007e3c <prvHeapInit+0xbc>)
 8007e16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e18:	4b09      	ldr	r3, [pc, #36]	@ (8007e40 <prvHeapInit+0xc0>)
 8007e1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e1e:	601a      	str	r2, [r3, #0]
}
 8007e20:	bf00      	nop
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	20001358 	.word	0x20001358
 8007e30:	20004f58 	.word	0x20004f58
 8007e34:	20004f60 	.word	0x20004f60
 8007e38:	20004f68 	.word	0x20004f68
 8007e3c:	20004f64 	.word	0x20004f64
 8007e40:	20004f74 	.word	0x20004f74

08007e44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e4c:	4b28      	ldr	r3, [pc, #160]	@ (8007ef0 <prvInsertBlockIntoFreeList+0xac>)
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	e002      	b.n	8007e58 <prvInsertBlockIntoFreeList+0x14>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d8f7      	bhi.n	8007e52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d108      	bne.n	8007e86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	441a      	add	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	441a      	add	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d118      	bne.n	8007ecc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	4b15      	ldr	r3, [pc, #84]	@ (8007ef4 <prvInsertBlockIntoFreeList+0xb0>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d00d      	beq.n	8007ec2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	441a      	add	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	601a      	str	r2, [r3, #0]
 8007ec0:	e008      	b.n	8007ed4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef4 <prvInsertBlockIntoFreeList+0xb0>)
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	e003      	b.n	8007ed4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d002      	beq.n	8007ee2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ee2:	bf00      	nop
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	20004f58 	.word	0x20004f58
 8007ef4:	20004f60 	.word	0x20004f60

08007ef8 <siprintf>:
 8007ef8:	b40e      	push	{r1, r2, r3}
 8007efa:	b500      	push	{lr}
 8007efc:	b09c      	sub	sp, #112	@ 0x70
 8007efe:	ab1d      	add	r3, sp, #116	@ 0x74
 8007f00:	9002      	str	r0, [sp, #8]
 8007f02:	9006      	str	r0, [sp, #24]
 8007f04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f08:	4809      	ldr	r0, [pc, #36]	@ (8007f30 <siprintf+0x38>)
 8007f0a:	9107      	str	r1, [sp, #28]
 8007f0c:	9104      	str	r1, [sp, #16]
 8007f0e:	4909      	ldr	r1, [pc, #36]	@ (8007f34 <siprintf+0x3c>)
 8007f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f14:	9105      	str	r1, [sp, #20]
 8007f16:	6800      	ldr	r0, [r0, #0]
 8007f18:	9301      	str	r3, [sp, #4]
 8007f1a:	a902      	add	r1, sp, #8
 8007f1c:	f000 f9a2 	bl	8008264 <_svfiprintf_r>
 8007f20:	9b02      	ldr	r3, [sp, #8]
 8007f22:	2200      	movs	r2, #0
 8007f24:	701a      	strb	r2, [r3, #0]
 8007f26:	b01c      	add	sp, #112	@ 0x70
 8007f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f2c:	b003      	add	sp, #12
 8007f2e:	4770      	bx	lr
 8007f30:	2000001c 	.word	0x2000001c
 8007f34:	ffff0208 	.word	0xffff0208

08007f38 <memset>:
 8007f38:	4402      	add	r2, r0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d100      	bne.n	8007f42 <memset+0xa>
 8007f40:	4770      	bx	lr
 8007f42:	f803 1b01 	strb.w	r1, [r3], #1
 8007f46:	e7f9      	b.n	8007f3c <memset+0x4>

08007f48 <__errno>:
 8007f48:	4b01      	ldr	r3, [pc, #4]	@ (8007f50 <__errno+0x8>)
 8007f4a:	6818      	ldr	r0, [r3, #0]
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	2000001c 	.word	0x2000001c

08007f54 <__libc_init_array>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	4d0d      	ldr	r5, [pc, #52]	@ (8007f8c <__libc_init_array+0x38>)
 8007f58:	4c0d      	ldr	r4, [pc, #52]	@ (8007f90 <__libc_init_array+0x3c>)
 8007f5a:	1b64      	subs	r4, r4, r5
 8007f5c:	10a4      	asrs	r4, r4, #2
 8007f5e:	2600      	movs	r6, #0
 8007f60:	42a6      	cmp	r6, r4
 8007f62:	d109      	bne.n	8007f78 <__libc_init_array+0x24>
 8007f64:	4d0b      	ldr	r5, [pc, #44]	@ (8007f94 <__libc_init_array+0x40>)
 8007f66:	4c0c      	ldr	r4, [pc, #48]	@ (8007f98 <__libc_init_array+0x44>)
 8007f68:	f000 fc66 	bl	8008838 <_init>
 8007f6c:	1b64      	subs	r4, r4, r5
 8007f6e:	10a4      	asrs	r4, r4, #2
 8007f70:	2600      	movs	r6, #0
 8007f72:	42a6      	cmp	r6, r4
 8007f74:	d105      	bne.n	8007f82 <__libc_init_array+0x2e>
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
 8007f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f7c:	4798      	blx	r3
 8007f7e:	3601      	adds	r6, #1
 8007f80:	e7ee      	b.n	8007f60 <__libc_init_array+0xc>
 8007f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f86:	4798      	blx	r3
 8007f88:	3601      	adds	r6, #1
 8007f8a:	e7f2      	b.n	8007f72 <__libc_init_array+0x1e>
 8007f8c:	08009728 	.word	0x08009728
 8007f90:	08009728 	.word	0x08009728
 8007f94:	08009728 	.word	0x08009728
 8007f98:	0800972c 	.word	0x0800972c

08007f9c <__retarget_lock_acquire_recursive>:
 8007f9c:	4770      	bx	lr

08007f9e <__retarget_lock_release_recursive>:
 8007f9e:	4770      	bx	lr

08007fa0 <memcpy>:
 8007fa0:	440a      	add	r2, r1
 8007fa2:	4291      	cmp	r1, r2
 8007fa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fa8:	d100      	bne.n	8007fac <memcpy+0xc>
 8007faa:	4770      	bx	lr
 8007fac:	b510      	push	{r4, lr}
 8007fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fb6:	4291      	cmp	r1, r2
 8007fb8:	d1f9      	bne.n	8007fae <memcpy+0xe>
 8007fba:	bd10      	pop	{r4, pc}

08007fbc <_free_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	4605      	mov	r5, r0
 8007fc0:	2900      	cmp	r1, #0
 8007fc2:	d041      	beq.n	8008048 <_free_r+0x8c>
 8007fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fc8:	1f0c      	subs	r4, r1, #4
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	bfb8      	it	lt
 8007fce:	18e4      	addlt	r4, r4, r3
 8007fd0:	f000 f8e0 	bl	8008194 <__malloc_lock>
 8007fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800804c <_free_r+0x90>)
 8007fd6:	6813      	ldr	r3, [r2, #0]
 8007fd8:	b933      	cbnz	r3, 8007fe8 <_free_r+0x2c>
 8007fda:	6063      	str	r3, [r4, #4]
 8007fdc:	6014      	str	r4, [r2, #0]
 8007fde:	4628      	mov	r0, r5
 8007fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fe4:	f000 b8dc 	b.w	80081a0 <__malloc_unlock>
 8007fe8:	42a3      	cmp	r3, r4
 8007fea:	d908      	bls.n	8007ffe <_free_r+0x42>
 8007fec:	6820      	ldr	r0, [r4, #0]
 8007fee:	1821      	adds	r1, r4, r0
 8007ff0:	428b      	cmp	r3, r1
 8007ff2:	bf01      	itttt	eq
 8007ff4:	6819      	ldreq	r1, [r3, #0]
 8007ff6:	685b      	ldreq	r3, [r3, #4]
 8007ff8:	1809      	addeq	r1, r1, r0
 8007ffa:	6021      	streq	r1, [r4, #0]
 8007ffc:	e7ed      	b.n	8007fda <_free_r+0x1e>
 8007ffe:	461a      	mov	r2, r3
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	b10b      	cbz	r3, 8008008 <_free_r+0x4c>
 8008004:	42a3      	cmp	r3, r4
 8008006:	d9fa      	bls.n	8007ffe <_free_r+0x42>
 8008008:	6811      	ldr	r1, [r2, #0]
 800800a:	1850      	adds	r0, r2, r1
 800800c:	42a0      	cmp	r0, r4
 800800e:	d10b      	bne.n	8008028 <_free_r+0x6c>
 8008010:	6820      	ldr	r0, [r4, #0]
 8008012:	4401      	add	r1, r0
 8008014:	1850      	adds	r0, r2, r1
 8008016:	4283      	cmp	r3, r0
 8008018:	6011      	str	r1, [r2, #0]
 800801a:	d1e0      	bne.n	8007fde <_free_r+0x22>
 800801c:	6818      	ldr	r0, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	6053      	str	r3, [r2, #4]
 8008022:	4408      	add	r0, r1
 8008024:	6010      	str	r0, [r2, #0]
 8008026:	e7da      	b.n	8007fde <_free_r+0x22>
 8008028:	d902      	bls.n	8008030 <_free_r+0x74>
 800802a:	230c      	movs	r3, #12
 800802c:	602b      	str	r3, [r5, #0]
 800802e:	e7d6      	b.n	8007fde <_free_r+0x22>
 8008030:	6820      	ldr	r0, [r4, #0]
 8008032:	1821      	adds	r1, r4, r0
 8008034:	428b      	cmp	r3, r1
 8008036:	bf04      	itt	eq
 8008038:	6819      	ldreq	r1, [r3, #0]
 800803a:	685b      	ldreq	r3, [r3, #4]
 800803c:	6063      	str	r3, [r4, #4]
 800803e:	bf04      	itt	eq
 8008040:	1809      	addeq	r1, r1, r0
 8008042:	6021      	streq	r1, [r4, #0]
 8008044:	6054      	str	r4, [r2, #4]
 8008046:	e7ca      	b.n	8007fde <_free_r+0x22>
 8008048:	bd38      	pop	{r3, r4, r5, pc}
 800804a:	bf00      	nop
 800804c:	200050bc 	.word	0x200050bc

08008050 <sbrk_aligned>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	4e0f      	ldr	r6, [pc, #60]	@ (8008090 <sbrk_aligned+0x40>)
 8008054:	460c      	mov	r4, r1
 8008056:	6831      	ldr	r1, [r6, #0]
 8008058:	4605      	mov	r5, r0
 800805a:	b911      	cbnz	r1, 8008062 <sbrk_aligned+0x12>
 800805c:	f000 fba6 	bl	80087ac <_sbrk_r>
 8008060:	6030      	str	r0, [r6, #0]
 8008062:	4621      	mov	r1, r4
 8008064:	4628      	mov	r0, r5
 8008066:	f000 fba1 	bl	80087ac <_sbrk_r>
 800806a:	1c43      	adds	r3, r0, #1
 800806c:	d103      	bne.n	8008076 <sbrk_aligned+0x26>
 800806e:	f04f 34ff 	mov.w	r4, #4294967295
 8008072:	4620      	mov	r0, r4
 8008074:	bd70      	pop	{r4, r5, r6, pc}
 8008076:	1cc4      	adds	r4, r0, #3
 8008078:	f024 0403 	bic.w	r4, r4, #3
 800807c:	42a0      	cmp	r0, r4
 800807e:	d0f8      	beq.n	8008072 <sbrk_aligned+0x22>
 8008080:	1a21      	subs	r1, r4, r0
 8008082:	4628      	mov	r0, r5
 8008084:	f000 fb92 	bl	80087ac <_sbrk_r>
 8008088:	3001      	adds	r0, #1
 800808a:	d1f2      	bne.n	8008072 <sbrk_aligned+0x22>
 800808c:	e7ef      	b.n	800806e <sbrk_aligned+0x1e>
 800808e:	bf00      	nop
 8008090:	200050b8 	.word	0x200050b8

08008094 <_malloc_r>:
 8008094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008098:	1ccd      	adds	r5, r1, #3
 800809a:	f025 0503 	bic.w	r5, r5, #3
 800809e:	3508      	adds	r5, #8
 80080a0:	2d0c      	cmp	r5, #12
 80080a2:	bf38      	it	cc
 80080a4:	250c      	movcc	r5, #12
 80080a6:	2d00      	cmp	r5, #0
 80080a8:	4606      	mov	r6, r0
 80080aa:	db01      	blt.n	80080b0 <_malloc_r+0x1c>
 80080ac:	42a9      	cmp	r1, r5
 80080ae:	d904      	bls.n	80080ba <_malloc_r+0x26>
 80080b0:	230c      	movs	r3, #12
 80080b2:	6033      	str	r3, [r6, #0]
 80080b4:	2000      	movs	r0, #0
 80080b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008190 <_malloc_r+0xfc>
 80080be:	f000 f869 	bl	8008194 <__malloc_lock>
 80080c2:	f8d8 3000 	ldr.w	r3, [r8]
 80080c6:	461c      	mov	r4, r3
 80080c8:	bb44      	cbnz	r4, 800811c <_malloc_r+0x88>
 80080ca:	4629      	mov	r1, r5
 80080cc:	4630      	mov	r0, r6
 80080ce:	f7ff ffbf 	bl	8008050 <sbrk_aligned>
 80080d2:	1c43      	adds	r3, r0, #1
 80080d4:	4604      	mov	r4, r0
 80080d6:	d158      	bne.n	800818a <_malloc_r+0xf6>
 80080d8:	f8d8 4000 	ldr.w	r4, [r8]
 80080dc:	4627      	mov	r7, r4
 80080de:	2f00      	cmp	r7, #0
 80080e0:	d143      	bne.n	800816a <_malloc_r+0xd6>
 80080e2:	2c00      	cmp	r4, #0
 80080e4:	d04b      	beq.n	800817e <_malloc_r+0xea>
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	4639      	mov	r1, r7
 80080ea:	4630      	mov	r0, r6
 80080ec:	eb04 0903 	add.w	r9, r4, r3
 80080f0:	f000 fb5c 	bl	80087ac <_sbrk_r>
 80080f4:	4581      	cmp	r9, r0
 80080f6:	d142      	bne.n	800817e <_malloc_r+0xea>
 80080f8:	6821      	ldr	r1, [r4, #0]
 80080fa:	1a6d      	subs	r5, r5, r1
 80080fc:	4629      	mov	r1, r5
 80080fe:	4630      	mov	r0, r6
 8008100:	f7ff ffa6 	bl	8008050 <sbrk_aligned>
 8008104:	3001      	adds	r0, #1
 8008106:	d03a      	beq.n	800817e <_malloc_r+0xea>
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	442b      	add	r3, r5
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	f8d8 3000 	ldr.w	r3, [r8]
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	bb62      	cbnz	r2, 8008170 <_malloc_r+0xdc>
 8008116:	f8c8 7000 	str.w	r7, [r8]
 800811a:	e00f      	b.n	800813c <_malloc_r+0xa8>
 800811c:	6822      	ldr	r2, [r4, #0]
 800811e:	1b52      	subs	r2, r2, r5
 8008120:	d420      	bmi.n	8008164 <_malloc_r+0xd0>
 8008122:	2a0b      	cmp	r2, #11
 8008124:	d917      	bls.n	8008156 <_malloc_r+0xc2>
 8008126:	1961      	adds	r1, r4, r5
 8008128:	42a3      	cmp	r3, r4
 800812a:	6025      	str	r5, [r4, #0]
 800812c:	bf18      	it	ne
 800812e:	6059      	strne	r1, [r3, #4]
 8008130:	6863      	ldr	r3, [r4, #4]
 8008132:	bf08      	it	eq
 8008134:	f8c8 1000 	streq.w	r1, [r8]
 8008138:	5162      	str	r2, [r4, r5]
 800813a:	604b      	str	r3, [r1, #4]
 800813c:	4630      	mov	r0, r6
 800813e:	f000 f82f 	bl	80081a0 <__malloc_unlock>
 8008142:	f104 000b 	add.w	r0, r4, #11
 8008146:	1d23      	adds	r3, r4, #4
 8008148:	f020 0007 	bic.w	r0, r0, #7
 800814c:	1ac2      	subs	r2, r0, r3
 800814e:	bf1c      	itt	ne
 8008150:	1a1b      	subne	r3, r3, r0
 8008152:	50a3      	strne	r3, [r4, r2]
 8008154:	e7af      	b.n	80080b6 <_malloc_r+0x22>
 8008156:	6862      	ldr	r2, [r4, #4]
 8008158:	42a3      	cmp	r3, r4
 800815a:	bf0c      	ite	eq
 800815c:	f8c8 2000 	streq.w	r2, [r8]
 8008160:	605a      	strne	r2, [r3, #4]
 8008162:	e7eb      	b.n	800813c <_malloc_r+0xa8>
 8008164:	4623      	mov	r3, r4
 8008166:	6864      	ldr	r4, [r4, #4]
 8008168:	e7ae      	b.n	80080c8 <_malloc_r+0x34>
 800816a:	463c      	mov	r4, r7
 800816c:	687f      	ldr	r7, [r7, #4]
 800816e:	e7b6      	b.n	80080de <_malloc_r+0x4a>
 8008170:	461a      	mov	r2, r3
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	42a3      	cmp	r3, r4
 8008176:	d1fb      	bne.n	8008170 <_malloc_r+0xdc>
 8008178:	2300      	movs	r3, #0
 800817a:	6053      	str	r3, [r2, #4]
 800817c:	e7de      	b.n	800813c <_malloc_r+0xa8>
 800817e:	230c      	movs	r3, #12
 8008180:	6033      	str	r3, [r6, #0]
 8008182:	4630      	mov	r0, r6
 8008184:	f000 f80c 	bl	80081a0 <__malloc_unlock>
 8008188:	e794      	b.n	80080b4 <_malloc_r+0x20>
 800818a:	6005      	str	r5, [r0, #0]
 800818c:	e7d6      	b.n	800813c <_malloc_r+0xa8>
 800818e:	bf00      	nop
 8008190:	200050bc 	.word	0x200050bc

08008194 <__malloc_lock>:
 8008194:	4801      	ldr	r0, [pc, #4]	@ (800819c <__malloc_lock+0x8>)
 8008196:	f7ff bf01 	b.w	8007f9c <__retarget_lock_acquire_recursive>
 800819a:	bf00      	nop
 800819c:	200050b4 	.word	0x200050b4

080081a0 <__malloc_unlock>:
 80081a0:	4801      	ldr	r0, [pc, #4]	@ (80081a8 <__malloc_unlock+0x8>)
 80081a2:	f7ff befc 	b.w	8007f9e <__retarget_lock_release_recursive>
 80081a6:	bf00      	nop
 80081a8:	200050b4 	.word	0x200050b4

080081ac <__ssputs_r>:
 80081ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b0:	688e      	ldr	r6, [r1, #8]
 80081b2:	461f      	mov	r7, r3
 80081b4:	42be      	cmp	r6, r7
 80081b6:	680b      	ldr	r3, [r1, #0]
 80081b8:	4682      	mov	sl, r0
 80081ba:	460c      	mov	r4, r1
 80081bc:	4690      	mov	r8, r2
 80081be:	d82d      	bhi.n	800821c <__ssputs_r+0x70>
 80081c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80081c8:	d026      	beq.n	8008218 <__ssputs_r+0x6c>
 80081ca:	6965      	ldr	r5, [r4, #20]
 80081cc:	6909      	ldr	r1, [r1, #16]
 80081ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081d2:	eba3 0901 	sub.w	r9, r3, r1
 80081d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081da:	1c7b      	adds	r3, r7, #1
 80081dc:	444b      	add	r3, r9
 80081de:	106d      	asrs	r5, r5, #1
 80081e0:	429d      	cmp	r5, r3
 80081e2:	bf38      	it	cc
 80081e4:	461d      	movcc	r5, r3
 80081e6:	0553      	lsls	r3, r2, #21
 80081e8:	d527      	bpl.n	800823a <__ssputs_r+0x8e>
 80081ea:	4629      	mov	r1, r5
 80081ec:	f7ff ff52 	bl	8008094 <_malloc_r>
 80081f0:	4606      	mov	r6, r0
 80081f2:	b360      	cbz	r0, 800824e <__ssputs_r+0xa2>
 80081f4:	6921      	ldr	r1, [r4, #16]
 80081f6:	464a      	mov	r2, r9
 80081f8:	f7ff fed2 	bl	8007fa0 <memcpy>
 80081fc:	89a3      	ldrh	r3, [r4, #12]
 80081fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008206:	81a3      	strh	r3, [r4, #12]
 8008208:	6126      	str	r6, [r4, #16]
 800820a:	6165      	str	r5, [r4, #20]
 800820c:	444e      	add	r6, r9
 800820e:	eba5 0509 	sub.w	r5, r5, r9
 8008212:	6026      	str	r6, [r4, #0]
 8008214:	60a5      	str	r5, [r4, #8]
 8008216:	463e      	mov	r6, r7
 8008218:	42be      	cmp	r6, r7
 800821a:	d900      	bls.n	800821e <__ssputs_r+0x72>
 800821c:	463e      	mov	r6, r7
 800821e:	6820      	ldr	r0, [r4, #0]
 8008220:	4632      	mov	r2, r6
 8008222:	4641      	mov	r1, r8
 8008224:	f000 faa8 	bl	8008778 <memmove>
 8008228:	68a3      	ldr	r3, [r4, #8]
 800822a:	1b9b      	subs	r3, r3, r6
 800822c:	60a3      	str	r3, [r4, #8]
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	4433      	add	r3, r6
 8008232:	6023      	str	r3, [r4, #0]
 8008234:	2000      	movs	r0, #0
 8008236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800823a:	462a      	mov	r2, r5
 800823c:	f000 fac6 	bl	80087cc <_realloc_r>
 8008240:	4606      	mov	r6, r0
 8008242:	2800      	cmp	r0, #0
 8008244:	d1e0      	bne.n	8008208 <__ssputs_r+0x5c>
 8008246:	6921      	ldr	r1, [r4, #16]
 8008248:	4650      	mov	r0, sl
 800824a:	f7ff feb7 	bl	8007fbc <_free_r>
 800824e:	230c      	movs	r3, #12
 8008250:	f8ca 3000 	str.w	r3, [sl]
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	f04f 30ff 	mov.w	r0, #4294967295
 8008260:	e7e9      	b.n	8008236 <__ssputs_r+0x8a>
	...

08008264 <_svfiprintf_r>:
 8008264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	4698      	mov	r8, r3
 800826a:	898b      	ldrh	r3, [r1, #12]
 800826c:	061b      	lsls	r3, r3, #24
 800826e:	b09d      	sub	sp, #116	@ 0x74
 8008270:	4607      	mov	r7, r0
 8008272:	460d      	mov	r5, r1
 8008274:	4614      	mov	r4, r2
 8008276:	d510      	bpl.n	800829a <_svfiprintf_r+0x36>
 8008278:	690b      	ldr	r3, [r1, #16]
 800827a:	b973      	cbnz	r3, 800829a <_svfiprintf_r+0x36>
 800827c:	2140      	movs	r1, #64	@ 0x40
 800827e:	f7ff ff09 	bl	8008094 <_malloc_r>
 8008282:	6028      	str	r0, [r5, #0]
 8008284:	6128      	str	r0, [r5, #16]
 8008286:	b930      	cbnz	r0, 8008296 <_svfiprintf_r+0x32>
 8008288:	230c      	movs	r3, #12
 800828a:	603b      	str	r3, [r7, #0]
 800828c:	f04f 30ff 	mov.w	r0, #4294967295
 8008290:	b01d      	add	sp, #116	@ 0x74
 8008292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008296:	2340      	movs	r3, #64	@ 0x40
 8008298:	616b      	str	r3, [r5, #20]
 800829a:	2300      	movs	r3, #0
 800829c:	9309      	str	r3, [sp, #36]	@ 0x24
 800829e:	2320      	movs	r3, #32
 80082a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80082a8:	2330      	movs	r3, #48	@ 0x30
 80082aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008448 <_svfiprintf_r+0x1e4>
 80082ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082b2:	f04f 0901 	mov.w	r9, #1
 80082b6:	4623      	mov	r3, r4
 80082b8:	469a      	mov	sl, r3
 80082ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082be:	b10a      	cbz	r2, 80082c4 <_svfiprintf_r+0x60>
 80082c0:	2a25      	cmp	r2, #37	@ 0x25
 80082c2:	d1f9      	bne.n	80082b8 <_svfiprintf_r+0x54>
 80082c4:	ebba 0b04 	subs.w	fp, sl, r4
 80082c8:	d00b      	beq.n	80082e2 <_svfiprintf_r+0x7e>
 80082ca:	465b      	mov	r3, fp
 80082cc:	4622      	mov	r2, r4
 80082ce:	4629      	mov	r1, r5
 80082d0:	4638      	mov	r0, r7
 80082d2:	f7ff ff6b 	bl	80081ac <__ssputs_r>
 80082d6:	3001      	adds	r0, #1
 80082d8:	f000 80a7 	beq.w	800842a <_svfiprintf_r+0x1c6>
 80082dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082de:	445a      	add	r2, fp
 80082e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80082e2:	f89a 3000 	ldrb.w	r3, [sl]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 809f 	beq.w	800842a <_svfiprintf_r+0x1c6>
 80082ec:	2300      	movs	r3, #0
 80082ee:	f04f 32ff 	mov.w	r2, #4294967295
 80082f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082f6:	f10a 0a01 	add.w	sl, sl, #1
 80082fa:	9304      	str	r3, [sp, #16]
 80082fc:	9307      	str	r3, [sp, #28]
 80082fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008302:	931a      	str	r3, [sp, #104]	@ 0x68
 8008304:	4654      	mov	r4, sl
 8008306:	2205      	movs	r2, #5
 8008308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800830c:	484e      	ldr	r0, [pc, #312]	@ (8008448 <_svfiprintf_r+0x1e4>)
 800830e:	f7f7 ff87 	bl	8000220 <memchr>
 8008312:	9a04      	ldr	r2, [sp, #16]
 8008314:	b9d8      	cbnz	r0, 800834e <_svfiprintf_r+0xea>
 8008316:	06d0      	lsls	r0, r2, #27
 8008318:	bf44      	itt	mi
 800831a:	2320      	movmi	r3, #32
 800831c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008320:	0711      	lsls	r1, r2, #28
 8008322:	bf44      	itt	mi
 8008324:	232b      	movmi	r3, #43	@ 0x2b
 8008326:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800832a:	f89a 3000 	ldrb.w	r3, [sl]
 800832e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008330:	d015      	beq.n	800835e <_svfiprintf_r+0xfa>
 8008332:	9a07      	ldr	r2, [sp, #28]
 8008334:	4654      	mov	r4, sl
 8008336:	2000      	movs	r0, #0
 8008338:	f04f 0c0a 	mov.w	ip, #10
 800833c:	4621      	mov	r1, r4
 800833e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008342:	3b30      	subs	r3, #48	@ 0x30
 8008344:	2b09      	cmp	r3, #9
 8008346:	d94b      	bls.n	80083e0 <_svfiprintf_r+0x17c>
 8008348:	b1b0      	cbz	r0, 8008378 <_svfiprintf_r+0x114>
 800834a:	9207      	str	r2, [sp, #28]
 800834c:	e014      	b.n	8008378 <_svfiprintf_r+0x114>
 800834e:	eba0 0308 	sub.w	r3, r0, r8
 8008352:	fa09 f303 	lsl.w	r3, r9, r3
 8008356:	4313      	orrs	r3, r2
 8008358:	9304      	str	r3, [sp, #16]
 800835a:	46a2      	mov	sl, r4
 800835c:	e7d2      	b.n	8008304 <_svfiprintf_r+0xa0>
 800835e:	9b03      	ldr	r3, [sp, #12]
 8008360:	1d19      	adds	r1, r3, #4
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	9103      	str	r1, [sp, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	bfbb      	ittet	lt
 800836a:	425b      	neglt	r3, r3
 800836c:	f042 0202 	orrlt.w	r2, r2, #2
 8008370:	9307      	strge	r3, [sp, #28]
 8008372:	9307      	strlt	r3, [sp, #28]
 8008374:	bfb8      	it	lt
 8008376:	9204      	strlt	r2, [sp, #16]
 8008378:	7823      	ldrb	r3, [r4, #0]
 800837a:	2b2e      	cmp	r3, #46	@ 0x2e
 800837c:	d10a      	bne.n	8008394 <_svfiprintf_r+0x130>
 800837e:	7863      	ldrb	r3, [r4, #1]
 8008380:	2b2a      	cmp	r3, #42	@ 0x2a
 8008382:	d132      	bne.n	80083ea <_svfiprintf_r+0x186>
 8008384:	9b03      	ldr	r3, [sp, #12]
 8008386:	1d1a      	adds	r2, r3, #4
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	9203      	str	r2, [sp, #12]
 800838c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008390:	3402      	adds	r4, #2
 8008392:	9305      	str	r3, [sp, #20]
 8008394:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008458 <_svfiprintf_r+0x1f4>
 8008398:	7821      	ldrb	r1, [r4, #0]
 800839a:	2203      	movs	r2, #3
 800839c:	4650      	mov	r0, sl
 800839e:	f7f7 ff3f 	bl	8000220 <memchr>
 80083a2:	b138      	cbz	r0, 80083b4 <_svfiprintf_r+0x150>
 80083a4:	9b04      	ldr	r3, [sp, #16]
 80083a6:	eba0 000a 	sub.w	r0, r0, sl
 80083aa:	2240      	movs	r2, #64	@ 0x40
 80083ac:	4082      	lsls	r2, r0
 80083ae:	4313      	orrs	r3, r2
 80083b0:	3401      	adds	r4, #1
 80083b2:	9304      	str	r3, [sp, #16]
 80083b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b8:	4824      	ldr	r0, [pc, #144]	@ (800844c <_svfiprintf_r+0x1e8>)
 80083ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083be:	2206      	movs	r2, #6
 80083c0:	f7f7 ff2e 	bl	8000220 <memchr>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d036      	beq.n	8008436 <_svfiprintf_r+0x1d2>
 80083c8:	4b21      	ldr	r3, [pc, #132]	@ (8008450 <_svfiprintf_r+0x1ec>)
 80083ca:	bb1b      	cbnz	r3, 8008414 <_svfiprintf_r+0x1b0>
 80083cc:	9b03      	ldr	r3, [sp, #12]
 80083ce:	3307      	adds	r3, #7
 80083d0:	f023 0307 	bic.w	r3, r3, #7
 80083d4:	3308      	adds	r3, #8
 80083d6:	9303      	str	r3, [sp, #12]
 80083d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083da:	4433      	add	r3, r6
 80083dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80083de:	e76a      	b.n	80082b6 <_svfiprintf_r+0x52>
 80083e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80083e4:	460c      	mov	r4, r1
 80083e6:	2001      	movs	r0, #1
 80083e8:	e7a8      	b.n	800833c <_svfiprintf_r+0xd8>
 80083ea:	2300      	movs	r3, #0
 80083ec:	3401      	adds	r4, #1
 80083ee:	9305      	str	r3, [sp, #20]
 80083f0:	4619      	mov	r1, r3
 80083f2:	f04f 0c0a 	mov.w	ip, #10
 80083f6:	4620      	mov	r0, r4
 80083f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083fc:	3a30      	subs	r2, #48	@ 0x30
 80083fe:	2a09      	cmp	r2, #9
 8008400:	d903      	bls.n	800840a <_svfiprintf_r+0x1a6>
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0c6      	beq.n	8008394 <_svfiprintf_r+0x130>
 8008406:	9105      	str	r1, [sp, #20]
 8008408:	e7c4      	b.n	8008394 <_svfiprintf_r+0x130>
 800840a:	fb0c 2101 	mla	r1, ip, r1, r2
 800840e:	4604      	mov	r4, r0
 8008410:	2301      	movs	r3, #1
 8008412:	e7f0      	b.n	80083f6 <_svfiprintf_r+0x192>
 8008414:	ab03      	add	r3, sp, #12
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	462a      	mov	r2, r5
 800841a:	4b0e      	ldr	r3, [pc, #56]	@ (8008454 <_svfiprintf_r+0x1f0>)
 800841c:	a904      	add	r1, sp, #16
 800841e:	4638      	mov	r0, r7
 8008420:	f3af 8000 	nop.w
 8008424:	1c42      	adds	r2, r0, #1
 8008426:	4606      	mov	r6, r0
 8008428:	d1d6      	bne.n	80083d8 <_svfiprintf_r+0x174>
 800842a:	89ab      	ldrh	r3, [r5, #12]
 800842c:	065b      	lsls	r3, r3, #25
 800842e:	f53f af2d 	bmi.w	800828c <_svfiprintf_r+0x28>
 8008432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008434:	e72c      	b.n	8008290 <_svfiprintf_r+0x2c>
 8008436:	ab03      	add	r3, sp, #12
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	462a      	mov	r2, r5
 800843c:	4b05      	ldr	r3, [pc, #20]	@ (8008454 <_svfiprintf_r+0x1f0>)
 800843e:	a904      	add	r1, sp, #16
 8008440:	4638      	mov	r0, r7
 8008442:	f000 f879 	bl	8008538 <_printf_i>
 8008446:	e7ed      	b.n	8008424 <_svfiprintf_r+0x1c0>
 8008448:	080096ec 	.word	0x080096ec
 800844c:	080096f6 	.word	0x080096f6
 8008450:	00000000 	.word	0x00000000
 8008454:	080081ad 	.word	0x080081ad
 8008458:	080096f2 	.word	0x080096f2

0800845c <_printf_common>:
 800845c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008460:	4616      	mov	r6, r2
 8008462:	4698      	mov	r8, r3
 8008464:	688a      	ldr	r2, [r1, #8]
 8008466:	690b      	ldr	r3, [r1, #16]
 8008468:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800846c:	4293      	cmp	r3, r2
 800846e:	bfb8      	it	lt
 8008470:	4613      	movlt	r3, r2
 8008472:	6033      	str	r3, [r6, #0]
 8008474:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008478:	4607      	mov	r7, r0
 800847a:	460c      	mov	r4, r1
 800847c:	b10a      	cbz	r2, 8008482 <_printf_common+0x26>
 800847e:	3301      	adds	r3, #1
 8008480:	6033      	str	r3, [r6, #0]
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	0699      	lsls	r1, r3, #26
 8008486:	bf42      	ittt	mi
 8008488:	6833      	ldrmi	r3, [r6, #0]
 800848a:	3302      	addmi	r3, #2
 800848c:	6033      	strmi	r3, [r6, #0]
 800848e:	6825      	ldr	r5, [r4, #0]
 8008490:	f015 0506 	ands.w	r5, r5, #6
 8008494:	d106      	bne.n	80084a4 <_printf_common+0x48>
 8008496:	f104 0a19 	add.w	sl, r4, #25
 800849a:	68e3      	ldr	r3, [r4, #12]
 800849c:	6832      	ldr	r2, [r6, #0]
 800849e:	1a9b      	subs	r3, r3, r2
 80084a0:	42ab      	cmp	r3, r5
 80084a2:	dc26      	bgt.n	80084f2 <_printf_common+0x96>
 80084a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80084a8:	6822      	ldr	r2, [r4, #0]
 80084aa:	3b00      	subs	r3, #0
 80084ac:	bf18      	it	ne
 80084ae:	2301      	movne	r3, #1
 80084b0:	0692      	lsls	r2, r2, #26
 80084b2:	d42b      	bmi.n	800850c <_printf_common+0xb0>
 80084b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80084b8:	4641      	mov	r1, r8
 80084ba:	4638      	mov	r0, r7
 80084bc:	47c8      	blx	r9
 80084be:	3001      	adds	r0, #1
 80084c0:	d01e      	beq.n	8008500 <_printf_common+0xa4>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	6922      	ldr	r2, [r4, #16]
 80084c6:	f003 0306 	and.w	r3, r3, #6
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	bf02      	ittt	eq
 80084ce:	68e5      	ldreq	r5, [r4, #12]
 80084d0:	6833      	ldreq	r3, [r6, #0]
 80084d2:	1aed      	subeq	r5, r5, r3
 80084d4:	68a3      	ldr	r3, [r4, #8]
 80084d6:	bf0c      	ite	eq
 80084d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084dc:	2500      	movne	r5, #0
 80084de:	4293      	cmp	r3, r2
 80084e0:	bfc4      	itt	gt
 80084e2:	1a9b      	subgt	r3, r3, r2
 80084e4:	18ed      	addgt	r5, r5, r3
 80084e6:	2600      	movs	r6, #0
 80084e8:	341a      	adds	r4, #26
 80084ea:	42b5      	cmp	r5, r6
 80084ec:	d11a      	bne.n	8008524 <_printf_common+0xc8>
 80084ee:	2000      	movs	r0, #0
 80084f0:	e008      	b.n	8008504 <_printf_common+0xa8>
 80084f2:	2301      	movs	r3, #1
 80084f4:	4652      	mov	r2, sl
 80084f6:	4641      	mov	r1, r8
 80084f8:	4638      	mov	r0, r7
 80084fa:	47c8      	blx	r9
 80084fc:	3001      	adds	r0, #1
 80084fe:	d103      	bne.n	8008508 <_printf_common+0xac>
 8008500:	f04f 30ff 	mov.w	r0, #4294967295
 8008504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008508:	3501      	adds	r5, #1
 800850a:	e7c6      	b.n	800849a <_printf_common+0x3e>
 800850c:	18e1      	adds	r1, r4, r3
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	2030      	movs	r0, #48	@ 0x30
 8008512:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008516:	4422      	add	r2, r4
 8008518:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800851c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008520:	3302      	adds	r3, #2
 8008522:	e7c7      	b.n	80084b4 <_printf_common+0x58>
 8008524:	2301      	movs	r3, #1
 8008526:	4622      	mov	r2, r4
 8008528:	4641      	mov	r1, r8
 800852a:	4638      	mov	r0, r7
 800852c:	47c8      	blx	r9
 800852e:	3001      	adds	r0, #1
 8008530:	d0e6      	beq.n	8008500 <_printf_common+0xa4>
 8008532:	3601      	adds	r6, #1
 8008534:	e7d9      	b.n	80084ea <_printf_common+0x8e>
	...

08008538 <_printf_i>:
 8008538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800853c:	7e0f      	ldrb	r7, [r1, #24]
 800853e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008540:	2f78      	cmp	r7, #120	@ 0x78
 8008542:	4691      	mov	r9, r2
 8008544:	4680      	mov	r8, r0
 8008546:	460c      	mov	r4, r1
 8008548:	469a      	mov	sl, r3
 800854a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800854e:	d807      	bhi.n	8008560 <_printf_i+0x28>
 8008550:	2f62      	cmp	r7, #98	@ 0x62
 8008552:	d80a      	bhi.n	800856a <_printf_i+0x32>
 8008554:	2f00      	cmp	r7, #0
 8008556:	f000 80d2 	beq.w	80086fe <_printf_i+0x1c6>
 800855a:	2f58      	cmp	r7, #88	@ 0x58
 800855c:	f000 80b9 	beq.w	80086d2 <_printf_i+0x19a>
 8008560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008564:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008568:	e03a      	b.n	80085e0 <_printf_i+0xa8>
 800856a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800856e:	2b15      	cmp	r3, #21
 8008570:	d8f6      	bhi.n	8008560 <_printf_i+0x28>
 8008572:	a101      	add	r1, pc, #4	@ (adr r1, 8008578 <_printf_i+0x40>)
 8008574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008578:	080085d1 	.word	0x080085d1
 800857c:	080085e5 	.word	0x080085e5
 8008580:	08008561 	.word	0x08008561
 8008584:	08008561 	.word	0x08008561
 8008588:	08008561 	.word	0x08008561
 800858c:	08008561 	.word	0x08008561
 8008590:	080085e5 	.word	0x080085e5
 8008594:	08008561 	.word	0x08008561
 8008598:	08008561 	.word	0x08008561
 800859c:	08008561 	.word	0x08008561
 80085a0:	08008561 	.word	0x08008561
 80085a4:	080086e5 	.word	0x080086e5
 80085a8:	0800860f 	.word	0x0800860f
 80085ac:	0800869f 	.word	0x0800869f
 80085b0:	08008561 	.word	0x08008561
 80085b4:	08008561 	.word	0x08008561
 80085b8:	08008707 	.word	0x08008707
 80085bc:	08008561 	.word	0x08008561
 80085c0:	0800860f 	.word	0x0800860f
 80085c4:	08008561 	.word	0x08008561
 80085c8:	08008561 	.word	0x08008561
 80085cc:	080086a7 	.word	0x080086a7
 80085d0:	6833      	ldr	r3, [r6, #0]
 80085d2:	1d1a      	adds	r2, r3, #4
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6032      	str	r2, [r6, #0]
 80085d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085e0:	2301      	movs	r3, #1
 80085e2:	e09d      	b.n	8008720 <_printf_i+0x1e8>
 80085e4:	6833      	ldr	r3, [r6, #0]
 80085e6:	6820      	ldr	r0, [r4, #0]
 80085e8:	1d19      	adds	r1, r3, #4
 80085ea:	6031      	str	r1, [r6, #0]
 80085ec:	0606      	lsls	r6, r0, #24
 80085ee:	d501      	bpl.n	80085f4 <_printf_i+0xbc>
 80085f0:	681d      	ldr	r5, [r3, #0]
 80085f2:	e003      	b.n	80085fc <_printf_i+0xc4>
 80085f4:	0645      	lsls	r5, r0, #25
 80085f6:	d5fb      	bpl.n	80085f0 <_printf_i+0xb8>
 80085f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085fc:	2d00      	cmp	r5, #0
 80085fe:	da03      	bge.n	8008608 <_printf_i+0xd0>
 8008600:	232d      	movs	r3, #45	@ 0x2d
 8008602:	426d      	negs	r5, r5
 8008604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008608:	4859      	ldr	r0, [pc, #356]	@ (8008770 <_printf_i+0x238>)
 800860a:	230a      	movs	r3, #10
 800860c:	e011      	b.n	8008632 <_printf_i+0xfa>
 800860e:	6821      	ldr	r1, [r4, #0]
 8008610:	6833      	ldr	r3, [r6, #0]
 8008612:	0608      	lsls	r0, r1, #24
 8008614:	f853 5b04 	ldr.w	r5, [r3], #4
 8008618:	d402      	bmi.n	8008620 <_printf_i+0xe8>
 800861a:	0649      	lsls	r1, r1, #25
 800861c:	bf48      	it	mi
 800861e:	b2ad      	uxthmi	r5, r5
 8008620:	2f6f      	cmp	r7, #111	@ 0x6f
 8008622:	4853      	ldr	r0, [pc, #332]	@ (8008770 <_printf_i+0x238>)
 8008624:	6033      	str	r3, [r6, #0]
 8008626:	bf14      	ite	ne
 8008628:	230a      	movne	r3, #10
 800862a:	2308      	moveq	r3, #8
 800862c:	2100      	movs	r1, #0
 800862e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008632:	6866      	ldr	r6, [r4, #4]
 8008634:	60a6      	str	r6, [r4, #8]
 8008636:	2e00      	cmp	r6, #0
 8008638:	bfa2      	ittt	ge
 800863a:	6821      	ldrge	r1, [r4, #0]
 800863c:	f021 0104 	bicge.w	r1, r1, #4
 8008640:	6021      	strge	r1, [r4, #0]
 8008642:	b90d      	cbnz	r5, 8008648 <_printf_i+0x110>
 8008644:	2e00      	cmp	r6, #0
 8008646:	d04b      	beq.n	80086e0 <_printf_i+0x1a8>
 8008648:	4616      	mov	r6, r2
 800864a:	fbb5 f1f3 	udiv	r1, r5, r3
 800864e:	fb03 5711 	mls	r7, r3, r1, r5
 8008652:	5dc7      	ldrb	r7, [r0, r7]
 8008654:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008658:	462f      	mov	r7, r5
 800865a:	42bb      	cmp	r3, r7
 800865c:	460d      	mov	r5, r1
 800865e:	d9f4      	bls.n	800864a <_printf_i+0x112>
 8008660:	2b08      	cmp	r3, #8
 8008662:	d10b      	bne.n	800867c <_printf_i+0x144>
 8008664:	6823      	ldr	r3, [r4, #0]
 8008666:	07df      	lsls	r7, r3, #31
 8008668:	d508      	bpl.n	800867c <_printf_i+0x144>
 800866a:	6923      	ldr	r3, [r4, #16]
 800866c:	6861      	ldr	r1, [r4, #4]
 800866e:	4299      	cmp	r1, r3
 8008670:	bfde      	ittt	le
 8008672:	2330      	movle	r3, #48	@ 0x30
 8008674:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008678:	f106 36ff 	addle.w	r6, r6, #4294967295
 800867c:	1b92      	subs	r2, r2, r6
 800867e:	6122      	str	r2, [r4, #16]
 8008680:	f8cd a000 	str.w	sl, [sp]
 8008684:	464b      	mov	r3, r9
 8008686:	aa03      	add	r2, sp, #12
 8008688:	4621      	mov	r1, r4
 800868a:	4640      	mov	r0, r8
 800868c:	f7ff fee6 	bl	800845c <_printf_common>
 8008690:	3001      	adds	r0, #1
 8008692:	d14a      	bne.n	800872a <_printf_i+0x1f2>
 8008694:	f04f 30ff 	mov.w	r0, #4294967295
 8008698:	b004      	add	sp, #16
 800869a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	f043 0320 	orr.w	r3, r3, #32
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	4833      	ldr	r0, [pc, #204]	@ (8008774 <_printf_i+0x23c>)
 80086a8:	2778      	movs	r7, #120	@ 0x78
 80086aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	6831      	ldr	r1, [r6, #0]
 80086b2:	061f      	lsls	r7, r3, #24
 80086b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80086b8:	d402      	bmi.n	80086c0 <_printf_i+0x188>
 80086ba:	065f      	lsls	r7, r3, #25
 80086bc:	bf48      	it	mi
 80086be:	b2ad      	uxthmi	r5, r5
 80086c0:	6031      	str	r1, [r6, #0]
 80086c2:	07d9      	lsls	r1, r3, #31
 80086c4:	bf44      	itt	mi
 80086c6:	f043 0320 	orrmi.w	r3, r3, #32
 80086ca:	6023      	strmi	r3, [r4, #0]
 80086cc:	b11d      	cbz	r5, 80086d6 <_printf_i+0x19e>
 80086ce:	2310      	movs	r3, #16
 80086d0:	e7ac      	b.n	800862c <_printf_i+0xf4>
 80086d2:	4827      	ldr	r0, [pc, #156]	@ (8008770 <_printf_i+0x238>)
 80086d4:	e7e9      	b.n	80086aa <_printf_i+0x172>
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	f023 0320 	bic.w	r3, r3, #32
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	e7f6      	b.n	80086ce <_printf_i+0x196>
 80086e0:	4616      	mov	r6, r2
 80086e2:	e7bd      	b.n	8008660 <_printf_i+0x128>
 80086e4:	6833      	ldr	r3, [r6, #0]
 80086e6:	6825      	ldr	r5, [r4, #0]
 80086e8:	6961      	ldr	r1, [r4, #20]
 80086ea:	1d18      	adds	r0, r3, #4
 80086ec:	6030      	str	r0, [r6, #0]
 80086ee:	062e      	lsls	r6, r5, #24
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	d501      	bpl.n	80086f8 <_printf_i+0x1c0>
 80086f4:	6019      	str	r1, [r3, #0]
 80086f6:	e002      	b.n	80086fe <_printf_i+0x1c6>
 80086f8:	0668      	lsls	r0, r5, #25
 80086fa:	d5fb      	bpl.n	80086f4 <_printf_i+0x1bc>
 80086fc:	8019      	strh	r1, [r3, #0]
 80086fe:	2300      	movs	r3, #0
 8008700:	6123      	str	r3, [r4, #16]
 8008702:	4616      	mov	r6, r2
 8008704:	e7bc      	b.n	8008680 <_printf_i+0x148>
 8008706:	6833      	ldr	r3, [r6, #0]
 8008708:	1d1a      	adds	r2, r3, #4
 800870a:	6032      	str	r2, [r6, #0]
 800870c:	681e      	ldr	r6, [r3, #0]
 800870e:	6862      	ldr	r2, [r4, #4]
 8008710:	2100      	movs	r1, #0
 8008712:	4630      	mov	r0, r6
 8008714:	f7f7 fd84 	bl	8000220 <memchr>
 8008718:	b108      	cbz	r0, 800871e <_printf_i+0x1e6>
 800871a:	1b80      	subs	r0, r0, r6
 800871c:	6060      	str	r0, [r4, #4]
 800871e:	6863      	ldr	r3, [r4, #4]
 8008720:	6123      	str	r3, [r4, #16]
 8008722:	2300      	movs	r3, #0
 8008724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008728:	e7aa      	b.n	8008680 <_printf_i+0x148>
 800872a:	6923      	ldr	r3, [r4, #16]
 800872c:	4632      	mov	r2, r6
 800872e:	4649      	mov	r1, r9
 8008730:	4640      	mov	r0, r8
 8008732:	47d0      	blx	sl
 8008734:	3001      	adds	r0, #1
 8008736:	d0ad      	beq.n	8008694 <_printf_i+0x15c>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	079b      	lsls	r3, r3, #30
 800873c:	d413      	bmi.n	8008766 <_printf_i+0x22e>
 800873e:	68e0      	ldr	r0, [r4, #12]
 8008740:	9b03      	ldr	r3, [sp, #12]
 8008742:	4298      	cmp	r0, r3
 8008744:	bfb8      	it	lt
 8008746:	4618      	movlt	r0, r3
 8008748:	e7a6      	b.n	8008698 <_printf_i+0x160>
 800874a:	2301      	movs	r3, #1
 800874c:	4632      	mov	r2, r6
 800874e:	4649      	mov	r1, r9
 8008750:	4640      	mov	r0, r8
 8008752:	47d0      	blx	sl
 8008754:	3001      	adds	r0, #1
 8008756:	d09d      	beq.n	8008694 <_printf_i+0x15c>
 8008758:	3501      	adds	r5, #1
 800875a:	68e3      	ldr	r3, [r4, #12]
 800875c:	9903      	ldr	r1, [sp, #12]
 800875e:	1a5b      	subs	r3, r3, r1
 8008760:	42ab      	cmp	r3, r5
 8008762:	dcf2      	bgt.n	800874a <_printf_i+0x212>
 8008764:	e7eb      	b.n	800873e <_printf_i+0x206>
 8008766:	2500      	movs	r5, #0
 8008768:	f104 0619 	add.w	r6, r4, #25
 800876c:	e7f5      	b.n	800875a <_printf_i+0x222>
 800876e:	bf00      	nop
 8008770:	080096fd 	.word	0x080096fd
 8008774:	0800970e 	.word	0x0800970e

08008778 <memmove>:
 8008778:	4288      	cmp	r0, r1
 800877a:	b510      	push	{r4, lr}
 800877c:	eb01 0402 	add.w	r4, r1, r2
 8008780:	d902      	bls.n	8008788 <memmove+0x10>
 8008782:	4284      	cmp	r4, r0
 8008784:	4623      	mov	r3, r4
 8008786:	d807      	bhi.n	8008798 <memmove+0x20>
 8008788:	1e43      	subs	r3, r0, #1
 800878a:	42a1      	cmp	r1, r4
 800878c:	d008      	beq.n	80087a0 <memmove+0x28>
 800878e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008792:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008796:	e7f8      	b.n	800878a <memmove+0x12>
 8008798:	4402      	add	r2, r0
 800879a:	4601      	mov	r1, r0
 800879c:	428a      	cmp	r2, r1
 800879e:	d100      	bne.n	80087a2 <memmove+0x2a>
 80087a0:	bd10      	pop	{r4, pc}
 80087a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087aa:	e7f7      	b.n	800879c <memmove+0x24>

080087ac <_sbrk_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4d06      	ldr	r5, [pc, #24]	@ (80087c8 <_sbrk_r+0x1c>)
 80087b0:	2300      	movs	r3, #0
 80087b2:	4604      	mov	r4, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	602b      	str	r3, [r5, #0]
 80087b8:	f7f9 f9e2 	bl	8001b80 <_sbrk>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_sbrk_r+0x1a>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_sbrk_r+0x1a>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	200050b0 	.word	0x200050b0

080087cc <_realloc_r>:
 80087cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d0:	4680      	mov	r8, r0
 80087d2:	4615      	mov	r5, r2
 80087d4:	460c      	mov	r4, r1
 80087d6:	b921      	cbnz	r1, 80087e2 <_realloc_r+0x16>
 80087d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087dc:	4611      	mov	r1, r2
 80087de:	f7ff bc59 	b.w	8008094 <_malloc_r>
 80087e2:	b92a      	cbnz	r2, 80087f0 <_realloc_r+0x24>
 80087e4:	f7ff fbea 	bl	8007fbc <_free_r>
 80087e8:	2400      	movs	r4, #0
 80087ea:	4620      	mov	r0, r4
 80087ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f0:	f000 f81a 	bl	8008828 <_malloc_usable_size_r>
 80087f4:	4285      	cmp	r5, r0
 80087f6:	4606      	mov	r6, r0
 80087f8:	d802      	bhi.n	8008800 <_realloc_r+0x34>
 80087fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80087fe:	d8f4      	bhi.n	80087ea <_realloc_r+0x1e>
 8008800:	4629      	mov	r1, r5
 8008802:	4640      	mov	r0, r8
 8008804:	f7ff fc46 	bl	8008094 <_malloc_r>
 8008808:	4607      	mov	r7, r0
 800880a:	2800      	cmp	r0, #0
 800880c:	d0ec      	beq.n	80087e8 <_realloc_r+0x1c>
 800880e:	42b5      	cmp	r5, r6
 8008810:	462a      	mov	r2, r5
 8008812:	4621      	mov	r1, r4
 8008814:	bf28      	it	cs
 8008816:	4632      	movcs	r2, r6
 8008818:	f7ff fbc2 	bl	8007fa0 <memcpy>
 800881c:	4621      	mov	r1, r4
 800881e:	4640      	mov	r0, r8
 8008820:	f7ff fbcc 	bl	8007fbc <_free_r>
 8008824:	463c      	mov	r4, r7
 8008826:	e7e0      	b.n	80087ea <_realloc_r+0x1e>

08008828 <_malloc_usable_size_r>:
 8008828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800882c:	1f18      	subs	r0, r3, #4
 800882e:	2b00      	cmp	r3, #0
 8008830:	bfbc      	itt	lt
 8008832:	580b      	ldrlt	r3, [r1, r0]
 8008834:	18c0      	addlt	r0, r0, r3
 8008836:	4770      	bx	lr

08008838 <_init>:
 8008838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883a:	bf00      	nop
 800883c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800883e:	bc08      	pop	{r3}
 8008840:	469e      	mov	lr, r3
 8008842:	4770      	bx	lr

08008844 <_fini>:
 8008844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008846:	bf00      	nop
 8008848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884a:	bc08      	pop	{r3}
 800884c:	469e      	mov	lr, r3
 800884e:	4770      	bx	lr
