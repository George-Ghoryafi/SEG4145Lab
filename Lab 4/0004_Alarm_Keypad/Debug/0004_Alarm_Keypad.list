
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e74  08006ba4  08006ba4  00007ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a18  08007a18  00009018  2**0
                  CONTENTS
  4 .ARM          00000008  08007a18  08007a18  00008a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a20  08007a20  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a20  08007a20  00008a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a24  08007a24  00008a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007a28  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e84  20000018  08007a40  00009018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e9c  08007a40  00009e9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af6f  00000000  00000000  00009048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ad0  00000000  00000000  00023fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  00027a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f9  00000000  00000000  000292b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024312  00000000  00000000  0002a5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d05b  00000000  00000000  0004e8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de070  00000000  00000000  0006b91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014998e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006714  00000000  00000000  001499d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  001500e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006b8c 	.word	0x08006b8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	08006b8c 	.word	0x08006b8c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b96a 	b.w	8000520 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9d08      	ldr	r5, [sp, #32]
 800026a:	460c      	mov	r4, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14e      	bne.n	800030e <__udivmoddi4+0xaa>
 8000270:	4694      	mov	ip, r2
 8000272:	458c      	cmp	ip, r1
 8000274:	4686      	mov	lr, r0
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	d962      	bls.n	8000342 <__udivmoddi4+0xde>
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 800027e:	f1c2 0320 	rsb	r3, r2, #32
 8000282:	4091      	lsls	r1, r2
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	4319      	orrs	r1, r3
 800028e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000292:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000296:	fa1f f68c 	uxth.w	r6, ip
 800029a:	fbb1 f4f7 	udiv	r4, r1, r7
 800029e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a2:	fb07 1114 	mls	r1, r7, r4, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb04 f106 	mul.w	r1, r4, r6
 80002ae:	4299      	cmp	r1, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x64>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ba:	f080 8112 	bcs.w	80004e2 <__udivmoddi4+0x27e>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 810f 	bls.w	80004e2 <__udivmoddi4+0x27e>
 80002c4:	3c02      	subs	r4, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a59      	subs	r1, r3, r1
 80002ca:	fa1f f38e 	uxth.w	r3, lr
 80002ce:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d2:	fb07 1110 	mls	r1, r7, r0, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb00 f606 	mul.w	r6, r0, r6
 80002de:	429e      	cmp	r6, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ea:	f080 80fc 	bcs.w	80004e6 <__udivmoddi4+0x282>
 80002ee:	429e      	cmp	r6, r3
 80002f0:	f240 80f9 	bls.w	80004e6 <__udivmoddi4+0x282>
 80002f4:	4463      	add	r3, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	1b9b      	subs	r3, r3, r6
 80002fa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa6>
 8000302:	40d3      	lsrs	r3, r2
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xba>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb4>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa6>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x150>
 8000326:	42a3      	cmp	r3, r4
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xcc>
 800032a:	4290      	cmp	r0, r2
 800032c:	f0c0 80f0 	bcc.w	8000510 <__udivmoddi4+0x2ac>
 8000330:	1a86      	subs	r6, r0, r2
 8000332:	eb64 0303 	sbc.w	r3, r4, r3
 8000336:	2001      	movs	r0, #1
 8000338:	2d00      	cmp	r5, #0
 800033a:	d0e6      	beq.n	800030a <__udivmoddi4+0xa6>
 800033c:	e9c5 6300 	strd	r6, r3, [r5]
 8000340:	e7e3      	b.n	800030a <__udivmoddi4+0xa6>
 8000342:	2a00      	cmp	r2, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x204>
 8000348:	eba1 040c 	sub.w	r4, r1, ip
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	fa1f f78c 	uxth.w	r7, ip
 8000354:	2101      	movs	r1, #1
 8000356:	fbb4 f6f8 	udiv	r6, r4, r8
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb08 4416 	mls	r4, r8, r6, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb07 f006 	mul.w	r0, r7, r6
 800036a:	4298      	cmp	r0, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x11c>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 34ff 	add.w	r4, r6, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x11a>
 8000378:	4298      	cmp	r0, r3
 800037a:	f200 80cd 	bhi.w	8000518 <__udivmoddi4+0x2b4>
 800037e:	4626      	mov	r6, r4
 8000380:	1a1c      	subs	r4, r3, r0
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb4 f0f8 	udiv	r0, r4, r8
 800038a:	fb08 4410 	mls	r4, r8, r0, r4
 800038e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000392:	fb00 f707 	mul.w	r7, r0, r7
 8000396:	429f      	cmp	r7, r3
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x148>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x146>
 80003a4:	429f      	cmp	r7, r3
 80003a6:	f200 80b0 	bhi.w	800050a <__udivmoddi4+0x2a6>
 80003aa:	4620      	mov	r0, r4
 80003ac:	1bdb      	subs	r3, r3, r7
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x9c>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c4:	fa04 f301 	lsl.w	r3, r4, r1
 80003c8:	ea43 030c 	orr.w	r3, r3, ip
 80003cc:	40f4      	lsrs	r4, r6
 80003ce:	fa00 f801 	lsl.w	r8, r0, r1
 80003d2:	0c38      	lsrs	r0, r7, #16
 80003d4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d8:	fbb4 fef0 	udiv	lr, r4, r0
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	fb00 441e 	mls	r4, r0, lr, r4
 80003e4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e8:	fb0e f90c 	mul.w	r9, lr, ip
 80003ec:	45a1      	cmp	r9, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90a      	bls.n	800040a <__udivmoddi4+0x1a6>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fa:	f080 8084 	bcs.w	8000506 <__udivmoddi4+0x2a2>
 80003fe:	45a1      	cmp	r9, r4
 8000400:	f240 8081 	bls.w	8000506 <__udivmoddi4+0x2a2>
 8000404:	f1ae 0e02 	sub.w	lr, lr, #2
 8000408:	443c      	add	r4, r7
 800040a:	eba4 0409 	sub.w	r4, r4, r9
 800040e:	fa1f f983 	uxth.w	r9, r3
 8000412:	fbb4 f3f0 	udiv	r3, r4, r0
 8000416:	fb00 4413 	mls	r4, r0, r3, r4
 800041a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000422:	45a4      	cmp	ip, r4
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1d2>
 8000426:	193c      	adds	r4, r7, r4
 8000428:	f103 30ff 	add.w	r0, r3, #4294967295
 800042c:	d267      	bcs.n	80004fe <__udivmoddi4+0x29a>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d965      	bls.n	80004fe <__udivmoddi4+0x29a>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043a:	fba0 9302 	umull	r9, r3, r0, r2
 800043e:	eba4 040c 	sub.w	r4, r4, ip
 8000442:	429c      	cmp	r4, r3
 8000444:	46ce      	mov	lr, r9
 8000446:	469c      	mov	ip, r3
 8000448:	d351      	bcc.n	80004ee <__udivmoddi4+0x28a>
 800044a:	d04e      	beq.n	80004ea <__udivmoddi4+0x286>
 800044c:	b155      	cbz	r5, 8000464 <__udivmoddi4+0x200>
 800044e:	ebb8 030e 	subs.w	r3, r8, lr
 8000452:	eb64 040c 	sbc.w	r4, r4, ip
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	40cb      	lsrs	r3, r1
 800045c:	431e      	orrs	r6, r3
 800045e:	40cc      	lsrs	r4, r1
 8000460:	e9c5 6400 	strd	r6, r4, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	e750      	b.n	800030a <__udivmoddi4+0xa6>
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa24 f303 	lsr.w	r3, r4, r3
 8000478:	4094      	lsls	r4, r2
 800047a:	430c      	orrs	r4, r1
 800047c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000480:	fa00 fe02 	lsl.w	lr, r0, r2
 8000484:	fa1f f78c 	uxth.w	r7, ip
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3110 	mls	r1, r8, r0, r3
 8000490:	0c23      	lsrs	r3, r4, #16
 8000492:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000496:	fb00 f107 	mul.w	r1, r0, r7
 800049a:	4299      	cmp	r1, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x24c>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a6:	d22c      	bcs.n	8000502 <__udivmoddi4+0x29e>
 80004a8:	4299      	cmp	r1, r3
 80004aa:	d92a      	bls.n	8000502 <__udivmoddi4+0x29e>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a5b      	subs	r3, r3, r1
 80004b2:	b2a4      	uxth	r4, r4
 80004b4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b8:	fb08 3311 	mls	r3, r8, r1, r3
 80004bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c0:	fb01 f307 	mul.w	r3, r1, r7
 80004c4:	42a3      	cmp	r3, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x276>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d0:	d213      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004d2:	42a3      	cmp	r3, r4
 80004d4:	d911      	bls.n	80004fa <__udivmoddi4+0x296>
 80004d6:	3902      	subs	r1, #2
 80004d8:	4464      	add	r4, ip
 80004da:	1ae4      	subs	r4, r4, r3
 80004dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e0:	e739      	b.n	8000356 <__udivmoddi4+0xf2>
 80004e2:	4604      	mov	r4, r0
 80004e4:	e6f0      	b.n	80002c8 <__udivmoddi4+0x64>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e706      	b.n	80002f8 <__udivmoddi4+0x94>
 80004ea:	45c8      	cmp	r8, r9
 80004ec:	d2ae      	bcs.n	800044c <__udivmoddi4+0x1e8>
 80004ee:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7a8      	b.n	800044c <__udivmoddi4+0x1e8>
 80004fa:	4631      	mov	r1, r6
 80004fc:	e7ed      	b.n	80004da <__udivmoddi4+0x276>
 80004fe:	4603      	mov	r3, r0
 8000500:	e799      	b.n	8000436 <__udivmoddi4+0x1d2>
 8000502:	4630      	mov	r0, r6
 8000504:	e7d4      	b.n	80004b0 <__udivmoddi4+0x24c>
 8000506:	46d6      	mov	lr, sl
 8000508:	e77f      	b.n	800040a <__udivmoddi4+0x1a6>
 800050a:	4463      	add	r3, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e74d      	b.n	80003ac <__udivmoddi4+0x148>
 8000510:	4606      	mov	r6, r0
 8000512:	4623      	mov	r3, r4
 8000514:	4608      	mov	r0, r1
 8000516:	e70f      	b.n	8000338 <__udivmoddi4+0xd4>
 8000518:	3e02      	subs	r6, #2
 800051a:	4463      	add	r3, ip
 800051c:	e730      	b.n	8000380 <__udivmoddi4+0x11c>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
	int done=1;
 800052a:	2301      	movs	r3, #1
 800052c:	607b      	str	r3, [r7, #4]
	while(done)
 800052e:	e19b      	b.n	8000868 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000536:	48b3      	ldr	r0, [pc, #716]	@ (8000804 <Get_Key+0x2e0>)
 8000538:	f001 fc32 	bl	8001da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 800053c:	2200      	movs	r2, #0
 800053e:	2110      	movs	r1, #16
 8000540:	48b0      	ldr	r0, [pc, #704]	@ (8000804 <Get_Key+0x2e0>)
 8000542:	f001 fc2d 	bl	8001da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000546:	2200      	movs	r2, #0
 8000548:	2120      	movs	r1, #32
 800054a:	48ae      	ldr	r0, [pc, #696]	@ (8000804 <Get_Key+0x2e0>)
 800054c:	f001 fc28 	bl	8001da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000550:	2200      	movs	r2, #0
 8000552:	2108      	movs	r1, #8
 8000554:	48ab      	ldr	r0, [pc, #684]	@ (8000804 <Get_Key+0x2e0>)
 8000556:	f001 fc23 	bl	8001da0 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800055a:	2140      	movs	r1, #64	@ 0x40
 800055c:	48a9      	ldr	r0, [pc, #676]	@ (8000804 <Get_Key+0x2e0>)
 800055e:	f001 fc07 	bl	8001d70 <HAL_GPIO_ReadPin>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00b      	beq.n	8000580 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000568:	bf00      	nop
 800056a:	2140      	movs	r1, #64	@ 0x40
 800056c:	48a5      	ldr	r0, [pc, #660]	@ (8000804 <Get_Key+0x2e0>)
 800056e:	f001 fbff 	bl	8001d70 <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1f8      	bne.n	800056a <Get_Key+0x46>
		key='1';
 8000578:	4ba3      	ldr	r3, [pc, #652]	@ (8000808 <Get_Key+0x2e4>)
 800057a:	2231      	movs	r2, #49	@ 0x31
 800057c:	701a      	strb	r2, [r3, #0]
		break;
 800057e:	e177      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	48a2      	ldr	r0, [pc, #648]	@ (800080c <Get_Key+0x2e8>)
 8000584:	f001 fbf4 	bl	8001d70 <HAL_GPIO_ReadPin>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d00b      	beq.n	80005a6 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800058e:	bf00      	nop
 8000590:	2180      	movs	r1, #128	@ 0x80
 8000592:	489e      	ldr	r0, [pc, #632]	@ (800080c <Get_Key+0x2e8>)
 8000594:	f001 fbec 	bl	8001d70 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1f8      	bne.n	8000590 <Get_Key+0x6c>
		key='4';
 800059e:	4b9a      	ldr	r3, [pc, #616]	@ (8000808 <Get_Key+0x2e4>)
 80005a0:	2234      	movs	r2, #52	@ 0x34
 80005a2:	701a      	strb	r2, [r3, #0]
		break;
 80005a4:	e164      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80005a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005aa:	4899      	ldr	r0, [pc, #612]	@ (8000810 <Get_Key+0x2ec>)
 80005ac:	f001 fbe0 	bl	8001d70 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00c      	beq.n	80005d0 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80005b6:	bf00      	nop
 80005b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005bc:	4894      	ldr	r0, [pc, #592]	@ (8000810 <Get_Key+0x2ec>)
 80005be:	f001 fbd7 	bl	8001d70 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f7      	bne.n	80005b8 <Get_Key+0x94>
		key='7';
 80005c8:	4b8f      	ldr	r3, [pc, #572]	@ (8000808 <Get_Key+0x2e4>)
 80005ca:	2237      	movs	r2, #55	@ 0x37
 80005cc:	701a      	strb	r2, [r3, #0]
		break;
 80005ce:	e14f      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80005d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d4:	488e      	ldr	r0, [pc, #568]	@ (8000810 <Get_Key+0x2ec>)
 80005d6:	f001 fbcb 	bl	8001d70 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00c      	beq.n	80005fa <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80005e0:	bf00      	nop
 80005e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e6:	488a      	ldr	r0, [pc, #552]	@ (8000810 <Get_Key+0x2ec>)
 80005e8:	f001 fbc2 	bl	8001d70 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1f7      	bne.n	80005e2 <Get_Key+0xbe>
		key='*';
 80005f2:	4b85      	ldr	r3, [pc, #532]	@ (8000808 <Get_Key+0x2e4>)
 80005f4:	222a      	movs	r2, #42	@ 0x2a
 80005f6:	701a      	strb	r2, [r3, #0]
		break;
 80005f8:	e13a      	b.n	8000870 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000600:	4880      	ldr	r0, [pc, #512]	@ (8000804 <Get_Key+0x2e0>)
 8000602:	f001 fbcd 	bl	8001da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000606:	2201      	movs	r2, #1
 8000608:	2110      	movs	r1, #16
 800060a:	487e      	ldr	r0, [pc, #504]	@ (8000804 <Get_Key+0x2e0>)
 800060c:	f001 fbc8 	bl	8001da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	487b      	ldr	r0, [pc, #492]	@ (8000804 <Get_Key+0x2e0>)
 8000616:	f001 fbc3 	bl	8001da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 800061a:	2200      	movs	r2, #0
 800061c:	2108      	movs	r1, #8
 800061e:	4879      	ldr	r0, [pc, #484]	@ (8000804 <Get_Key+0x2e0>)
 8000620:	f001 fbbe 	bl	8001da0 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000624:	2140      	movs	r1, #64	@ 0x40
 8000626:	4877      	ldr	r0, [pc, #476]	@ (8000804 <Get_Key+0x2e0>)
 8000628:	f001 fba2 	bl	8001d70 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00b      	beq.n	800064a <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000632:	bf00      	nop
 8000634:	2140      	movs	r1, #64	@ 0x40
 8000636:	4873      	ldr	r0, [pc, #460]	@ (8000804 <Get_Key+0x2e0>)
 8000638:	f001 fb9a 	bl	8001d70 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f8      	bne.n	8000634 <Get_Key+0x110>
		key='2';
 8000642:	4b71      	ldr	r3, [pc, #452]	@ (8000808 <Get_Key+0x2e4>)
 8000644:	2232      	movs	r2, #50	@ 0x32
 8000646:	701a      	strb	r2, [r3, #0]
		break;
 8000648:	e112      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800064a:	2180      	movs	r1, #128	@ 0x80
 800064c:	486f      	ldr	r0, [pc, #444]	@ (800080c <Get_Key+0x2e8>)
 800064e:	f001 fb8f 	bl	8001d70 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d00b      	beq.n	8000670 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000658:	bf00      	nop
 800065a:	2180      	movs	r1, #128	@ 0x80
 800065c:	486b      	ldr	r0, [pc, #428]	@ (800080c <Get_Key+0x2e8>)
 800065e:	f001 fb87 	bl	8001d70 <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f8      	bne.n	800065a <Get_Key+0x136>
		key='5';
 8000668:	4b67      	ldr	r3, [pc, #412]	@ (8000808 <Get_Key+0x2e4>)
 800066a:	2235      	movs	r2, #53	@ 0x35
 800066c:	701a      	strb	r2, [r3, #0]
		break;
 800066e:	e0ff      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000670:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000674:	4866      	ldr	r0, [pc, #408]	@ (8000810 <Get_Key+0x2ec>)
 8000676:	f001 fb7b 	bl	8001d70 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00c      	beq.n	800069a <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000680:	bf00      	nop
 8000682:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000686:	4862      	ldr	r0, [pc, #392]	@ (8000810 <Get_Key+0x2ec>)
 8000688:	f001 fb72 	bl	8001d70 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f7      	bne.n	8000682 <Get_Key+0x15e>
		key='8';
 8000692:	4b5d      	ldr	r3, [pc, #372]	@ (8000808 <Get_Key+0x2e4>)
 8000694:	2238      	movs	r2, #56	@ 0x38
 8000696:	701a      	strb	r2, [r3, #0]
		break;
 8000698:	e0ea      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800069a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800069e:	485c      	ldr	r0, [pc, #368]	@ (8000810 <Get_Key+0x2ec>)
 80006a0:	f001 fb66 	bl	8001d70 <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d00c      	beq.n	80006c4 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80006aa:	bf00      	nop
 80006ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b0:	4857      	ldr	r0, [pc, #348]	@ (8000810 <Get_Key+0x2ec>)
 80006b2:	f001 fb5d 	bl	8001d70 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1f7      	bne.n	80006ac <Get_Key+0x188>
		key='0';
 80006bc:	4b52      	ldr	r3, [pc, #328]	@ (8000808 <Get_Key+0x2e4>)
 80006be:	2230      	movs	r2, #48	@ 0x30
 80006c0:	701a      	strb	r2, [r3, #0]
		break;
 80006c2:	e0d5      	b.n	8000870 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ca:	484e      	ldr	r0, [pc, #312]	@ (8000804 <Get_Key+0x2e0>)
 80006cc:	f001 fb68 	bl	8001da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80006d0:	2200      	movs	r2, #0
 80006d2:	2110      	movs	r1, #16
 80006d4:	484b      	ldr	r0, [pc, #300]	@ (8000804 <Get_Key+0x2e0>)
 80006d6:	f001 fb63 	bl	8001da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80006da:	2201      	movs	r2, #1
 80006dc:	2120      	movs	r1, #32
 80006de:	4849      	ldr	r0, [pc, #292]	@ (8000804 <Get_Key+0x2e0>)
 80006e0:	f001 fb5e 	bl	8001da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80006e4:	2200      	movs	r2, #0
 80006e6:	2108      	movs	r1, #8
 80006e8:	4846      	ldr	r0, [pc, #280]	@ (8000804 <Get_Key+0x2e0>)
 80006ea:	f001 fb59 	bl	8001da0 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006ee:	2140      	movs	r1, #64	@ 0x40
 80006f0:	4844      	ldr	r0, [pc, #272]	@ (8000804 <Get_Key+0x2e0>)
 80006f2:	f001 fb3d 	bl	8001d70 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00b      	beq.n	8000714 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006fc:	bf00      	nop
 80006fe:	2140      	movs	r1, #64	@ 0x40
 8000700:	4840      	ldr	r0, [pc, #256]	@ (8000804 <Get_Key+0x2e0>)
 8000702:	f001 fb35 	bl	8001d70 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1f8      	bne.n	80006fe <Get_Key+0x1da>
		key='3';
 800070c:	4b3e      	ldr	r3, [pc, #248]	@ (8000808 <Get_Key+0x2e4>)
 800070e:	2233      	movs	r2, #51	@ 0x33
 8000710:	701a      	strb	r2, [r3, #0]
		break;
 8000712:	e0ad      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000714:	2180      	movs	r1, #128	@ 0x80
 8000716:	483d      	ldr	r0, [pc, #244]	@ (800080c <Get_Key+0x2e8>)
 8000718:	f001 fb2a 	bl	8001d70 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d00b      	beq.n	800073a <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000722:	bf00      	nop
 8000724:	2180      	movs	r1, #128	@ 0x80
 8000726:	4839      	ldr	r0, [pc, #228]	@ (800080c <Get_Key+0x2e8>)
 8000728:	f001 fb22 	bl	8001d70 <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f8      	bne.n	8000724 <Get_Key+0x200>
		key='6';
 8000732:	4b35      	ldr	r3, [pc, #212]	@ (8000808 <Get_Key+0x2e4>)
 8000734:	2236      	movs	r2, #54	@ 0x36
 8000736:	701a      	strb	r2, [r3, #0]
		break;
 8000738:	e09a      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800073a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073e:	4834      	ldr	r0, [pc, #208]	@ (8000810 <Get_Key+0x2ec>)
 8000740:	f001 fb16 	bl	8001d70 <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00c      	beq.n	8000764 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800074a:	bf00      	nop
 800074c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000750:	482f      	ldr	r0, [pc, #188]	@ (8000810 <Get_Key+0x2ec>)
 8000752:	f001 fb0d 	bl	8001d70 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1f7      	bne.n	800074c <Get_Key+0x228>
		key='9';
 800075c:	4b2a      	ldr	r3, [pc, #168]	@ (8000808 <Get_Key+0x2e4>)
 800075e:	2239      	movs	r2, #57	@ 0x39
 8000760:	701a      	strb	r2, [r3, #0]
		break;
 8000762:	e085      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000764:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000768:	4829      	ldr	r0, [pc, #164]	@ (8000810 <Get_Key+0x2ec>)
 800076a:	f001 fb01 	bl	8001d70 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00c      	beq.n	800078e <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000774:	bf00      	nop
 8000776:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800077a:	4825      	ldr	r0, [pc, #148]	@ (8000810 <Get_Key+0x2ec>)
 800077c:	f001 faf8 	bl	8001d70 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f7      	bne.n	8000776 <Get_Key+0x252>
		key='#';
 8000786:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <Get_Key+0x2e4>)
 8000788:	2223      	movs	r2, #35	@ 0x23
 800078a:	701a      	strb	r2, [r3, #0]
		break;
 800078c:	e070      	b.n	8000870 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000794:	481b      	ldr	r0, [pc, #108]	@ (8000804 <Get_Key+0x2e0>)
 8000796:	f001 fb03 	bl	8001da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 800079a:	2200      	movs	r2, #0
 800079c:	2110      	movs	r1, #16
 800079e:	4819      	ldr	r0, [pc, #100]	@ (8000804 <Get_Key+0x2e0>)
 80007a0:	f001 fafe 	bl	8001da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80007a4:	2200      	movs	r2, #0
 80007a6:	2120      	movs	r1, #32
 80007a8:	4816      	ldr	r0, [pc, #88]	@ (8000804 <Get_Key+0x2e0>)
 80007aa:	f001 faf9 	bl	8001da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 80007ae:	2201      	movs	r2, #1
 80007b0:	2108      	movs	r1, #8
 80007b2:	4814      	ldr	r0, [pc, #80]	@ (8000804 <Get_Key+0x2e0>)
 80007b4:	f001 faf4 	bl	8001da0 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80007b8:	2140      	movs	r1, #64	@ 0x40
 80007ba:	4812      	ldr	r0, [pc, #72]	@ (8000804 <Get_Key+0x2e0>)
 80007bc:	f001 fad8 	bl	8001d70 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00b      	beq.n	80007de <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007c6:	bf00      	nop
 80007c8:	2140      	movs	r1, #64	@ 0x40
 80007ca:	480e      	ldr	r0, [pc, #56]	@ (8000804 <Get_Key+0x2e0>)
 80007cc:	f001 fad0 	bl	8001d70 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f8      	bne.n	80007c8 <Get_Key+0x2a4>
		key='A';
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <Get_Key+0x2e4>)
 80007d8:	2241      	movs	r2, #65	@ 0x41
 80007da:	701a      	strb	r2, [r3, #0]
		break;
 80007dc:	e048      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007de:	2180      	movs	r1, #128	@ 0x80
 80007e0:	480a      	ldr	r0, [pc, #40]	@ (800080c <Get_Key+0x2e8>)
 80007e2:	f001 fac5 	bl	8001d70 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d013      	beq.n	8000814 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ec:	bf00      	nop
 80007ee:	2180      	movs	r1, #128	@ 0x80
 80007f0:	4806      	ldr	r0, [pc, #24]	@ (800080c <Get_Key+0x2e8>)
 80007f2:	f001 fabd 	bl	8001d70 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f8      	bne.n	80007ee <Get_Key+0x2ca>
		key='B';
 80007fc:	4b02      	ldr	r3, [pc, #8]	@ (8000808 <Get_Key+0x2e4>)
 80007fe:	2242      	movs	r2, #66	@ 0x42
 8000800:	701a      	strb	r2, [r3, #0]
		break;
 8000802:	e035      	b.n	8000870 <Get_Key+0x34c>
 8000804:	40020400 	.word	0x40020400
 8000808:	20000034 	.word	0x20000034
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000814:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000818:	481a      	ldr	r0, [pc, #104]	@ (8000884 <Get_Key+0x360>)
 800081a:	f001 faa9 	bl	8001d70 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00c      	beq.n	800083e <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000824:	bf00      	nop
 8000826:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800082a:	4816      	ldr	r0, [pc, #88]	@ (8000884 <Get_Key+0x360>)
 800082c:	f001 faa0 	bl	8001d70 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1f7      	bne.n	8000826 <Get_Key+0x302>
		key='C';
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <Get_Key+0x364>)
 8000838:	2243      	movs	r2, #67	@ 0x43
 800083a:	701a      	strb	r2, [r3, #0]
		break;
 800083c:	e018      	b.n	8000870 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800083e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000842:	4810      	ldr	r0, [pc, #64]	@ (8000884 <Get_Key+0x360>)
 8000844:	f001 fa94 	bl	8001d70 <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00c      	beq.n	8000868 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800084e:	bf00      	nop
 8000850:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000854:	480b      	ldr	r0, [pc, #44]	@ (8000884 <Get_Key+0x360>)
 8000856:	f001 fa8b 	bl	8001d70 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1f7      	bne.n	8000850 <Get_Key+0x32c>
		key='D';
 8000860:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <Get_Key+0x364>)
 8000862:	2244      	movs	r2, #68	@ 0x44
 8000864:	701a      	strb	r2, [r3, #0]
		break;
 8000866:	e003      	b.n	8000870 <Get_Key+0x34c>
	while(done)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	f47f ae60 	bne.w	8000530 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000870:	2120      	movs	r1, #32
 8000872:	4804      	ldr	r0, [pc, #16]	@ (8000884 <Get_Key+0x360>)
 8000874:	f001 faad 	bl	8001dd2 <HAL_GPIO_TogglePin>
	return(key);
 8000878:	4b03      	ldr	r3, [pc, #12]	@ (8000888 <Get_Key+0x364>)
 800087a:	781b      	ldrb	r3, [r3, #0]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40020000 	.word	0x40020000
 8000888:	20000034 	.word	0x20000034

0800088c <main>:
  * @retval int
  */
bool sensorTriggered = false;

int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f000 ffb6 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f84e 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f000 f904 	bl	8000aa4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800089c:	f000 f8d8 	bl	8000a50 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008a0:	f000 f8a8 	bl	80009f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008a4:	f003 fbba 	bl	800401c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008a8:	4a15      	ldr	r2, [pc, #84]	@ (8000900 <main+0x74>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	4815      	ldr	r0, [pc, #84]	@ (8000904 <main+0x78>)
 80008ae:	f003 fbff 	bl	80040b0 <osThreadNew>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a14      	ldr	r2, [pc, #80]	@ (8000908 <main+0x7c>)
 80008b6:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80008b8:	4a14      	ldr	r2, [pc, #80]	@ (800090c <main+0x80>)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4814      	ldr	r0, [pc, #80]	@ (8000910 <main+0x84>)
 80008be:	f003 fbf7 	bl	80040b0 <osThreadNew>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a13      	ldr	r2, [pc, #76]	@ (8000914 <main+0x88>)
 80008c6:	6013      	str	r3, [r2, #0]

  /* creation of buzzer */
  buzzerHandle = osThreadNew(StartTask03, NULL, &buzzer_attributes);
 80008c8:	4a13      	ldr	r2, [pc, #76]	@ (8000918 <main+0x8c>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	4813      	ldr	r0, [pc, #76]	@ (800091c <main+0x90>)
 80008ce:	f003 fbef 	bl	80040b0 <osThreadNew>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a12      	ldr	r2, [pc, #72]	@ (8000920 <main+0x94>)
 80008d6:	6013      	str	r3, [r2, #0]

  /* creation of sensor */
  sensorHandle = osThreadNew(StartTask04, NULL, &sensor_attributes);
 80008d8:	4a12      	ldr	r2, [pc, #72]	@ (8000924 <main+0x98>)
 80008da:	2100      	movs	r1, #0
 80008dc:	4812      	ldr	r0, [pc, #72]	@ (8000928 <main+0x9c>)
 80008de:	f003 fbe7 	bl	80040b0 <osThreadNew>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4a11      	ldr	r2, [pc, #68]	@ (800092c <main+0xa0>)
 80008e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008e8:	f003 fbbc 	bl	8004064 <osKernelStart>
  osDelay(10000);
 80008ec:	f242 7010 	movw	r0, #10000	@ 0x2710
 80008f0:	f003 fc70 	bl	80041d4 <osDelay>
  sensorTriggered = true;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <main+0xa4>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	08007970 	.word	0x08007970
 8000904:	08000bf9 	.word	0x08000bf9
 8000908:	200000d4 	.word	0x200000d4
 800090c:	08007994 	.word	0x08007994
 8000910:	08000c45 	.word	0x08000c45
 8000914:	200000d8 	.word	0x200000d8
 8000918:	080079b8 	.word	0x080079b8
 800091c:	08000e61 	.word	0x08000e61
 8000920:	200000dc 	.word	0x200000dc
 8000924:	080079dc 	.word	0x080079dc
 8000928:	08000ec1 	.word	0x08000ec1
 800092c:	200000e0 	.word	0x200000e0
 8000930:	200000e4 	.word	0x200000e4

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b094      	sub	sp, #80	@ 0x50
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	2234      	movs	r2, #52	@ 0x34
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f006 f8e8 	bl	8006b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	4b23      	ldr	r3, [pc, #140]	@ (80009ec <SystemClock_Config+0xb8>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	4a22      	ldr	r2, [pc, #136]	@ (80009ec <SystemClock_Config+0xb8>)
 8000962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000966:	6413      	str	r3, [r2, #64]	@ 0x40
 8000968:	4b20      	ldr	r3, [pc, #128]	@ (80009ec <SystemClock_Config+0xb8>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000974:	2300      	movs	r3, #0
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <SystemClock_Config+0xbc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000980:	4a1b      	ldr	r2, [pc, #108]	@ (80009f0 <SystemClock_Config+0xbc>)
 8000982:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <SystemClock_Config+0xbc>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000994:	2302      	movs	r3, #2
 8000996:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	2301      	movs	r3, #1
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099c:	2310      	movs	r3, #16
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 faef 	bl	8002f8c <HAL_RCC_OscConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80009b4:	f000 fabe 	bl	8000f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b8:	230f      	movs	r3, #15
 80009ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 ffe4 	bl	80029a0 <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009de:	f000 faa9 	bl	8000f34 <Error_Handler>
  }
}
 80009e2:	bf00      	nop
 80009e4:	3750      	adds	r7, #80	@ 0x50
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40007000 	.word	0x40007000

080009f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <MX_I2C1_Init+0x50>)
 80009fa:	4a13      	ldr	r2, [pc, #76]	@ (8000a48 <MX_I2C1_Init+0x54>)
 80009fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009fe:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a00:	4a12      	ldr	r2, [pc, #72]	@ (8000a4c <MX_I2C1_Init+0x58>)
 8000a02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a32:	f001 f9e9 	bl	8001e08 <HAL_I2C_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a3c:	f000 fa7a 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000038 	.word	0x20000038
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	00061a80 	.word	0x00061a80

08000a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a54:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	@ (8000aa0 <MX_USART2_UART_Init+0x50>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a5c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_USART2_UART_Init+0x4c>)
 8000a88:	f002 ffc0 	bl	8003a0c <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a92:	f000 fa4f 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000008c 	.word	0x2000008c
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	@ 0x28
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b4a      	ldr	r3, [pc, #296]	@ (8000be8 <MX_GPIO_Init+0x144>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a49      	ldr	r2, [pc, #292]	@ (8000be8 <MX_GPIO_Init+0x144>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b47      	ldr	r3, [pc, #284]	@ (8000be8 <MX_GPIO_Init+0x144>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b43      	ldr	r3, [pc, #268]	@ (8000be8 <MX_GPIO_Init+0x144>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a42      	ldr	r2, [pc, #264]	@ (8000be8 <MX_GPIO_Init+0x144>)
 8000ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b40      	ldr	r3, [pc, #256]	@ (8000be8 <MX_GPIO_Init+0x144>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	4b3c      	ldr	r3, [pc, #240]	@ (8000be8 <MX_GPIO_Init+0x144>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a3b      	ldr	r2, [pc, #236]	@ (8000be8 <MX_GPIO_Init+0x144>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b39      	ldr	r3, [pc, #228]	@ (8000be8 <MX_GPIO_Init+0x144>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b35      	ldr	r3, [pc, #212]	@ (8000be8 <MX_GPIO_Init+0x144>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a34      	ldr	r2, [pc, #208]	@ (8000be8 <MX_GPIO_Init+0x144>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b32      	ldr	r3, [pc, #200]	@ (8000be8 <MX_GPIO_Init+0x144>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2103      	movs	r1, #3
 8000b2e:	482f      	ldr	r0, [pc, #188]	@ (8000bec <MX_GPIO_Init+0x148>)
 8000b30:	f001 f936 	bl	8001da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|KC0_Pin|KC3_Pin|KC1_Pin
 8000b34:	2200      	movs	r2, #0
 8000b36:	f240 4139 	movw	r1, #1081	@ 0x439
 8000b3a:	482d      	ldr	r0, [pc, #180]	@ (8000bf0 <MX_GPIO_Init+0x14c>)
 8000b3c:	f001 f930 	bl	8001da0 <HAL_GPIO_WritePin>
                          |KC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b40:	2303      	movs	r3, #3
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4825      	ldr	r0, [pc, #148]	@ (8000bec <MX_GPIO_Init+0x148>)
 8000b58:	f000 ff76 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 KC0_Pin KC3_Pin KC1_Pin
                           KC2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|KC0_Pin|KC3_Pin|KC1_Pin
 8000b5c:	f240 4339 	movw	r3, #1081	@ 0x439
 8000b60:	617b      	str	r3, [r7, #20]
                          |KC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	481e      	ldr	r0, [pc, #120]	@ (8000bf0 <MX_GPIO_Init+0x14c>)
 8000b76:	f000 ff67 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000b7a:	2380      	movs	r3, #128	@ 0x80
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4819      	ldr	r0, [pc, #100]	@ (8000bf4 <MX_GPIO_Init+0x150>)
 8000b8e:	f000 ff5b 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000b92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4811      	ldr	r0, [pc, #68]	@ (8000bec <MX_GPIO_Init+0x148>)
 8000ba8:	f000 ff4e 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480a      	ldr	r0, [pc, #40]	@ (8000bec <MX_GPIO_Init+0x148>)
 8000bc2:	f000 ff41 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000bc6:	2340      	movs	r3, #64	@ 0x40
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <MX_GPIO_Init+0x14c>)
 8000bda:	f000 ff35 	bl	8001a48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	@ 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	40020400 	.word	0x40020400
 8000bf4:	40020800 	.word	0x40020800

08000bf8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f003 fae7 	bl	80041d4 <osDelay>
    if (armed){
 8000c06:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <StartDefaultTask+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00a      	beq.n	8000c24 <StartDefaultTask+0x2c>
    	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0 , 1);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2101      	movs	r1, #1
 8000c12:	480b      	ldr	r0, [pc, #44]	@ (8000c40 <StartDefaultTask+0x48>)
 8000c14:	f001 f8c4 	bl	8001da0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1 , 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	4808      	ldr	r0, [pc, #32]	@ (8000c40 <StartDefaultTask+0x48>)
 8000c1e:	f001 f8bf 	bl	8001da0 <HAL_GPIO_WritePin>
 8000c22:	e7ed      	b.n	8000c00 <StartDefaultTask+0x8>
    }else {
    	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0 , 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2101      	movs	r1, #1
 8000c28:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <StartDefaultTask+0x48>)
 8000c2a:	f001 f8b9 	bl	8001da0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1 , 1);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2102      	movs	r1, #2
 8000c32:	4803      	ldr	r0, [pc, #12]	@ (8000c40 <StartDefaultTask+0x48>)
 8000c34:	f001 f8b4 	bl	8001da0 <HAL_GPIO_WritePin>
    osDelay(1);
 8000c38:	e7e2      	b.n	8000c00 <StartDefaultTask+0x8>
 8000c3a:	bf00      	nop
 8000c3c:	200000f5 	.word	0x200000f5
 8000c40:	40020000 	.word	0x40020000

08000c44 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	SSD1306_Init();
 8000c4c:	f000 f978 	bl	8000f40 <SSD1306_Init>
	SSD1306_Clear();
 8000c50:	f000 fb99 	bl	8001386 <SSD1306_Clear>
	SSD1306_GotoXY (0, 0);
 8000c54:	2100      	movs	r1, #0
 8000c56:	2000      	movs	r0, #0
 8000c58:	f000 fadc 	bl	8001214 <SSD1306_GotoXY>
	SSD1306_Puts ("Enter Code:", &Font_11x18, 1);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4975      	ldr	r1, [pc, #468]	@ (8000e34 <StartTask02+0x1f0>)
 8000c60:	4875      	ldr	r0, [pc, #468]	@ (8000e38 <StartTask02+0x1f4>)
 8000c62:	f000 fb6b 	bl	800133c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000c66:	f000 fa2f 	bl	80010c8 <SSD1306_UpdateScreen>
	SSD1306_GotoXY (0, 40);
 8000c6a:	2128      	movs	r1, #40	@ 0x28
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 fad1 	bl	8001214 <SSD1306_GotoXY>
	int i = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	   osDelay(10);
 8000c76:	200a      	movs	r0, #10
 8000c78:	f003 faac 	bl	80041d4 <osDelay>

	  if(!armed){
 8000c7c:	4b6f      	ldr	r3, [pc, #444]	@ (8000e3c <StartTask02+0x1f8>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	f083 0301 	eor.w	r3, r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d04a      	beq.n	8000d20 <StartTask02+0xdc>
		  key = Get_Key();
 8000c8a:	f7ff fc4b 	bl	8000524 <Get_Key>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b6b      	ldr	r3, [pc, #428]	@ (8000e40 <StartTask02+0x1fc>)
 8000c94:	701a      	strb	r2, [r3, #0]
		  password[i] = key;
 8000c96:	4b6a      	ldr	r3, [pc, #424]	@ (8000e40 <StartTask02+0x1fc>)
 8000c98:	7819      	ldrb	r1, [r3, #0]
 8000c9a:	4a6a      	ldr	r2, [pc, #424]	@ (8000e44 <StartTask02+0x200>)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	460a      	mov	r2, r1
 8000ca2:	701a      	strb	r2, [r3, #0]
			  SSD1306_Puts (password+i, &Font_11x18, 1);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4a67      	ldr	r2, [pc, #412]	@ (8000e44 <StartTask02+0x200>)
 8000ca8:	4413      	add	r3, r2
 8000caa:	2201      	movs	r2, #1
 8000cac:	4961      	ldr	r1, [pc, #388]	@ (8000e34 <StartTask02+0x1f0>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fb44 	bl	800133c <SSD1306_Puts>
			  i++;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
			  SSD1306_UpdateScreen();
 8000cba:	f000 fa05 	bl	80010c8 <SSD1306_UpdateScreen>
			  if(strlen(password)>3){
 8000cbe:	4861      	ldr	r0, [pc, #388]	@ (8000e44 <StartTask02+0x200>)
 8000cc0:	f7ff fab0 	bl	8000224 <strlen>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	f240 80b0 	bls.w	8000e2c <StartTask02+0x1e8>
				  i=0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
				  armed = true;
 8000cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8000e3c <StartTask02+0x1f8>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
				  SSD1306_Clear();
 8000cd6:	f000 fb56 	bl	8001386 <SSD1306_Clear>
				  SSD1306_GotoXY (0, 0);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 fa99 	bl	8001214 <SSD1306_GotoXY>
				  SSD1306_Puts ("ARMED", &Font_11x18, 1);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4953      	ldr	r1, [pc, #332]	@ (8000e34 <StartTask02+0x1f0>)
 8000ce6:	4858      	ldr	r0, [pc, #352]	@ (8000e48 <StartTask02+0x204>)
 8000ce8:	f000 fb28 	bl	800133c <SSD1306_Puts>
				  SSD1306_UpdateScreen();
 8000cec:	f000 f9ec 	bl	80010c8 <SSD1306_UpdateScreen>
				  osDelay(1000);
 8000cf0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cf4:	f003 fa6e 	bl	80041d4 <osDelay>
				  SSD1306_Clear();
 8000cf8:	f000 fb45 	bl	8001386 <SSD1306_Clear>
				  		  	SSD1306_GotoXY (0, 0);
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 fa88 	bl	8001214 <SSD1306_GotoXY>
				  		  	SSD1306_Puts ("Enter Code:", &Font_11x18, 1);
 8000d04:	2201      	movs	r2, #1
 8000d06:	494b      	ldr	r1, [pc, #300]	@ (8000e34 <StartTask02+0x1f0>)
 8000d08:	484b      	ldr	r0, [pc, #300]	@ (8000e38 <StartTask02+0x1f4>)
 8000d0a:	f000 fb17 	bl	800133c <SSD1306_Puts>
				  		  	SSD1306_UpdateScreen();
 8000d0e:	f000 f9db 	bl	80010c8 <SSD1306_UpdateScreen>
				  		  	SSD1306_GotoXY (0, 40);
 8000d12:	2128      	movs	r1, #40	@ 0x28
 8000d14:	2000      	movs	r0, #0
 8000d16:	f000 fa7d 	bl	8001214 <SSD1306_GotoXY>
				  		  	i = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	e085      	b.n	8000e2c <StartTask02+0x1e8>
			  }
	  } else {
		  // armed

		  key = Get_Key();
 8000d20:	f7ff fc00 	bl	8000524 <Get_Key>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b45      	ldr	r3, [pc, #276]	@ (8000e40 <StartTask02+0x1fc>)
 8000d2a:	701a      	strb	r2, [r3, #0]
		 	  	  hold[i] = key;
 8000d2c:	4b44      	ldr	r3, [pc, #272]	@ (8000e40 <StartTask02+0x1fc>)
 8000d2e:	7819      	ldrb	r1, [r3, #0]
 8000d30:	4a46      	ldr	r2, [pc, #280]	@ (8000e4c <StartTask02+0x208>)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4413      	add	r3, r2
 8000d36:	460a      	mov	r2, r1
 8000d38:	701a      	strb	r2, [r3, #0]
		 	  	  i++;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
				  SSD1306_Puts ("*", &Font_11x18, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	493c      	ldr	r1, [pc, #240]	@ (8000e34 <StartTask02+0x1f0>)
 8000d44:	4842      	ldr	r0, [pc, #264]	@ (8000e50 <StartTask02+0x20c>)
 8000d46:	f000 faf9 	bl	800133c <SSD1306_Puts>
		 	  	  SSD1306_UpdateScreen();
 8000d4a:	f000 f9bd 	bl	80010c8 <SSD1306_UpdateScreen>
		 	  	  if(strlen(hold) > 3){
 8000d4e:	483f      	ldr	r0, [pc, #252]	@ (8000e4c <StartTask02+0x208>)
 8000d50:	f7ff fa68 	bl	8000224 <strlen>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d968      	bls.n	8000e2c <StartTask02+0x1e8>
		 	  		  if (0 == strcmp(password,hold)){
 8000d5a:	493c      	ldr	r1, [pc, #240]	@ (8000e4c <StartTask02+0x208>)
 8000d5c:	4839      	ldr	r0, [pc, #228]	@ (8000e44 <StartTask02+0x200>)
 8000d5e:	f7ff fa57 	bl	8000210 <strcmp>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d136      	bne.n	8000dd6 <StartTask02+0x192>
//		 	  			  // give access
		 	  			SSD1306_Clear();
 8000d68:	f000 fb0d 	bl	8001386 <SSD1306_Clear>
		 	  			SSD1306_GotoXY (0, 0);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 fa50 	bl	8001214 <SSD1306_GotoXY>
		 	  			SSD1306_Puts ("NOT ARMED", &Font_11x18, 1);
 8000d74:	2201      	movs	r2, #1
 8000d76:	492f      	ldr	r1, [pc, #188]	@ (8000e34 <StartTask02+0x1f0>)
 8000d78:	4836      	ldr	r0, [pc, #216]	@ (8000e54 <StartTask02+0x210>)
 8000d7a:	f000 fadf 	bl	800133c <SSD1306_Puts>
		 	  			i=0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
		 	  			// reset the class variables
		 	  			armed=false;
 8000d82:	4b2e      	ldr	r3, [pc, #184]	@ (8000e3c <StartTask02+0x1f8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
		 	  			sensorTriggered = false;
 8000d88:	4b33      	ldr	r3, [pc, #204]	@ (8000e58 <StartTask02+0x214>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
		 	  			memset(hold, 0, 4);
 8000d8e:	2204      	movs	r2, #4
 8000d90:	2100      	movs	r1, #0
 8000d92:	482e      	ldr	r0, [pc, #184]	@ (8000e4c <StartTask02+0x208>)
 8000d94:	f005 fec0 	bl	8006b18 <memset>
		 	  			memset(password, 0, 4);
 8000d98:	2204      	movs	r2, #4
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4829      	ldr	r0, [pc, #164]	@ (8000e44 <StartTask02+0x200>)
 8000d9e:	f005 febb 	bl	8006b18 <memset>
						SSD1306_UpdateScreen();
 8000da2:	f000 f991 	bl	80010c8 <SSD1306_UpdateScreen>
						osDelay(1000);
 8000da6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000daa:	f003 fa13 	bl	80041d4 <osDelay>
						SSD1306_Clear();
 8000dae:	f000 faea 	bl	8001386 <SSD1306_Clear>
						SSD1306_GotoXY (0, 0);
 8000db2:	2100      	movs	r1, #0
 8000db4:	2000      	movs	r0, #0
 8000db6:	f000 fa2d 	bl	8001214 <SSD1306_GotoXY>
						SSD1306_Puts ("Enter Code:", &Font_11x18, 1);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	491d      	ldr	r1, [pc, #116]	@ (8000e34 <StartTask02+0x1f0>)
 8000dbe:	481e      	ldr	r0, [pc, #120]	@ (8000e38 <StartTask02+0x1f4>)
 8000dc0:	f000 fabc 	bl	800133c <SSD1306_Puts>
						SSD1306_UpdateScreen();
 8000dc4:	f000 f980 	bl	80010c8 <SSD1306_UpdateScreen>
						SSD1306_GotoXY (0, 40);
 8000dc8:	2128      	movs	r1, #40	@ 0x28
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f000 fa22 	bl	8001214 <SSD1306_GotoXY>
						SSD1306_UpdateScreen();
 8000dd0:	f000 f97a 	bl	80010c8 <SSD1306_UpdateScreen>
 8000dd4:	e02a      	b.n	8000e2c <StartTask02+0x1e8>
		 	  		  }else{
		 	  			  //Wrong password
		 	  			  // clear hold and screen
		 	  			memset(hold, 0, 4);
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	2100      	movs	r1, #0
 8000dda:	481c      	ldr	r0, [pc, #112]	@ (8000e4c <StartTask02+0x208>)
 8000ddc:	f005 fe9c 	bl	8006b18 <memset>
		 	  			i=0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
		 	  			SSD1306_Clear();
 8000de4:	f000 facf 	bl	8001386 <SSD1306_Clear>
						SSD1306_GotoXY (0, 0);
 8000de8:	2100      	movs	r1, #0
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 fa12 	bl	8001214 <SSD1306_GotoXY>
						SSD1306_Puts ("Wrong Code", &Font_11x18, 1);
 8000df0:	2201      	movs	r2, #1
 8000df2:	4910      	ldr	r1, [pc, #64]	@ (8000e34 <StartTask02+0x1f0>)
 8000df4:	4819      	ldr	r0, [pc, #100]	@ (8000e5c <StartTask02+0x218>)
 8000df6:	f000 faa1 	bl	800133c <SSD1306_Puts>
						SSD1306_UpdateScreen();
 8000dfa:	f000 f965 	bl	80010c8 <SSD1306_UpdateScreen>
						osDelay(1000);
 8000dfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e02:	f003 f9e7 	bl	80041d4 <osDelay>
		 	  			SSD1306_Clear();
 8000e06:	f000 fabe 	bl	8001386 <SSD1306_Clear>
		 				SSD1306_GotoXY (0, 0);
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 fa01 	bl	8001214 <SSD1306_GotoXY>
		 				SSD1306_Puts ("Enter Code:", &Font_11x18, 1);
 8000e12:	2201      	movs	r2, #1
 8000e14:	4907      	ldr	r1, [pc, #28]	@ (8000e34 <StartTask02+0x1f0>)
 8000e16:	4808      	ldr	r0, [pc, #32]	@ (8000e38 <StartTask02+0x1f4>)
 8000e18:	f000 fa90 	bl	800133c <SSD1306_Puts>
		 				SSD1306_UpdateScreen();
 8000e1c:	f000 f954 	bl	80010c8 <SSD1306_UpdateScreen>
		 				SSD1306_GotoXY (0, 40);
 8000e20:	2128      	movs	r1, #40	@ 0x28
 8000e22:	2000      	movs	r0, #0
 8000e24:	f000 f9f6 	bl	8001214 <SSD1306_GotoXY>
		 	  		  	SSD1306_UpdateScreen();
 8000e28:	f000 f94e 	bl	80010c8 <SSD1306_UpdateScreen>
		 	  		  }
		 	  	  }
	  }
	  /* D10 to D7 as input pins for row 0 to row 3. D6 to D3 as output for column pins C1 to C3*/
	  osDelay(200);
 8000e2c:	20c8      	movs	r0, #200	@ 0xc8
 8000e2e:	f003 f9d1 	bl	80041d4 <osDelay>
	   osDelay(10);
 8000e32:	e720      	b.n	8000c76 <StartTask02+0x32>
 8000e34:	20000000 	.word	0x20000000
 8000e38:	08006bcc 	.word	0x08006bcc
 8000e3c:	200000f5 	.word	0x200000f5
 8000e40:	20000034 	.word	0x20000034
 8000e44:	200000f0 	.word	0x200000f0
 8000e48:	08006bd8 	.word	0x08006bd8
 8000e4c:	200000e8 	.word	0x200000e8
 8000e50:	08006be0 	.word	0x08006be0
 8000e54:	08006be4 	.word	0x08006be4
 8000e58:	200000e4 	.word	0x200000e4
 8000e5c:	08006bf0 	.word	0x08006bf0

08000e60 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {

	  if(armed){
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <StartTask03+0x54>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d018      	beq.n	8000ea2 <StartTask03+0x42>
		  if (sensorTriggered){
 8000e70:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <StartTask03+0x58>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00e      	beq.n	8000e96 <StartTask03+0x36>
			  // Activate Buzzer for 10 seconds
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	480f      	ldr	r0, [pc, #60]	@ (8000ebc <StartTask03+0x5c>)
 8000e7e:	f000 ff8f 	bl	8001da0 <HAL_GPIO_WritePin>
			  osDelay(10000);
 8000e82:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000e86:	f003 f9a5 	bl	80041d4 <osDelay>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	480b      	ldr	r0, [pc, #44]	@ (8000ebc <StartTask03+0x5c>)
 8000e90:	f000 ff86 	bl	8001da0 <HAL_GPIO_WritePin>
 8000e94:	e00a      	b.n	8000eac <StartTask03+0x4c>
		  } else {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 , 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2101      	movs	r1, #1
 8000e9a:	4808      	ldr	r0, [pc, #32]	@ (8000ebc <StartTask03+0x5c>)
 8000e9c:	f000 ff80 	bl	8001da0 <HAL_GPIO_WritePin>
 8000ea0:	e004      	b.n	8000eac <StartTask03+0x4c>
		  }
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <StartTask03+0x5c>)
 8000ea8:	f000 ff7a 	bl	8001da0 <HAL_GPIO_WritePin>
	  }
	  osDelay(50);
 8000eac:	2032      	movs	r0, #50	@ 0x32
 8000eae:	f003 f991 	bl	80041d4 <osDelay>
	  if(armed){
 8000eb2:	e7d9      	b.n	8000e68 <StartTask03+0x8>
 8000eb4:	200000f5 	.word	0x200000f5
 8000eb8:	200000e4 	.word	0x200000e4
 8000ebc:	40020400 	.word	0x40020400

08000ec0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	osDelay(100);
 8000ec8:	2064      	movs	r0, #100	@ 0x64
 8000eca:	f003 f983 	bl	80041d4 <osDelay>

	int value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000ece:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ed2:	480c      	ldr	r0, [pc, #48]	@ (8000f04 <StartTask04+0x44>)
 8000ed4:	f000 ff4c 	bl	8001d70 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60fb      	str	r3, [r7, #12]

    if(armed){
 8000edc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <StartTask04+0x48>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00a      	beq.n	8000efa <StartTask04+0x3a>
		if (value) {
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d004      	beq.n	8000ef4 <StartTask04+0x34>
			//sensorTriggered = true; // Motion detected
			osDelay(500);
 8000eea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000eee:	f003 f971 	bl	80041d4 <osDelay>
 8000ef2:	e002      	b.n	8000efa <StartTask04+0x3a>
		} else {
			sensorTriggered = false;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <StartTask04+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
		}
    }
    osDelay(50);
 8000efa:	2032      	movs	r0, #50	@ 0x32
 8000efc:	f003 f96a 	bl	80041d4 <osDelay>
  {
 8000f00:	e7e2      	b.n	8000ec8 <StartTask04+0x8>
 8000f02:	bf00      	nop
 8000f04:	40020000 	.word	0x40020000
 8000f08:	200000f5 	.word	0x200000f5
 8000f0c:	200000e4 	.word	0x200000e4

08000f10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d101      	bne.n	8000f26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f22:	f000 fc8f 	bl	8001844 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40001000 	.word	0x40001000

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <Error_Handler+0x8>

08000f40 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f46:	f000 fa27 	bl	8001398 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f4a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2178      	movs	r1, #120	@ 0x78
 8000f52:	485b      	ldr	r0, [pc, #364]	@ (80010c0 <SSD1306_Init+0x180>)
 8000f54:	f001 f99a 	bl	800228c <HAL_I2C_IsDeviceReady>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e0a9      	b.n	80010b6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000f62:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000f66:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f68:	e002      	b.n	8000f70 <SSD1306_Init+0x30>
		p--;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f9      	bne.n	8000f6a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000f76:	22ae      	movs	r2, #174	@ 0xae
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2078      	movs	r0, #120	@ 0x78
 8000f7c:	f000 fa88 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000f80:	2220      	movs	r2, #32
 8000f82:	2100      	movs	r1, #0
 8000f84:	2078      	movs	r0, #120	@ 0x78
 8000f86:	f000 fa83 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000f8a:	2210      	movs	r2, #16
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2078      	movs	r0, #120	@ 0x78
 8000f90:	f000 fa7e 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f94:	22b0      	movs	r2, #176	@ 0xb0
 8000f96:	2100      	movs	r1, #0
 8000f98:	2078      	movs	r0, #120	@ 0x78
 8000f9a:	f000 fa79 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000f9e:	22c8      	movs	r2, #200	@ 0xc8
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2078      	movs	r0, #120	@ 0x78
 8000fa4:	f000 fa74 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	2078      	movs	r0, #120	@ 0x78
 8000fae:	f000 fa6f 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2078      	movs	r0, #120	@ 0x78
 8000fb8:	f000 fa6a 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000fbc:	2240      	movs	r2, #64	@ 0x40
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2078      	movs	r0, #120	@ 0x78
 8000fc2:	f000 fa65 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000fc6:	2281      	movs	r2, #129	@ 0x81
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2078      	movs	r0, #120	@ 0x78
 8000fcc:	f000 fa60 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000fd0:	22ff      	movs	r2, #255	@ 0xff
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2078      	movs	r0, #120	@ 0x78
 8000fd6:	f000 fa5b 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000fda:	22a1      	movs	r2, #161	@ 0xa1
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2078      	movs	r0, #120	@ 0x78
 8000fe0:	f000 fa56 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000fe4:	22a6      	movs	r2, #166	@ 0xa6
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2078      	movs	r0, #120	@ 0x78
 8000fea:	f000 fa51 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000fee:	22a8      	movs	r2, #168	@ 0xa8
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2078      	movs	r0, #120	@ 0x78
 8000ff4:	f000 fa4c 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000ff8:	223f      	movs	r2, #63	@ 0x3f
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2078      	movs	r0, #120	@ 0x78
 8000ffe:	f000 fa47 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001002:	22a4      	movs	r2, #164	@ 0xa4
 8001004:	2100      	movs	r1, #0
 8001006:	2078      	movs	r0, #120	@ 0x78
 8001008:	f000 fa42 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800100c:	22d3      	movs	r2, #211	@ 0xd3
 800100e:	2100      	movs	r1, #0
 8001010:	2078      	movs	r0, #120	@ 0x78
 8001012:	f000 fa3d 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2078      	movs	r0, #120	@ 0x78
 800101c:	f000 fa38 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001020:	22d5      	movs	r2, #213	@ 0xd5
 8001022:	2100      	movs	r1, #0
 8001024:	2078      	movs	r0, #120	@ 0x78
 8001026:	f000 fa33 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800102a:	22f0      	movs	r2, #240	@ 0xf0
 800102c:	2100      	movs	r1, #0
 800102e:	2078      	movs	r0, #120	@ 0x78
 8001030:	f000 fa2e 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001034:	22d9      	movs	r2, #217	@ 0xd9
 8001036:	2100      	movs	r1, #0
 8001038:	2078      	movs	r0, #120	@ 0x78
 800103a:	f000 fa29 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800103e:	2222      	movs	r2, #34	@ 0x22
 8001040:	2100      	movs	r1, #0
 8001042:	2078      	movs	r0, #120	@ 0x78
 8001044:	f000 fa24 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001048:	22da      	movs	r2, #218	@ 0xda
 800104a:	2100      	movs	r1, #0
 800104c:	2078      	movs	r0, #120	@ 0x78
 800104e:	f000 fa1f 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001052:	2212      	movs	r2, #18
 8001054:	2100      	movs	r1, #0
 8001056:	2078      	movs	r0, #120	@ 0x78
 8001058:	f000 fa1a 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800105c:	22db      	movs	r2, #219	@ 0xdb
 800105e:	2100      	movs	r1, #0
 8001060:	2078      	movs	r0, #120	@ 0x78
 8001062:	f000 fa15 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001066:	2220      	movs	r2, #32
 8001068:	2100      	movs	r1, #0
 800106a:	2078      	movs	r0, #120	@ 0x78
 800106c:	f000 fa10 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001070:	228d      	movs	r2, #141	@ 0x8d
 8001072:	2100      	movs	r1, #0
 8001074:	2078      	movs	r0, #120	@ 0x78
 8001076:	f000 fa0b 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800107a:	2214      	movs	r2, #20
 800107c:	2100      	movs	r1, #0
 800107e:	2078      	movs	r0, #120	@ 0x78
 8001080:	f000 fa06 	bl	8001490 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001084:	22af      	movs	r2, #175	@ 0xaf
 8001086:	2100      	movs	r1, #0
 8001088:	2078      	movs	r0, #120	@ 0x78
 800108a:	f000 fa01 	bl	8001490 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800108e:	222e      	movs	r2, #46	@ 0x2e
 8001090:	2100      	movs	r1, #0
 8001092:	2078      	movs	r0, #120	@ 0x78
 8001094:	f000 f9fc 	bl	8001490 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001098:	2000      	movs	r0, #0
 800109a:	f000 f843 	bl	8001124 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800109e:	f000 f813 	bl	80010c8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <SSD1306_Init+0x184>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <SSD1306_Init+0x184>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80010ae:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <SSD1306_Init+0x184>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000038 	.word	0x20000038
 80010c4:	200004f8 	.word	0x200004f8

080010c8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80010ce:	2300      	movs	r3, #0
 80010d0:	71fb      	strb	r3, [r7, #7]
 80010d2:	e01d      	b.n	8001110 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	3b50      	subs	r3, #80	@ 0x50
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	2100      	movs	r1, #0
 80010de:	2078      	movs	r0, #120	@ 0x78
 80010e0:	f000 f9d6 	bl	8001490 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2078      	movs	r0, #120	@ 0x78
 80010ea:	f000 f9d1 	bl	8001490 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80010ee:	2210      	movs	r2, #16
 80010f0:	2100      	movs	r1, #0
 80010f2:	2078      	movs	r0, #120	@ 0x78
 80010f4:	f000 f9cc 	bl	8001490 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	01db      	lsls	r3, r3, #7
 80010fc:	4a08      	ldr	r2, [pc, #32]	@ (8001120 <SSD1306_UpdateScreen+0x58>)
 80010fe:	441a      	add	r2, r3
 8001100:	2380      	movs	r3, #128	@ 0x80
 8001102:	2140      	movs	r1, #64	@ 0x40
 8001104:	2078      	movs	r0, #120	@ 0x78
 8001106:	f000 f95d 	bl	80013c4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	3301      	adds	r3, #1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b07      	cmp	r3, #7
 8001114:	d9de      	bls.n	80010d4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200000f8 	.word	0x200000f8

08001124 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <SSD1306_Fill+0x14>
 8001134:	2300      	movs	r3, #0
 8001136:	e000      	b.n	800113a <SSD1306_Fill+0x16>
 8001138:	23ff      	movs	r3, #255	@ 0xff
 800113a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800113e:	4619      	mov	r1, r3
 8001140:	4803      	ldr	r0, [pc, #12]	@ (8001150 <SSD1306_Fill+0x2c>)
 8001142:	f005 fce9 	bl	8006b18 <memset>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200000f8 	.word	0x200000f8

08001154 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
 800115e:	460b      	mov	r3, r1
 8001160:	80bb      	strh	r3, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	70fb      	strb	r3, [r7, #3]
	if (
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	2b7f      	cmp	r3, #127	@ 0x7f
 800116a:	d848      	bhi.n	80011fe <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800116c:	88bb      	ldrh	r3, [r7, #4]
 800116e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001170:	d845      	bhi.n	80011fe <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001172:	4b26      	ldr	r3, [pc, #152]	@ (800120c <SSD1306_DrawPixel+0xb8>)
 8001174:	791b      	ldrb	r3, [r3, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	2b00      	cmp	r3, #0
 800117e:	bf0c      	ite	eq
 8001180:	2301      	moveq	r3, #1
 8001182:	2300      	movne	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d11a      	bne.n	80011c4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800118e:	88fa      	ldrh	r2, [r7, #6]
 8001190:	88bb      	ldrh	r3, [r7, #4]
 8001192:	08db      	lsrs	r3, r3, #3
 8001194:	b298      	uxth	r0, r3
 8001196:	4603      	mov	r3, r0
 8001198:	01db      	lsls	r3, r3, #7
 800119a:	4413      	add	r3, r2
 800119c:	4a1c      	ldr	r2, [pc, #112]	@ (8001210 <SSD1306_DrawPixel+0xbc>)
 800119e:	5cd3      	ldrb	r3, [r2, r3]
 80011a0:	b25a      	sxtb	r2, r3
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	2101      	movs	r1, #1
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b259      	sxtb	r1, r3
 80011b4:	88fa      	ldrh	r2, [r7, #6]
 80011b6:	4603      	mov	r3, r0
 80011b8:	01db      	lsls	r3, r3, #7
 80011ba:	4413      	add	r3, r2
 80011bc:	b2c9      	uxtb	r1, r1
 80011be:	4a14      	ldr	r2, [pc, #80]	@ (8001210 <SSD1306_DrawPixel+0xbc>)
 80011c0:	54d1      	strb	r1, [r2, r3]
 80011c2:	e01d      	b.n	8001200 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80011c4:	88fa      	ldrh	r2, [r7, #6]
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	08db      	lsrs	r3, r3, #3
 80011ca:	b298      	uxth	r0, r3
 80011cc:	4603      	mov	r3, r0
 80011ce:	01db      	lsls	r3, r3, #7
 80011d0:	4413      	add	r3, r2
 80011d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001210 <SSD1306_DrawPixel+0xbc>)
 80011d4:	5cd3      	ldrb	r3, [r2, r3]
 80011d6:	b25a      	sxtb	r2, r3
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	2101      	movs	r1, #1
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	4013      	ands	r3, r2
 80011ec:	b259      	sxtb	r1, r3
 80011ee:	88fa      	ldrh	r2, [r7, #6]
 80011f0:	4603      	mov	r3, r0
 80011f2:	01db      	lsls	r3, r3, #7
 80011f4:	4413      	add	r3, r2
 80011f6:	b2c9      	uxtb	r1, r1
 80011f8:	4a05      	ldr	r2, [pc, #20]	@ (8001210 <SSD1306_DrawPixel+0xbc>)
 80011fa:	54d1      	strb	r1, [r2, r3]
 80011fc:	e000      	b.n	8001200 <SSD1306_DrawPixel+0xac>
		return;
 80011fe:	bf00      	nop
	}
}
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	200004f8 	.word	0x200004f8
 8001210:	200000f8 	.word	0x200000f8

08001214 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	460a      	mov	r2, r1
 800121e:	80fb      	strh	r3, [r7, #6]
 8001220:	4613      	mov	r3, r2
 8001222:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001224:	4a05      	ldr	r2, [pc, #20]	@ (800123c <SSD1306_GotoXY+0x28>)
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800122a:	4a04      	ldr	r2, [pc, #16]	@ (800123c <SSD1306_GotoXY+0x28>)
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	8053      	strh	r3, [r2, #2]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	200004f8 	.word	0x200004f8

08001240 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
 800124c:	4613      	mov	r3, r2
 800124e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001250:	4b39      	ldr	r3, [pc, #228]	@ (8001338 <SSD1306_Putc+0xf8>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
	if (
 800125c:	2b7f      	cmp	r3, #127	@ 0x7f
 800125e:	dc07      	bgt.n	8001270 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001260:	4b35      	ldr	r3, [pc, #212]	@ (8001338 <SSD1306_Putc+0xf8>)
 8001262:	885b      	ldrh	r3, [r3, #2]
 8001264:	461a      	mov	r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	785b      	ldrb	r3, [r3, #1]
 800126a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800126c:	2b3f      	cmp	r3, #63	@ 0x3f
 800126e:	dd01      	ble.n	8001274 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001270:	2300      	movs	r3, #0
 8001272:	e05d      	b.n	8001330 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	e04b      	b.n	8001312 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	3b20      	subs	r3, #32
 8001282:	6839      	ldr	r1, [r7, #0]
 8001284:	7849      	ldrb	r1, [r1, #1]
 8001286:	fb01 f303 	mul.w	r3, r1, r3
 800128a:	4619      	mov	r1, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	440b      	add	r3, r1
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	e030      	b.n	8001300 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d010      	beq.n	80012d0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012ae:	4b22      	ldr	r3, [pc, #136]	@ (8001338 <SSD1306_Putc+0xf8>)
 80012b0:	881a      	ldrh	r2, [r3, #0]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	4413      	add	r3, r2
 80012b8:	b298      	uxth	r0, r3
 80012ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <SSD1306_Putc+0xf8>)
 80012bc:	885a      	ldrh	r2, [r3, #2]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4413      	add	r3, r2
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	79ba      	ldrb	r2, [r7, #6]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff ff43 	bl	8001154 <SSD1306_DrawPixel>
 80012ce:	e014      	b.n	80012fa <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <SSD1306_Putc+0xf8>)
 80012d2:	881a      	ldrh	r2, [r3, #0]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4413      	add	r3, r2
 80012da:	b298      	uxth	r0, r3
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <SSD1306_Putc+0xf8>)
 80012de:	885a      	ldrh	r2, [r3, #2]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4413      	add	r3, r2
 80012e6:	b299      	uxth	r1, r3
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bf0c      	ite	eq
 80012ee:	2301      	moveq	r3, #1
 80012f0:	2300      	movne	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	f7ff ff2d 	bl	8001154 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	3301      	adds	r3, #1
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4293      	cmp	r3, r2
 800130a:	d3c8      	bcc.n	800129e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	3301      	adds	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	785b      	ldrb	r3, [r3, #1]
 8001316:	461a      	mov	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	4293      	cmp	r3, r2
 800131c:	d3ad      	bcc.n	800127a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <SSD1306_Putc+0xf8>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	7812      	ldrb	r2, [r2, #0]
 8001326:	4413      	add	r3, r2
 8001328:	b29a      	uxth	r2, r3
 800132a:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <SSD1306_Putc+0xf8>)
 800132c:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800132e:	79fb      	ldrb	r3, [r7, #7]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200004f8 	.word	0x200004f8

0800133c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	4613      	mov	r3, r2
 8001348:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800134a:	e012      	b.n	8001372 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	79fa      	ldrb	r2, [r7, #7]
 8001352:	68b9      	ldr	r1, [r7, #8]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff73 	bl	8001240 <SSD1306_Putc>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d002      	beq.n	800136c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	e008      	b.n	800137e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3301      	adds	r3, #1
 8001370:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1e8      	bne.n	800134c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	781b      	ldrb	r3, [r3, #0]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff feca 	bl	8001124 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001390:	f7ff fe9a 	bl	80010c8 <SSD1306_UpdateScreen>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <ssd1306_I2C_Init+0x28>)
 80013a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013a2:	e002      	b.n	80013aa <ssd1306_I2C_Init+0x12>
		p--;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f9      	bne.n	80013a4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	0003d090 	.word	0x0003d090

080013c4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b0c7      	sub	sp, #284	@ 0x11c
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	4604      	mov	r4, r0
 80013cc:	4608      	mov	r0, r1
 80013ce:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80013d2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80013d6:	600a      	str	r2, [r1, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013de:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80013e2:	4622      	mov	r2, r4
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013ea:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80013ee:	4602      	mov	r2, r0
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013fa:	460a      	mov	r2, r1
 80013fc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80013fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001402:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001406:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800140a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800140e:	7812      	ldrb	r2, [r2, #0]
 8001410:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001412:	2300      	movs	r3, #0
 8001414:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001418:	e015      	b.n	8001446 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800141a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800141e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001422:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	441a      	add	r2, r3
 800142a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800142e:	3301      	adds	r3, #1
 8001430:	7811      	ldrb	r1, [r2, #0]
 8001432:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001436:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800143a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800143c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001440:	3301      	adds	r3, #1
 8001442:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001446:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800144a:	b29b      	uxth	r3, r3
 800144c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001450:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001454:	8812      	ldrh	r2, [r2, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d8df      	bhi.n	800141a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800145a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800145e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b299      	uxth	r1, r3
 8001466:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800146a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	b29b      	uxth	r3, r3
 8001474:	f107 020c 	add.w	r2, r7, #12
 8001478:	200a      	movs	r0, #10
 800147a:	9000      	str	r0, [sp, #0]
 800147c:	4803      	ldr	r0, [pc, #12]	@ (800148c <ssd1306_I2C_WriteMulti+0xc8>)
 800147e:	f000 fe07 	bl	8002090 <HAL_I2C_Master_Transmit>
}
 8001482:	bf00      	nop
 8001484:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001488:	46bd      	mov	sp, r7
 800148a:	bd90      	pop	{r4, r7, pc}
 800148c:	20000038 	.word	0x20000038

08001490 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af02      	add	r7, sp, #8
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
 800149a:	460b      	mov	r3, r1
 800149c:	71bb      	strb	r3, [r7, #6]
 800149e:	4613      	mov	r3, r2
 80014a0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80014a2:	79bb      	ldrb	r3, [r7, #6]
 80014a4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80014a6:	797b      	ldrb	r3, [r7, #5]
 80014a8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	b299      	uxth	r1, r3
 80014ae:	f107 020c 	add.w	r2, r7, #12
 80014b2:	230a      	movs	r3, #10
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2302      	movs	r3, #2
 80014b8:	4803      	ldr	r0, [pc, #12]	@ (80014c8 <ssd1306_I2C_Write+0x38>)
 80014ba:	f000 fde9 	bl	8002090 <HAL_I2C_Master_Transmit>
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000038 	.word	0x20000038

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <HAL_MspInit+0x54>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	4a11      	ldr	r2, [pc, #68]	@ (8001520 <HAL_MspInit+0x54>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <HAL_MspInit+0x54>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <HAL_MspInit+0x54>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <HAL_MspInit+0x54>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fe:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <HAL_MspInit+0x54>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	210f      	movs	r1, #15
 800150e:	f06f 0001 	mvn.w	r0, #1
 8001512:	f000 fa6f 	bl	80019f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800

08001524 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	@ 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a19      	ldr	r2, [pc, #100]	@ (80015a8 <HAL_I2C_MspInit+0x84>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d12c      	bne.n	80015a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <HAL_I2C_MspInit+0x88>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <HAL_I2C_MspInit+0x88>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <HAL_I2C_MspInit+0x88>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001562:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001568:	2312      	movs	r3, #18
 800156a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001574:	2304      	movs	r3, #4
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4619      	mov	r1, r3
 800157e:	480c      	ldr	r0, [pc, #48]	@ (80015b0 <HAL_I2C_MspInit+0x8c>)
 8001580:	f000 fa62 	bl	8001a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <HAL_I2C_MspInit+0x88>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	4a07      	ldr	r2, [pc, #28]	@ (80015ac <HAL_I2C_MspInit+0x88>)
 800158e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001592:	6413      	str	r3, [r2, #64]	@ 0x40
 8001594:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <HAL_I2C_MspInit+0x88>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	@ 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40005400 	.word	0x40005400
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020400 	.word	0x40020400

080015b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a19      	ldr	r2, [pc, #100]	@ (8001638 <HAL_UART_MspInit+0x84>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d12b      	bne.n	800162e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b18      	ldr	r3, [pc, #96]	@ (800163c <HAL_UART_MspInit+0x88>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	4a17      	ldr	r2, [pc, #92]	@ (800163c <HAL_UART_MspInit+0x88>)
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <HAL_UART_MspInit+0x88>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <HAL_UART_MspInit+0x88>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a10      	ldr	r2, [pc, #64]	@ (800163c <HAL_UART_MspInit+0x88>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <HAL_UART_MspInit+0x88>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800160e:	230c      	movs	r3, #12
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800161e:	2307      	movs	r3, #7
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	@ (8001640 <HAL_UART_MspInit+0x8c>)
 800162a:	f000 fa0d 	bl	8001a48 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	@ 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40004400 	.word	0x40004400
 800163c:	40023800 	.word	0x40023800
 8001640:	40020000 	.word	0x40020000

08001644 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08e      	sub	sp, #56	@ 0x38
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	4b33      	ldr	r3, [pc, #204]	@ (8001728 <HAL_InitTick+0xe4>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	4a32      	ldr	r2, [pc, #200]	@ (8001728 <HAL_InitTick+0xe4>)
 800165e:	f043 0310 	orr.w	r3, r3, #16
 8001662:	6413      	str	r3, [r2, #64]	@ 0x40
 8001664:	4b30      	ldr	r3, [pc, #192]	@ (8001728 <HAL_InitTick+0xe4>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	f003 0310 	and.w	r3, r3, #16
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001670:	f107 0210 	add.w	r2, r7, #16
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f001 faaa 	bl	8002bd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001686:	2b00      	cmp	r3, #0
 8001688:	d103      	bne.n	8001692 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800168a:	f001 fa7b 	bl	8002b84 <HAL_RCC_GetPCLK1Freq>
 800168e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001690:	e004      	b.n	800169c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001692:	f001 fa77 	bl	8002b84 <HAL_RCC_GetPCLK1Freq>
 8001696:	4603      	mov	r3, r0
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800169c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800169e:	4a23      	ldr	r2, [pc, #140]	@ (800172c <HAL_InitTick+0xe8>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	0c9b      	lsrs	r3, r3, #18
 80016a6:	3b01      	subs	r3, #1
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016aa:	4b21      	ldr	r3, [pc, #132]	@ (8001730 <HAL_InitTick+0xec>)
 80016ac:	4a21      	ldr	r2, [pc, #132]	@ (8001734 <HAL_InitTick+0xf0>)
 80016ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001730 <HAL_InitTick+0xec>)
 80016b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016b6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001730 <HAL_InitTick+0xec>)
 80016ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016bc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016be:	4b1c      	ldr	r3, [pc, #112]	@ (8001730 <HAL_InitTick+0xec>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <HAL_InitTick+0xec>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ca:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <HAL_InitTick+0xec>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016d0:	4817      	ldr	r0, [pc, #92]	@ (8001730 <HAL_InitTick+0xec>)
 80016d2:	f001 fef9 	bl	80034c8 <HAL_TIM_Base_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d11b      	bne.n	800171c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016e4:	4812      	ldr	r0, [pc, #72]	@ (8001730 <HAL_InitTick+0xec>)
 80016e6:	f001 ff49 	bl	800357c <HAL_TIM_Base_Start_IT>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d111      	bne.n	800171c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016f8:	2036      	movs	r0, #54	@ 0x36
 80016fa:	f000 f997 	bl	8001a2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d808      	bhi.n	8001716 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	2036      	movs	r0, #54	@ 0x36
 800170a:	f000 f973 	bl	80019f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <HAL_InitTick+0xf4>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e002      	b.n	800171c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800171c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001720:	4618      	mov	r0, r3
 8001722:	3738      	adds	r7, #56	@ 0x38
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	431bde83 	.word	0x431bde83
 8001730:	20000500 	.word	0x20000500
 8001734:	40001000 	.word	0x40001000
 8001738:	2000000c 	.word	0x2000000c

0800173c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <NMI_Handler+0x4>

08001744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <MemManage_Handler+0x4>

08001754 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <UsageFault_Handler+0x4>

08001764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <TIM6_DAC_IRQHandler+0x10>)
 800177a:	f001 ff6f 	bl	800365c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000500 	.word	0x20000500

08001788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <SystemInit+0x20>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001792:	4a05      	ldr	r2, [pc, #20]	@ (80017a8 <SystemInit+0x20>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017b0:	f7ff ffea 	bl	8001788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	@ (80017ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	@ (80017f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	@ (80017f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017da:	f005 f9a5 	bl	8006b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017de:	f7ff f855 	bl	800088c <main>
  bx  lr    
 80017e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80017f0:	08007a28 	.word	0x08007a28
  ldr r2, =_sbss
 80017f4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80017f8:	20004e9c 	.word	0x20004e9c

080017fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001804:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <HAL_Init+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0d      	ldr	r2, [pc, #52]	@ (8001840 <HAL_Init+0x40>)
 800180a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800180e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <HAL_Init+0x40>)
 8001816:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800181a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800181c:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a07      	ldr	r2, [pc, #28]	@ (8001840 <HAL_Init+0x40>)
 8001822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001828:	2003      	movs	r0, #3
 800182a:	f000 f8d8 	bl	80019de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182e:	200f      	movs	r0, #15
 8001830:	f7ff ff08 	bl	8001644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001834:	f7ff fe4a 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023c00 	.word	0x40023c00

08001844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_IncTick+0x20>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_IncTick+0x24>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4413      	add	r3, r2
 8001854:	4a04      	ldr	r2, [pc, #16]	@ (8001868 <HAL_IncTick+0x24>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000010 	.word	0x20000010
 8001868:	20000548 	.word	0x20000548

0800186c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b03      	ldr	r3, [pc, #12]	@ (8001880 <HAL_GetTick+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000548 	.word	0x20000548

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4907      	ldr	r1, [pc, #28]	@ (8001920 <__NVIC_EnableIRQ+0x38>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	db0a      	blt.n	800194e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	490c      	ldr	r1, [pc, #48]	@ (8001970 <__NVIC_SetPriority+0x4c>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	440b      	add	r3, r1
 8001948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800194c:	e00a      	b.n	8001964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4908      	ldr	r1, [pc, #32]	@ (8001974 <__NVIC_SetPriority+0x50>)
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	3b04      	subs	r3, #4
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	440b      	add	r3, r1
 8001962:	761a      	strb	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	@ 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f1c3 0307 	rsb	r3, r3, #7
 8001992:	2b04      	cmp	r3, #4
 8001994:	bf28      	it	cs
 8001996:	2304      	movcs	r3, #4
 8001998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3304      	adds	r3, #4
 800199e:	2b06      	cmp	r3, #6
 80019a0:	d902      	bls.n	80019a8 <NVIC_EncodePriority+0x30>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b03      	subs	r3, #3
 80019a6:	e000      	b.n	80019aa <NVIC_EncodePriority+0x32>
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43d9      	mvns	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	4313      	orrs	r3, r2
         );
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	@ 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ff4c 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a06:	f7ff ff61 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	6978      	ldr	r0, [r7, #20]
 8001a12:	f7ff ffb1 	bl	8001978 <NVIC_EncodePriority>
 8001a16:	4602      	mov	r2, r0
 8001a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff80 	bl	8001924 <__NVIC_SetPriority>
}
 8001a24:	bf00      	nop
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff54 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	@ 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	e165      	b.n	8001d30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a64:	2201      	movs	r2, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	f040 8154 	bne.w	8001d2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d005      	beq.n	8001a9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d130      	bne.n	8001afc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	f003 0201 	and.w	r2, r3, #1
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d017      	beq.n	8001b38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d123      	bne.n	8001b8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	08da      	lsrs	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3208      	adds	r2, #8
 8001b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	08da      	lsrs	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3208      	adds	r2, #8
 8001b86:	69b9      	ldr	r1, [r7, #24]
 8001b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80ae 	beq.w	8001d2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d48 <HAL_GPIO_Init+0x300>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	4a5c      	ldr	r2, [pc, #368]	@ (8001d48 <HAL_GPIO_Init+0x300>)
 8001bd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bde:	4b5a      	ldr	r3, [pc, #360]	@ (8001d48 <HAL_GPIO_Init+0x300>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bea:	4a58      	ldr	r2, [pc, #352]	@ (8001d4c <HAL_GPIO_Init+0x304>)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	220f      	movs	r2, #15
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4f      	ldr	r2, [pc, #316]	@ (8001d50 <HAL_GPIO_Init+0x308>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d025      	beq.n	8001c62 <HAL_GPIO_Init+0x21a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4e      	ldr	r2, [pc, #312]	@ (8001d54 <HAL_GPIO_Init+0x30c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01f      	beq.n	8001c5e <HAL_GPIO_Init+0x216>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4d      	ldr	r2, [pc, #308]	@ (8001d58 <HAL_GPIO_Init+0x310>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d019      	beq.n	8001c5a <HAL_GPIO_Init+0x212>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4c      	ldr	r2, [pc, #304]	@ (8001d5c <HAL_GPIO_Init+0x314>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_Init+0x20e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4b      	ldr	r2, [pc, #300]	@ (8001d60 <HAL_GPIO_Init+0x318>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00d      	beq.n	8001c52 <HAL_GPIO_Init+0x20a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4a      	ldr	r2, [pc, #296]	@ (8001d64 <HAL_GPIO_Init+0x31c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <HAL_GPIO_Init+0x206>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a49      	ldr	r2, [pc, #292]	@ (8001d68 <HAL_GPIO_Init+0x320>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_GPIO_Init+0x202>
 8001c46:	2306      	movs	r3, #6
 8001c48:	e00c      	b.n	8001c64 <HAL_GPIO_Init+0x21c>
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	e00a      	b.n	8001c64 <HAL_GPIO_Init+0x21c>
 8001c4e:	2305      	movs	r3, #5
 8001c50:	e008      	b.n	8001c64 <HAL_GPIO_Init+0x21c>
 8001c52:	2304      	movs	r3, #4
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x21c>
 8001c56:	2303      	movs	r3, #3
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x21c>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x21c>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x21c>
 8001c62:	2300      	movs	r3, #0
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f002 0203 	and.w	r2, r2, #3
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c74:	4935      	ldr	r1, [pc, #212]	@ (8001d4c <HAL_GPIO_Init+0x304>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c82:	4b3a      	ldr	r3, [pc, #232]	@ (8001d6c <HAL_GPIO_Init+0x324>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca6:	4a31      	ldr	r2, [pc, #196]	@ (8001d6c <HAL_GPIO_Init+0x324>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cac:	4b2f      	ldr	r3, [pc, #188]	@ (8001d6c <HAL_GPIO_Init+0x324>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd0:	4a26      	ldr	r2, [pc, #152]	@ (8001d6c <HAL_GPIO_Init+0x324>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd6:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <HAL_GPIO_Init+0x324>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8001d6c <HAL_GPIO_Init+0x324>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d00:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <HAL_GPIO_Init+0x324>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d24:	4a11      	ldr	r2, [pc, #68]	@ (8001d6c <HAL_GPIO_Init+0x324>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	f67f ae96 	bls.w	8001a64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3724      	adds	r7, #36	@ 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40021400 	.word	0x40021400
 8001d68:	40021800 	.word	0x40021800
 8001d6c:	40013c00 	.word	0x40013c00

08001d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	887b      	ldrh	r3, [r7, #2]
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
 8001d8c:	e001      	b.n	8001d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	807b      	strh	r3, [r7, #2]
 8001dac:	4613      	mov	r3, r2
 8001dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db0:	787b      	ldrb	r3, [r7, #1]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db6:	887a      	ldrh	r2, [r7, #2]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dbc:	e003      	b.n	8001dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dbe:	887b      	ldrh	r3, [r7, #2]
 8001dc0:	041a      	lsls	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	619a      	str	r2, [r3, #24]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001de4:	887a      	ldrh	r2, [r7, #2]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4013      	ands	r3, r2
 8001dea:	041a      	lsls	r2, r3, #16
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	400b      	ands	r3, r1
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	619a      	str	r2, [r3, #24]
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e12b      	b.n	8002072 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff fb78 	bl	8001524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2224      	movs	r2, #36	@ 0x24
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0201 	bic.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e6c:	f000 fe8a 	bl	8002b84 <HAL_RCC_GetPCLK1Freq>
 8001e70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4a81      	ldr	r2, [pc, #516]	@ (800207c <HAL_I2C_Init+0x274>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d807      	bhi.n	8001e8c <HAL_I2C_Init+0x84>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4a80      	ldr	r2, [pc, #512]	@ (8002080 <HAL_I2C_Init+0x278>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	bf94      	ite	ls
 8001e84:	2301      	movls	r3, #1
 8001e86:	2300      	movhi	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	e006      	b.n	8001e9a <HAL_I2C_Init+0x92>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4a7d      	ldr	r2, [pc, #500]	@ (8002084 <HAL_I2C_Init+0x27c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	bf94      	ite	ls
 8001e94:	2301      	movls	r3, #1
 8001e96:	2300      	movhi	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e0e7      	b.n	8002072 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4a78      	ldr	r2, [pc, #480]	@ (8002088 <HAL_I2C_Init+0x280>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0c9b      	lsrs	r3, r3, #18
 8001eac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4a6a      	ldr	r2, [pc, #424]	@ (800207c <HAL_I2C_Init+0x274>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d802      	bhi.n	8001edc <HAL_I2C_Init+0xd4>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	e009      	b.n	8001ef0 <HAL_I2C_Init+0xe8>
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	4a69      	ldr	r2, [pc, #420]	@ (800208c <HAL_I2C_Init+0x284>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	099b      	lsrs	r3, r3, #6
 8001eee:	3301      	adds	r3, #1
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	495c      	ldr	r1, [pc, #368]	@ (800207c <HAL_I2C_Init+0x274>)
 8001f0c:	428b      	cmp	r3, r1
 8001f0e:	d819      	bhi.n	8001f44 <HAL_I2C_Init+0x13c>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1e59      	subs	r1, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f1e:	1c59      	adds	r1, r3, #1
 8001f20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f24:	400b      	ands	r3, r1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00a      	beq.n	8001f40 <HAL_I2C_Init+0x138>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1e59      	subs	r1, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f38:	3301      	adds	r3, #1
 8001f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3e:	e051      	b.n	8001fe4 <HAL_I2C_Init+0x1dc>
 8001f40:	2304      	movs	r3, #4
 8001f42:	e04f      	b.n	8001fe4 <HAL_I2C_Init+0x1dc>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d111      	bne.n	8001f70 <HAL_I2C_Init+0x168>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1e58      	subs	r0, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6859      	ldr	r1, [r3, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	440b      	add	r3, r1
 8001f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf0c      	ite	eq
 8001f68:	2301      	moveq	r3, #1
 8001f6a:	2300      	movne	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	e012      	b.n	8001f96 <HAL_I2C_Init+0x18e>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e58      	subs	r0, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	0099      	lsls	r1, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f86:	3301      	adds	r3, #1
 8001f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf0c      	ite	eq
 8001f90:	2301      	moveq	r3, #1
 8001f92:	2300      	movne	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_Init+0x196>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e022      	b.n	8001fe4 <HAL_I2C_Init+0x1dc>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_I2C_Init+0x1bc>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1e58      	subs	r0, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6859      	ldr	r1, [r3, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	440b      	add	r3, r1
 8001fb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fc2:	e00f      	b.n	8001fe4 <HAL_I2C_Init+0x1dc>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1e58      	subs	r0, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	0099      	lsls	r1, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	6809      	ldr	r1, [r1, #0]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69da      	ldr	r2, [r3, #28]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002012:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6911      	ldr	r1, [r2, #16]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68d2      	ldr	r2, [r2, #12]
 800201e:	4311      	orrs	r1, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	430b      	orrs	r3, r1
 8002026:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	000186a0 	.word	0x000186a0
 8002080:	001e847f 	.word	0x001e847f
 8002084:	003d08ff 	.word	0x003d08ff
 8002088:	431bde83 	.word	0x431bde83
 800208c:	10624dd3 	.word	0x10624dd3

08002090 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	461a      	mov	r2, r3
 800209c:	460b      	mov	r3, r1
 800209e:	817b      	strh	r3, [r7, #10]
 80020a0:	4613      	mov	r3, r2
 80020a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff fbe2 	bl	800186c <HAL_GetTick>
 80020a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	f040 80e0 	bne.w	8002278 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2319      	movs	r3, #25
 80020be:	2201      	movs	r2, #1
 80020c0:	4970      	ldr	r1, [pc, #448]	@ (8002284 <HAL_I2C_Master_Transmit+0x1f4>)
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 fa92 	bl	80025ec <I2C_WaitOnFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020ce:	2302      	movs	r3, #2
 80020d0:	e0d3      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_I2C_Master_Transmit+0x50>
 80020dc:	2302      	movs	r3, #2
 80020de:	e0cc      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ea>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d007      	beq.n	8002106 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0201 	orr.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002114:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2221      	movs	r2, #33	@ 0x21
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2210      	movs	r2, #16
 8002122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	893a      	ldrh	r2, [r7, #8]
 8002136:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4a50      	ldr	r2, [pc, #320]	@ (8002288 <HAL_I2C_Master_Transmit+0x1f8>)
 8002146:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002148:	8979      	ldrh	r1, [r7, #10]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	6a3a      	ldr	r2, [r7, #32]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f9ca 	bl	80024e8 <I2C_MasterRequestWrite>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e08d      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002174:	e066      	b.n	8002244 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	6a39      	ldr	r1, [r7, #32]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 fb50 	bl	8002820 <I2C_WaitOnTXEFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00d      	beq.n	80021a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	2b04      	cmp	r3, #4
 800218c:	d107      	bne.n	800219e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800219c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e06b      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d11b      	bne.n	8002218 <HAL_I2C_Master_Transmit+0x188>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d017      	beq.n	8002218 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	781a      	ldrb	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	6a39      	ldr	r1, [r7, #32]
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 fb47 	bl	80028b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00d      	beq.n	8002244 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	2b04      	cmp	r3, #4
 800222e:	d107      	bne.n	8002240 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800223e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e01a      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002248:	2b00      	cmp	r3, #0
 800224a:	d194      	bne.n	8002176 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800225a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	e000      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002278:	2302      	movs	r3, #2
  }
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	00100002 	.word	0x00100002
 8002288:	ffff0000 	.word	0xffff0000

0800228c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	@ 0x28
 8002290:	af02      	add	r7, sp, #8
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	460b      	mov	r3, r1
 800229a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff fae6 	bl	800186c <HAL_GetTick>
 80022a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b20      	cmp	r3, #32
 80022b0:	f040 8111 	bne.w	80024d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2319      	movs	r3, #25
 80022ba:	2201      	movs	r2, #1
 80022bc:	4988      	ldr	r1, [pc, #544]	@ (80024e0 <HAL_I2C_IsDeviceReady+0x254>)
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f994 	bl	80025ec <I2C_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80022ca:	2302      	movs	r3, #2
 80022cc:	e104      	b.n	80024d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_I2C_IsDeviceReady+0x50>
 80022d8:	2302      	movs	r3, #2
 80022da:	e0fd      	b.n	80024d8 <HAL_I2C_IsDeviceReady+0x24c>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d007      	beq.n	8002302 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002310:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2224      	movs	r2, #36	@ 0x24
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4a70      	ldr	r2, [pc, #448]	@ (80024e4 <HAL_I2C_IsDeviceReady+0x258>)
 8002324:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002334:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2200      	movs	r2, #0
 800233e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f952 	bl	80025ec <I2C_WaitOnFlagUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00d      	beq.n	800236a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800235c:	d103      	bne.n	8002366 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002364:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e0b6      	b.n	80024d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800236a:	897b      	ldrh	r3, [r7, #10]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002378:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800237a:	f7ff fa77 	bl	800186c <HAL_GetTick>
 800237e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b02      	cmp	r3, #2
 800238c:	bf0c      	ite	eq
 800238e:	2301      	moveq	r3, #1
 8002390:	2300      	movne	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023a4:	bf0c      	ite	eq
 80023a6:	2301      	moveq	r3, #1
 80023a8:	2300      	movne	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023ae:	e025      	b.n	80023fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023b0:	f7ff fa5c 	bl	800186c <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d302      	bcc.n	80023c6 <HAL_I2C_IsDeviceReady+0x13a>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d103      	bne.n	80023ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	22a0      	movs	r2, #160	@ 0xa0
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b02      	cmp	r3, #2
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2ba0      	cmp	r3, #160	@ 0xa0
 8002406:	d005      	beq.n	8002414 <HAL_I2C_IsDeviceReady+0x188>
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d102      	bne.n	8002414 <HAL_I2C_IsDeviceReady+0x188>
 800240e:	7dbb      	ldrb	r3, [r7, #22]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0cd      	beq.n	80023b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b02      	cmp	r3, #2
 8002428:	d129      	bne.n	800247e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002438:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2319      	movs	r3, #25
 8002456:	2201      	movs	r2, #1
 8002458:	4921      	ldr	r1, [pc, #132]	@ (80024e0 <HAL_I2C_IsDeviceReady+0x254>)
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f8c6 	bl	80025ec <I2C_WaitOnFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e036      	b.n	80024d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e02c      	b.n	80024d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800248c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002496:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2319      	movs	r3, #25
 800249e:	2201      	movs	r2, #1
 80024a0:	490f      	ldr	r1, [pc, #60]	@ (80024e0 <HAL_I2C_IsDeviceReady+0x254>)
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f8a2 	bl	80025ec <I2C_WaitOnFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e012      	b.n	80024d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	3301      	adds	r3, #1
 80024b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	429a      	cmp	r2, r3
 80024be:	f4ff af32 	bcc.w	8002326 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80024d6:	2302      	movs	r3, #2
  }
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3720      	adds	r7, #32
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	00100002 	.word	0x00100002
 80024e4:	ffff0000 	.word	0xffff0000

080024e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	460b      	mov	r3, r1
 80024f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b08      	cmp	r3, #8
 8002502:	d006      	beq.n	8002512 <I2C_MasterRequestWrite+0x2a>
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d003      	beq.n	8002512 <I2C_MasterRequestWrite+0x2a>
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002510:	d108      	bne.n	8002524 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	e00b      	b.n	800253c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002528:	2b12      	cmp	r3, #18
 800252a:	d107      	bne.n	800253c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800253a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f84f 	bl	80025ec <I2C_WaitOnFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00d      	beq.n	8002570 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002562:	d103      	bne.n	800256c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800256a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e035      	b.n	80025dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002578:	d108      	bne.n	800258c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800257a:	897b      	ldrh	r3, [r7, #10]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002588:	611a      	str	r2, [r3, #16]
 800258a:	e01b      	b.n	80025c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800258c:	897b      	ldrh	r3, [r7, #10]
 800258e:	11db      	asrs	r3, r3, #7
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f003 0306 	and.w	r3, r3, #6
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f063 030f 	orn	r3, r3, #15
 800259c:	b2da      	uxtb	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	490e      	ldr	r1, [pc, #56]	@ (80025e4 <I2C_MasterRequestWrite+0xfc>)
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 f898 	bl	80026e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e010      	b.n	80025dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025ba:	897b      	ldrh	r3, [r7, #10]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	4907      	ldr	r1, [pc, #28]	@ (80025e8 <I2C_MasterRequestWrite+0x100>)
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f888 	bl	80026e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	00010008 	.word	0x00010008
 80025e8:	00010002 	.word	0x00010002

080025ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	4613      	mov	r3, r2
 80025fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025fc:	e048      	b.n	8002690 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002604:	d044      	beq.n	8002690 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002606:	f7ff f931 	bl	800186c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d302      	bcc.n	800261c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d139      	bne.n	8002690 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	0c1b      	lsrs	r3, r3, #16
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d10d      	bne.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	43da      	mvns	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	4013      	ands	r3, r2
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	e00c      	b.n	800265c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	43da      	mvns	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	4013      	ands	r3, r2
 800264e:	b29b      	uxth	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf0c      	ite	eq
 8002654:	2301      	moveq	r3, #1
 8002656:	2300      	movne	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	429a      	cmp	r2, r3
 8002660:	d116      	bne.n	8002690 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e023      	b.n	80026d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	0c1b      	lsrs	r3, r3, #16
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d10d      	bne.n	80026b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	43da      	mvns	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	4013      	ands	r3, r2
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	e00c      	b.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	43da      	mvns	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4013      	ands	r3, r2
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d093      	beq.n	80025fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026ee:	e071      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026fe:	d123      	bne.n	8002748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800270e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002718:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	f043 0204 	orr.w	r2, r3, #4
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e067      	b.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274e:	d041      	beq.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002750:	f7ff f88c 	bl	800186c <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	429a      	cmp	r2, r3
 800275e:	d302      	bcc.n	8002766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d136      	bne.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	0c1b      	lsrs	r3, r3, #16
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d10c      	bne.n	800278a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4013      	ands	r3, r2
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf14      	ite	ne
 8002782:	2301      	movne	r3, #1
 8002784:	2300      	moveq	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	e00b      	b.n	80027a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	43da      	mvns	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4013      	ands	r3, r2
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d016      	beq.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	f043 0220 	orr.w	r2, r3, #32
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e021      	b.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	0c1b      	lsrs	r3, r3, #16
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d10c      	bne.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	43da      	mvns	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	4013      	ands	r3, r2
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf14      	ite	ne
 80027f0:	2301      	movne	r3, #1
 80027f2:	2300      	moveq	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e00b      	b.n	8002810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	43da      	mvns	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4013      	ands	r3, r2
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	bf14      	ite	ne
 800280a:	2301      	movne	r3, #1
 800280c:	2300      	moveq	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	f47f af6d 	bne.w	80026f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800282c:	e034      	b.n	8002898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f886 	bl	8002940 <I2C_IsAcknowledgeFailed>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e034      	b.n	80028a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d028      	beq.n	8002898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002846:	f7ff f811 	bl	800186c <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	429a      	cmp	r2, r3
 8002854:	d302      	bcc.n	800285c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d11d      	bne.n	8002898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002866:	2b80      	cmp	r3, #128	@ 0x80
 8002868:	d016      	beq.n	8002898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	f043 0220 	orr.w	r2, r3, #32
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e007      	b.n	80028a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a2:	2b80      	cmp	r3, #128	@ 0x80
 80028a4:	d1c3      	bne.n	800282e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028bc:	e034      	b.n	8002928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f83e 	bl	8002940 <I2C_IsAcknowledgeFailed>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e034      	b.n	8002938 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d028      	beq.n	8002928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d6:	f7fe ffc9 	bl	800186c <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d302      	bcc.n	80028ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d11d      	bne.n	8002928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d016      	beq.n	8002928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e007      	b.n	8002938 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b04      	cmp	r3, #4
 8002934:	d1c3      	bne.n	80028be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002956:	d11b      	bne.n	8002990 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002960:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	f043 0204 	orr.w	r2, r3, #4
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0cc      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b4:	4b68      	ldr	r3, [pc, #416]	@ (8002b58 <HAL_RCC_ClockConfig+0x1b8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d90c      	bls.n	80029dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b65      	ldr	r3, [pc, #404]	@ (8002b58 <HAL_RCC_ClockConfig+0x1b8>)
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	4b63      	ldr	r3, [pc, #396]	@ (8002b58 <HAL_RCC_ClockConfig+0x1b8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0b8      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f4:	4b59      	ldr	r3, [pc, #356]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a58      	ldr	r2, [pc, #352]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a0c:	4b53      	ldr	r3, [pc, #332]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4a52      	ldr	r2, [pc, #328]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b50      	ldr	r3, [pc, #320]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	494d      	ldr	r1, [pc, #308]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d044      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	4b47      	ldr	r3, [pc, #284]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d119      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e07f      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d003      	beq.n	8002a5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e06f      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e067      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7e:	4b37      	ldr	r3, [pc, #220]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f023 0203 	bic.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4934      	ldr	r1, [pc, #208]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a90:	f7fe feec 	bl	800186c <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a98:	f7fe fee8 	bl	800186c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e04f      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	4b2b      	ldr	r3, [pc, #172]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 020c 	and.w	r2, r3, #12
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d1eb      	bne.n	8002a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b25      	ldr	r3, [pc, #148]	@ (8002b58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d20c      	bcs.n	8002ae8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b22      	ldr	r3, [pc, #136]	@ (8002b58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b20      	ldr	r3, [pc, #128]	@ (8002b58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e032      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af4:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4916      	ldr	r1, [pc, #88]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b12:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	490e      	ldr	r1, [pc, #56]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b26:	f000 f887 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	490a      	ldr	r1, [pc, #40]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002b38:	5ccb      	ldrb	r3, [r1, r3]
 8002b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3e:	4a09      	ldr	r2, [pc, #36]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b42:	4b09      	ldr	r3, [pc, #36]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fd7c 	bl	8001644 <HAL_InitTick>

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023c00 	.word	0x40023c00
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	08007a00 	.word	0x08007a00
 8002b64:	20000008 	.word	0x20000008
 8002b68:	2000000c 	.word	0x2000000c

08002b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b70:	4b03      	ldr	r3, [pc, #12]	@ (8002b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b72:	681b      	ldr	r3, [r3, #0]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000008 	.word	0x20000008

08002b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b88:	f7ff fff0 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	0a9b      	lsrs	r3, r3, #10
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4903      	ldr	r1, [pc, #12]	@ (8002ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b9a:	5ccb      	ldrb	r3, [r1, r3]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	08007a10 	.word	0x08007a10

08002bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bb0:	f7ff ffdc 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	0b5b      	lsrs	r3, r3, #13
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	4903      	ldr	r1, [pc, #12]	@ (8002bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	08007a10 	.word	0x08007a10

08002bd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	220f      	movs	r2, #15
 8002be2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002be4:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <HAL_RCC_GetClockConfig+0x5c>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 0203 	and.w	r2, r3, #3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c30 <HAL_RCC_GetClockConfig+0x5c>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <HAL_RCC_GetClockConfig+0x5c>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c08:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <HAL_RCC_GetClockConfig+0x5c>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c16:	4b07      	ldr	r3, [pc, #28]	@ (8002c34 <HAL_RCC_GetClockConfig+0x60>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 020f 	and.w	r2, r3, #15
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	601a      	str	r2, [r3, #0]
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40023c00 	.word	0x40023c00

08002c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c3c:	b0a6      	sub	sp, #152	@ 0x98
 8002c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c5e:	4bc8      	ldr	r3, [pc, #800]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b0c      	cmp	r3, #12
 8002c68:	f200 817e 	bhi.w	8002f68 <HAL_RCC_GetSysClockFreq+0x330>
 8002c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c74 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c72:	bf00      	nop
 8002c74:	08002ca9 	.word	0x08002ca9
 8002c78:	08002f69 	.word	0x08002f69
 8002c7c:	08002f69 	.word	0x08002f69
 8002c80:	08002f69 	.word	0x08002f69
 8002c84:	08002cb1 	.word	0x08002cb1
 8002c88:	08002f69 	.word	0x08002f69
 8002c8c:	08002f69 	.word	0x08002f69
 8002c90:	08002f69 	.word	0x08002f69
 8002c94:	08002cb9 	.word	0x08002cb9
 8002c98:	08002f69 	.word	0x08002f69
 8002c9c:	08002f69 	.word	0x08002f69
 8002ca0:	08002f69 	.word	0x08002f69
 8002ca4:	08002e23 	.word	0x08002e23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ca8:	4bb6      	ldr	r3, [pc, #728]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002caa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002cae:	e15f      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cb0:	4bb5      	ldr	r3, [pc, #724]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x350>)
 8002cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002cb6:	e15b      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cb8:	4bb1      	ldr	r3, [pc, #708]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cc4:	4bae      	ldr	r3, [pc, #696]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d031      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd0:	4bab      	ldr	r3, [pc, #684]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	099b      	lsrs	r3, r3, #6
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ce8:	4ba7      	ldr	r3, [pc, #668]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x350>)
 8002cea:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002cee:	462a      	mov	r2, r5
 8002cf0:	fb03 f202 	mul.w	r2, r3, r2
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	4aa2      	ldr	r2, [pc, #648]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d00:	4621      	mov	r1, r4
 8002d02:	fba1 1202 	umull	r1, r2, r1, r2
 8002d06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d08:	460a      	mov	r2, r1
 8002d0a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002d0c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002d0e:	4413      	add	r3, r2
 8002d10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d16:	2200      	movs	r2, #0
 8002d18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d1a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d20:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002d24:	f7fd fa86 	bl	8000234 <__aeabi_uldivmod>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d32:	e064      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d34:	4b92      	ldr	r3, [pc, #584]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d3e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002d40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d48:	2300      	movs	r3, #0
 8002d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d4c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002d50:	4622      	mov	r2, r4
 8002d52:	462b      	mov	r3, r5
 8002d54:	f04f 0000 	mov.w	r0, #0
 8002d58:	f04f 0100 	mov.w	r1, #0
 8002d5c:	0159      	lsls	r1, r3, #5
 8002d5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d62:	0150      	lsls	r0, r2, #5
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4621      	mov	r1, r4
 8002d6a:	1a51      	subs	r1, r2, r1
 8002d6c:	6139      	str	r1, [r7, #16]
 8002d6e:	4629      	mov	r1, r5
 8002d70:	eb63 0301 	sbc.w	r3, r3, r1
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d82:	4659      	mov	r1, fp
 8002d84:	018b      	lsls	r3, r1, #6
 8002d86:	4651      	mov	r1, sl
 8002d88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d8c:	4651      	mov	r1, sl
 8002d8e:	018a      	lsls	r2, r1, #6
 8002d90:	4651      	mov	r1, sl
 8002d92:	ebb2 0801 	subs.w	r8, r2, r1
 8002d96:	4659      	mov	r1, fp
 8002d98:	eb63 0901 	sbc.w	r9, r3, r1
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002da8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002db0:	4690      	mov	r8, r2
 8002db2:	4699      	mov	r9, r3
 8002db4:	4623      	mov	r3, r4
 8002db6:	eb18 0303 	adds.w	r3, r8, r3
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	462b      	mov	r3, r5
 8002dbe:	eb49 0303 	adc.w	r3, r9, r3
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	028b      	lsls	r3, r1, #10
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dda:	4621      	mov	r1, r4
 8002ddc:	028a      	lsls	r2, r1, #10
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002de6:	2200      	movs	r2, #0
 8002de8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dea:	647a      	str	r2, [r7, #68]	@ 0x44
 8002dec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002df0:	f7fd fa20 	bl	8000234 <__aeabi_uldivmod>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4613      	mov	r3, r2
 8002dfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002dfe:	4b60      	ldr	r3, [pc, #384]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	0c1b      	lsrs	r3, r3, #16
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	3301      	adds	r3, #1
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002e10:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002e20:	e0a6      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e22:	4b57      	ldr	r3, [pc, #348]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e2e:	4b54      	ldr	r3, [pc, #336]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d02a      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3a:	4b51      	ldr	r3, [pc, #324]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	2200      	movs	r2, #0
 8002e42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4b4e      	ldr	r3, [pc, #312]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x350>)
 8002e50:	fb03 f201 	mul.w	r2, r3, r1
 8002e54:	2300      	movs	r3, #0
 8002e56:	fb00 f303 	mul.w	r3, r0, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x350>)
 8002e5e:	fba0 1202 	umull	r1, r2, r0, r2
 8002e62:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e64:	460a      	mov	r2, r1
 8002e66:	673a      	str	r2, [r7, #112]	@ 0x70
 8002e68:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002e6a:	4413      	add	r3, r2
 8002e6c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e72:	2200      	movs	r2, #0
 8002e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e76:	637a      	str	r2, [r7, #52]	@ 0x34
 8002e78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e7c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002e80:	f7fd f9d8 	bl	8000234 <__aeabi_uldivmod>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4613      	mov	r3, r2
 8002e8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002e8e:	e05b      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e90:	4b3b      	ldr	r3, [pc, #236]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	099b      	lsrs	r3, r3, #6
 8002e96:	2200      	movs	r2, #0
 8002e98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea2:	623b      	str	r3, [r7, #32]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002eac:	4642      	mov	r2, r8
 8002eae:	464b      	mov	r3, r9
 8002eb0:	f04f 0000 	mov.w	r0, #0
 8002eb4:	f04f 0100 	mov.w	r1, #0
 8002eb8:	0159      	lsls	r1, r3, #5
 8002eba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ebe:	0150      	lsls	r0, r2, #5
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4641      	mov	r1, r8
 8002ec6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eca:	4649      	mov	r1, r9
 8002ecc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002edc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ee0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ee4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ee8:	eb63 050b 	sbc.w	r5, r3, fp
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	00eb      	lsls	r3, r5, #3
 8002ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002efa:	00e2      	lsls	r2, r4, #3
 8002efc:	4614      	mov	r4, r2
 8002efe:	461d      	mov	r5, r3
 8002f00:	4643      	mov	r3, r8
 8002f02:	18e3      	adds	r3, r4, r3
 8002f04:	603b      	str	r3, [r7, #0]
 8002f06:	464b      	mov	r3, r9
 8002f08:	eb45 0303 	adc.w	r3, r5, r3
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	028b      	lsls	r3, r1, #10
 8002f1e:	4621      	mov	r1, r4
 8002f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f24:	4621      	mov	r1, r4
 8002f26:	028a      	lsls	r2, r1, #10
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f30:	2200      	movs	r2, #0
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	61fa      	str	r2, [r7, #28]
 8002f36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f3a:	f7fd f97b 	bl	8000234 <__aeabi_uldivmod>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4613      	mov	r3, r2
 8002f44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f48:	4b0d      	ldr	r3, [pc, #52]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	0f1b      	lsrs	r3, r3, #28
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002f56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002f66:	e003      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f68:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002f6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002f6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f70:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3798      	adds	r7, #152	@ 0x98
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	00f42400 	.word	0x00f42400
 8002f88:	017d7840 	.word	0x017d7840

08002f8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e28d      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8083 	beq.w	80030b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fac:	4b94      	ldr	r3, [pc, #592]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d019      	beq.n	8002fec <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fb8:	4b91      	ldr	r3, [pc, #580]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
        || \
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fc4:	4b8e      	ldr	r3, [pc, #568]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fd0:	d00c      	beq.n	8002fec <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fd2:	4b8b      	ldr	r3, [pc, #556]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fda:	2b0c      	cmp	r3, #12
 8002fdc:	d112      	bne.n	8003004 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fde:	4b88      	ldr	r3, [pc, #544]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fea:	d10b      	bne.n	8003004 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	4b84      	ldr	r3, [pc, #528]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d05b      	beq.n	80030b0 <HAL_RCC_OscConfig+0x124>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d157      	bne.n	80030b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e25a      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800300c:	d106      	bne.n	800301c <HAL_RCC_OscConfig+0x90>
 800300e:	4b7c      	ldr	r3, [pc, #496]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a7b      	ldr	r2, [pc, #492]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e01d      	b.n	8003058 <HAL_RCC_OscConfig+0xcc>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0xb4>
 8003026:	4b76      	ldr	r3, [pc, #472]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a75      	ldr	r2, [pc, #468]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 800302c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b73      	ldr	r3, [pc, #460]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a72      	ldr	r2, [pc, #456]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e00b      	b.n	8003058 <HAL_RCC_OscConfig+0xcc>
 8003040:	4b6f      	ldr	r3, [pc, #444]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a6e      	ldr	r2, [pc, #440]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8003046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b6c      	ldr	r3, [pc, #432]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a6b      	ldr	r2, [pc, #428]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8003052:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe fc04 	bl	800186c <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003068:	f7fe fc00 	bl	800186c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	@ 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e21f      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307a:	4b61      	ldr	r3, [pc, #388]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0xdc>
 8003086:	e014      	b.n	80030b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe fbf0 	bl	800186c <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003090:	f7fe fbec 	bl	800186c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	@ 0x64
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e20b      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a2:	4b57      	ldr	r3, [pc, #348]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x104>
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d06f      	beq.n	800319e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030be:	4b50      	ldr	r3, [pc, #320]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d017      	beq.n	80030fa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030ca:	4b4d      	ldr	r3, [pc, #308]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
        || \
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d105      	bne.n	80030e2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00b      	beq.n	80030fa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030e2:	4b47      	ldr	r3, [pc, #284]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030ea:	2b0c      	cmp	r3, #12
 80030ec:	d11c      	bne.n	8003128 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ee:	4b44      	ldr	r3, [pc, #272]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d116      	bne.n	8003128 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fa:	4b41      	ldr	r3, [pc, #260]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_RCC_OscConfig+0x186>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d001      	beq.n	8003112 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e1d3      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003112:	4b3b      	ldr	r3, [pc, #236]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4937      	ldr	r1, [pc, #220]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003126:	e03a      	b.n	800319e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003130:	4b34      	ldr	r3, [pc, #208]	@ (8003204 <HAL_RCC_OscConfig+0x278>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003136:	f7fe fb99 	bl	800186c <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800313e:	f7fe fb95 	bl	800186c <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e1b4      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003150:	4b2b      	ldr	r3, [pc, #172]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315c:	4b28      	ldr	r3, [pc, #160]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4925      	ldr	r1, [pc, #148]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 800316c:	4313      	orrs	r3, r2
 800316e:	600b      	str	r3, [r1, #0]
 8003170:	e015      	b.n	800319e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003172:	4b24      	ldr	r3, [pc, #144]	@ (8003204 <HAL_RCC_OscConfig+0x278>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fe fb78 	bl	800186c <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003180:	f7fe fb74 	bl	800186c <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e193      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	4b1b      	ldr	r3, [pc, #108]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d036      	beq.n	8003218 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b2:	4b15      	ldr	r3, [pc, #84]	@ (8003208 <HAL_RCC_OscConfig+0x27c>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b8:	f7fe fb58 	bl	800186c <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c0:	f7fe fb54 	bl	800186c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e173      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003200 <HAL_RCC_OscConfig+0x274>)
 80031d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x234>
 80031de:	e01b      	b.n	8003218 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e0:	4b09      	ldr	r3, [pc, #36]	@ (8003208 <HAL_RCC_OscConfig+0x27c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fe fb41 	bl	800186c <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ec:	e00e      	b.n	800320c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ee:	f7fe fb3d 	bl	800186c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d907      	bls.n	800320c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e15c      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
 8003200:	40023800 	.word	0x40023800
 8003204:	42470000 	.word	0x42470000
 8003208:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320c:	4b8a      	ldr	r3, [pc, #552]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 800320e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ea      	bne.n	80031ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8097 	beq.w	8003354 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003226:	2300      	movs	r3, #0
 8003228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322a:	4b83      	ldr	r3, [pc, #524]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10f      	bne.n	8003256 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	4b7f      	ldr	r3, [pc, #508]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	4a7e      	ldr	r2, [pc, #504]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 8003240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003244:	6413      	str	r3, [r2, #64]	@ 0x40
 8003246:	4b7c      	ldr	r3, [pc, #496]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003256:	4b79      	ldr	r3, [pc, #484]	@ (800343c <HAL_RCC_OscConfig+0x4b0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d118      	bne.n	8003294 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003262:	4b76      	ldr	r3, [pc, #472]	@ (800343c <HAL_RCC_OscConfig+0x4b0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a75      	ldr	r2, [pc, #468]	@ (800343c <HAL_RCC_OscConfig+0x4b0>)
 8003268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800326c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326e:	f7fe fafd 	bl	800186c <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003276:	f7fe faf9 	bl	800186c <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e118      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	4b6c      	ldr	r3, [pc, #432]	@ (800343c <HAL_RCC_OscConfig+0x4b0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x31e>
 800329c:	4b66      	ldr	r3, [pc, #408]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a0:	4a65      	ldr	r2, [pc, #404]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032a8:	e01c      	b.n	80032e4 <HAL_RCC_OscConfig+0x358>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x340>
 80032b2:	4b61      	ldr	r3, [pc, #388]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b6:	4a60      	ldr	r2, [pc, #384]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032be:	4b5e      	ldr	r3, [pc, #376]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c2:	4a5d      	ldr	r2, [pc, #372]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0x358>
 80032cc:	4b5a      	ldr	r3, [pc, #360]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d0:	4a59      	ldr	r2, [pc, #356]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032d2:	f023 0301 	bic.w	r3, r3, #1
 80032d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d8:	4b57      	ldr	r3, [pc, #348]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032dc:	4a56      	ldr	r2, [pc, #344]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80032de:	f023 0304 	bic.w	r3, r3, #4
 80032e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d015      	beq.n	8003318 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7fe fabe 	bl	800186c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f2:	e00a      	b.n	800330a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f4:	f7fe faba 	bl	800186c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e0d7      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330a:	4b4b      	ldr	r3, [pc, #300]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0ee      	beq.n	80032f4 <HAL_RCC_OscConfig+0x368>
 8003316:	e014      	b.n	8003342 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fe faa8 	bl	800186c <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331e:	e00a      	b.n	8003336 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003320:	f7fe faa4 	bl	800186c <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e0c1      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003336:	4b40      	ldr	r3, [pc, #256]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1ee      	bne.n	8003320 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003342:	7dfb      	ldrb	r3, [r7, #23]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d105      	bne.n	8003354 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003348:	4b3b      	ldr	r3, [pc, #236]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	4a3a      	ldr	r2, [pc, #232]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 800334e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003352:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80ad 	beq.w	80034b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800335e:	4b36      	ldr	r3, [pc, #216]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b08      	cmp	r3, #8
 8003368:	d060      	beq.n	800342c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d145      	bne.n	80033fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003372:	4b33      	ldr	r3, [pc, #204]	@ (8003440 <HAL_RCC_OscConfig+0x4b4>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe fa78 	bl	800186c <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003380:	f7fe fa74 	bl	800186c <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e093      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	4b29      	ldr	r3, [pc, #164]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69da      	ldr	r2, [r3, #28]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	019b      	lsls	r3, r3, #6
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	3b01      	subs	r3, #1
 80033b8:	041b      	lsls	r3, r3, #16
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c0:	061b      	lsls	r3, r3, #24
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	071b      	lsls	r3, r3, #28
 80033ca:	491b      	ldr	r1, [pc, #108]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003440 <HAL_RCC_OscConfig+0x4b4>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d6:	f7fe fa49 	bl	800186c <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033de:	f7fe fa45 	bl	800186c <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e064      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f0:	4b11      	ldr	r3, [pc, #68]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x452>
 80033fc:	e05c      	b.n	80034b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fe:	4b10      	ldr	r3, [pc, #64]	@ (8003440 <HAL_RCC_OscConfig+0x4b4>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe fa32 	bl	800186c <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340c:	f7fe fa2e 	bl	800186c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e04d      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <HAL_RCC_OscConfig+0x4ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x480>
 800342a:	e045      	b.n	80034b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d107      	bne.n	8003444 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e040      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
 8003438:	40023800 	.word	0x40023800
 800343c:	40007000 	.word	0x40007000
 8003440:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003444:	4b1f      	ldr	r3, [pc, #124]	@ (80034c4 <HAL_RCC_OscConfig+0x538>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d030      	beq.n	80034b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d129      	bne.n	80034b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d122      	bne.n	80034b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003474:	4013      	ands	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800347a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800347c:	4293      	cmp	r3, r2
 800347e:	d119      	bne.n	80034b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	3b01      	subs	r3, #1
 800348e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d10f      	bne.n	80034b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d107      	bne.n	80034b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800

080034c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e041      	b.n	800355e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f839 	bl	8003566 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f000 f9c0 	bl	800388c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	d001      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e04e      	b.n	8003632 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a23      	ldr	r2, [pc, #140]	@ (8003640 <HAL_TIM_Base_Start_IT+0xc4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d022      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x80>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035be:	d01d      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x80>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003644 <HAL_TIM_Base_Start_IT+0xc8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d018      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x80>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003648 <HAL_TIM_Base_Start_IT+0xcc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d013      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x80>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1c      	ldr	r2, [pc, #112]	@ (800364c <HAL_TIM_Base_Start_IT+0xd0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00e      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x80>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003650 <HAL_TIM_Base_Start_IT+0xd4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d009      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x80>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a19      	ldr	r2, [pc, #100]	@ (8003654 <HAL_TIM_Base_Start_IT+0xd8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d004      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x80>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a18      	ldr	r2, [pc, #96]	@ (8003658 <HAL_TIM_Base_Start_IT+0xdc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d111      	bne.n	8003620 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b06      	cmp	r3, #6
 800360c:	d010      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0201 	orr.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361e:	e007      	b.n	8003630 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40010000 	.word	0x40010000
 8003644:	40000400 	.word	0x40000400
 8003648:	40000800 	.word	0x40000800
 800364c:	40000c00 	.word	0x40000c00
 8003650:	40010400 	.word	0x40010400
 8003654:	40014000 	.word	0x40014000
 8003658:	40001800 	.word	0x40001800

0800365c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d020      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01b      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0202 	mvn.w	r2, #2
 8003690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f8d2 	bl	8003850 <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8c4 	bl	800383c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f8d5 	bl	8003864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d020      	beq.n	800370c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01b      	beq.n	800370c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0204 	mvn.w	r2, #4
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f8ac 	bl	8003850 <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f89e 	bl	800383c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f8af 	bl	8003864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d020      	beq.n	8003758 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01b      	beq.n	8003758 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0208 	mvn.w	r2, #8
 8003728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2204      	movs	r2, #4
 800372e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f886 	bl	8003850 <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f878 	bl	800383c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f889 	bl	8003864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b00      	cmp	r3, #0
 8003760:	d020      	beq.n	80037a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01b      	beq.n	80037a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0210 	mvn.w	r2, #16
 8003774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2208      	movs	r2, #8
 800377a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f860 	bl	8003850 <HAL_TIM_IC_CaptureCallback>
 8003790:	e005      	b.n	800379e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f852 	bl	800383c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f863 	bl	8003864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00c      	beq.n	80037c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d007      	beq.n	80037c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0201 	mvn.w	r2, #1
 80037c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd fba4 	bl	8000f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00c      	beq.n	80037ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f906 	bl	80039f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00c      	beq.n	8003810 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d007      	beq.n	8003810 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f834 	bl	8003878 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00c      	beq.n	8003834 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0220 	mvn.w	r2, #32
 800382c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f8d8 	bl	80039e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a46      	ldr	r2, [pc, #280]	@ (80039b8 <TIM_Base_SetConfig+0x12c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d013      	beq.n	80038cc <TIM_Base_SetConfig+0x40>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038aa:	d00f      	beq.n	80038cc <TIM_Base_SetConfig+0x40>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a43      	ldr	r2, [pc, #268]	@ (80039bc <TIM_Base_SetConfig+0x130>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00b      	beq.n	80038cc <TIM_Base_SetConfig+0x40>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a42      	ldr	r2, [pc, #264]	@ (80039c0 <TIM_Base_SetConfig+0x134>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d007      	beq.n	80038cc <TIM_Base_SetConfig+0x40>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a41      	ldr	r2, [pc, #260]	@ (80039c4 <TIM_Base_SetConfig+0x138>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d003      	beq.n	80038cc <TIM_Base_SetConfig+0x40>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a40      	ldr	r2, [pc, #256]	@ (80039c8 <TIM_Base_SetConfig+0x13c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d108      	bne.n	80038de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a35      	ldr	r2, [pc, #212]	@ (80039b8 <TIM_Base_SetConfig+0x12c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d02b      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ec:	d027      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a32      	ldr	r2, [pc, #200]	@ (80039bc <TIM_Base_SetConfig+0x130>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d023      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a31      	ldr	r2, [pc, #196]	@ (80039c0 <TIM_Base_SetConfig+0x134>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d01f      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a30      	ldr	r2, [pc, #192]	@ (80039c4 <TIM_Base_SetConfig+0x138>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d01b      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a2f      	ldr	r2, [pc, #188]	@ (80039c8 <TIM_Base_SetConfig+0x13c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d017      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a2e      	ldr	r2, [pc, #184]	@ (80039cc <TIM_Base_SetConfig+0x140>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d013      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a2d      	ldr	r2, [pc, #180]	@ (80039d0 <TIM_Base_SetConfig+0x144>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00f      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a2c      	ldr	r2, [pc, #176]	@ (80039d4 <TIM_Base_SetConfig+0x148>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00b      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a2b      	ldr	r2, [pc, #172]	@ (80039d8 <TIM_Base_SetConfig+0x14c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d007      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a2a      	ldr	r2, [pc, #168]	@ (80039dc <TIM_Base_SetConfig+0x150>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d003      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a29      	ldr	r2, [pc, #164]	@ (80039e0 <TIM_Base_SetConfig+0x154>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d108      	bne.n	8003950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a10      	ldr	r2, [pc, #64]	@ (80039b8 <TIM_Base_SetConfig+0x12c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d003      	beq.n	8003984 <TIM_Base_SetConfig+0xf8>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a12      	ldr	r2, [pc, #72]	@ (80039c8 <TIM_Base_SetConfig+0x13c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d103      	bne.n	800398c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b01      	cmp	r3, #1
 800399c:	d105      	bne.n	80039aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f023 0201 	bic.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	611a      	str	r2, [r3, #16]
  }
}
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40010000 	.word	0x40010000
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	40000c00 	.word	0x40000c00
 80039c8:	40010400 	.word	0x40010400
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40014400 	.word	0x40014400
 80039d4:	40014800 	.word	0x40014800
 80039d8:	40001800 	.word	0x40001800
 80039dc:	40001c00 	.word	0x40001c00
 80039e0:	40002000 	.word	0x40002000

080039e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e042      	b.n	8003aa4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd fdbe 	bl	80015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	@ 0x24
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f82b 	bl	8003aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab0:	b0c0      	sub	sp, #256	@ 0x100
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac8:	68d9      	ldr	r1, [r3, #12]
 8003aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	ea40 0301 	orr.w	r3, r0, r1
 8003ad4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b04:	f021 010c 	bic.w	r1, r1, #12
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b12:	430b      	orrs	r3, r1
 8003b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b26:	6999      	ldr	r1, [r3, #24]
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	ea40 0301 	orr.w	r3, r0, r1
 8003b32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	4b8f      	ldr	r3, [pc, #572]	@ (8003d78 <UART_SetConfig+0x2cc>)
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d005      	beq.n	8003b4c <UART_SetConfig+0xa0>
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	4b8d      	ldr	r3, [pc, #564]	@ (8003d7c <UART_SetConfig+0x2d0>)
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d104      	bne.n	8003b56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b4c:	f7ff f82e 	bl	8002bac <HAL_RCC_GetPCLK2Freq>
 8003b50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b54:	e003      	b.n	8003b5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b56:	f7ff f815 	bl	8002b84 <HAL_RCC_GetPCLK1Freq>
 8003b5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b68:	f040 810c 	bne.w	8003d84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b70:	2200      	movs	r2, #0
 8003b72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b7e:	4622      	mov	r2, r4
 8003b80:	462b      	mov	r3, r5
 8003b82:	1891      	adds	r1, r2, r2
 8003b84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b86:	415b      	adcs	r3, r3
 8003b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b8e:	4621      	mov	r1, r4
 8003b90:	eb12 0801 	adds.w	r8, r2, r1
 8003b94:	4629      	mov	r1, r5
 8003b96:	eb43 0901 	adc.w	r9, r3, r1
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bae:	4690      	mov	r8, r2
 8003bb0:	4699      	mov	r9, r3
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	eb18 0303 	adds.w	r3, r8, r3
 8003bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bbc:	462b      	mov	r3, r5
 8003bbe:	eb49 0303 	adc.w	r3, r9, r3
 8003bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003bd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bda:	460b      	mov	r3, r1
 8003bdc:	18db      	adds	r3, r3, r3
 8003bde:	653b      	str	r3, [r7, #80]	@ 0x50
 8003be0:	4613      	mov	r3, r2
 8003be2:	eb42 0303 	adc.w	r3, r2, r3
 8003be6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003be8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003bec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003bf0:	f7fc fb20 	bl	8000234 <__aeabi_uldivmod>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4b61      	ldr	r3, [pc, #388]	@ (8003d80 <UART_SetConfig+0x2d4>)
 8003bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	011c      	lsls	r4, r3, #4
 8003c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c06:	2200      	movs	r2, #0
 8003c08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c14:	4642      	mov	r2, r8
 8003c16:	464b      	mov	r3, r9
 8003c18:	1891      	adds	r1, r2, r2
 8003c1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c1c:	415b      	adcs	r3, r3
 8003c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c24:	4641      	mov	r1, r8
 8003c26:	eb12 0a01 	adds.w	sl, r2, r1
 8003c2a:	4649      	mov	r1, r9
 8003c2c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c44:	4692      	mov	sl, r2
 8003c46:	469b      	mov	fp, r3
 8003c48:	4643      	mov	r3, r8
 8003c4a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c52:	464b      	mov	r3, r9
 8003c54:	eb4b 0303 	adc.w	r3, fp, r3
 8003c58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c70:	460b      	mov	r3, r1
 8003c72:	18db      	adds	r3, r3, r3
 8003c74:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c76:	4613      	mov	r3, r2
 8003c78:	eb42 0303 	adc.w	r3, r2, r3
 8003c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c86:	f7fc fad5 	bl	8000234 <__aeabi_uldivmod>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4611      	mov	r1, r2
 8003c90:	4b3b      	ldr	r3, [pc, #236]	@ (8003d80 <UART_SetConfig+0x2d4>)
 8003c92:	fba3 2301 	umull	r2, r3, r3, r1
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	2264      	movs	r2, #100	@ 0x64
 8003c9a:	fb02 f303 	mul.w	r3, r2, r3
 8003c9e:	1acb      	subs	r3, r1, r3
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ca6:	4b36      	ldr	r3, [pc, #216]	@ (8003d80 <UART_SetConfig+0x2d4>)
 8003ca8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003cb4:	441c      	add	r4, r3
 8003cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003cc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003cc8:	4642      	mov	r2, r8
 8003cca:	464b      	mov	r3, r9
 8003ccc:	1891      	adds	r1, r2, r2
 8003cce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cd0:	415b      	adcs	r3, r3
 8003cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003cd8:	4641      	mov	r1, r8
 8003cda:	1851      	adds	r1, r2, r1
 8003cdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8003cde:	4649      	mov	r1, r9
 8003ce0:	414b      	adcs	r3, r1
 8003ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003cf0:	4659      	mov	r1, fp
 8003cf2:	00cb      	lsls	r3, r1, #3
 8003cf4:	4651      	mov	r1, sl
 8003cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cfa:	4651      	mov	r1, sl
 8003cfc:	00ca      	lsls	r2, r1, #3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	4642      	mov	r2, r8
 8003d06:	189b      	adds	r3, r3, r2
 8003d08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d0c:	464b      	mov	r3, r9
 8003d0e:	460a      	mov	r2, r1
 8003d10:	eb42 0303 	adc.w	r3, r2, r3
 8003d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	18db      	adds	r3, r3, r3
 8003d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d32:	4613      	mov	r3, r2
 8003d34:	eb42 0303 	adc.w	r3, r2, r3
 8003d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d42:	f7fc fa77 	bl	8000234 <__aeabi_uldivmod>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d80 <UART_SetConfig+0x2d4>)
 8003d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d50:	095b      	lsrs	r3, r3, #5
 8003d52:	2164      	movs	r1, #100	@ 0x64
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	3332      	adds	r3, #50	@ 0x32
 8003d5e:	4a08      	ldr	r2, [pc, #32]	@ (8003d80 <UART_SetConfig+0x2d4>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	f003 0207 	and.w	r2, r3, #7
 8003d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4422      	add	r2, r4
 8003d72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d74:	e106      	b.n	8003f84 <UART_SetConfig+0x4d8>
 8003d76:	bf00      	nop
 8003d78:	40011000 	.word	0x40011000
 8003d7c:	40011400 	.word	0x40011400
 8003d80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d96:	4642      	mov	r2, r8
 8003d98:	464b      	mov	r3, r9
 8003d9a:	1891      	adds	r1, r2, r2
 8003d9c:	6239      	str	r1, [r7, #32]
 8003d9e:	415b      	adcs	r3, r3
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003da6:	4641      	mov	r1, r8
 8003da8:	1854      	adds	r4, r2, r1
 8003daa:	4649      	mov	r1, r9
 8003dac:	eb43 0501 	adc.w	r5, r3, r1
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	00eb      	lsls	r3, r5, #3
 8003dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dbe:	00e2      	lsls	r2, r4, #3
 8003dc0:	4614      	mov	r4, r2
 8003dc2:	461d      	mov	r5, r3
 8003dc4:	4643      	mov	r3, r8
 8003dc6:	18e3      	adds	r3, r4, r3
 8003dc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003dcc:	464b      	mov	r3, r9
 8003dce:	eb45 0303 	adc.w	r3, r5, r3
 8003dd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003de2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003df2:	4629      	mov	r1, r5
 8003df4:	008b      	lsls	r3, r1, #2
 8003df6:	4621      	mov	r1, r4
 8003df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	008a      	lsls	r2, r1, #2
 8003e00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e04:	f7fc fa16 	bl	8000234 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4b60      	ldr	r3, [pc, #384]	@ (8003f90 <UART_SetConfig+0x4e4>)
 8003e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	011c      	lsls	r4, r3, #4
 8003e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e28:	4642      	mov	r2, r8
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	1891      	adds	r1, r2, r2
 8003e2e:	61b9      	str	r1, [r7, #24]
 8003e30:	415b      	adcs	r3, r3
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e38:	4641      	mov	r1, r8
 8003e3a:	1851      	adds	r1, r2, r1
 8003e3c:	6139      	str	r1, [r7, #16]
 8003e3e:	4649      	mov	r1, r9
 8003e40:	414b      	adcs	r3, r1
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e50:	4659      	mov	r1, fp
 8003e52:	00cb      	lsls	r3, r1, #3
 8003e54:	4651      	mov	r1, sl
 8003e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e5a:	4651      	mov	r1, sl
 8003e5c:	00ca      	lsls	r2, r1, #3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	4619      	mov	r1, r3
 8003e62:	4603      	mov	r3, r0
 8003e64:	4642      	mov	r2, r8
 8003e66:	189b      	adds	r3, r3, r2
 8003e68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e6c:	464b      	mov	r3, r9
 8003e6e:	460a      	mov	r2, r1
 8003e70:	eb42 0303 	adc.w	r3, r2, r3
 8003e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e90:	4649      	mov	r1, r9
 8003e92:	008b      	lsls	r3, r1, #2
 8003e94:	4641      	mov	r1, r8
 8003e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e9a:	4641      	mov	r1, r8
 8003e9c:	008a      	lsls	r2, r1, #2
 8003e9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ea2:	f7fc f9c7 	bl	8000234 <__aeabi_uldivmod>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4b38      	ldr	r3, [pc, #224]	@ (8003f90 <UART_SetConfig+0x4e4>)
 8003eae:	fba3 2301 	umull	r2, r3, r3, r1
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	2264      	movs	r2, #100	@ 0x64
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	1acb      	subs	r3, r1, r3
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	3332      	adds	r3, #50	@ 0x32
 8003ec0:	4a33      	ldr	r2, [pc, #204]	@ (8003f90 <UART_SetConfig+0x4e4>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ecc:	441c      	add	r4, r3
 8003ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ed6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ed8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003edc:	4642      	mov	r2, r8
 8003ede:	464b      	mov	r3, r9
 8003ee0:	1891      	adds	r1, r2, r2
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	415b      	adcs	r3, r3
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eec:	4641      	mov	r1, r8
 8003eee:	1851      	adds	r1, r2, r1
 8003ef0:	6039      	str	r1, [r7, #0]
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	414b      	adcs	r3, r1
 8003ef6:	607b      	str	r3, [r7, #4]
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f04:	4659      	mov	r1, fp
 8003f06:	00cb      	lsls	r3, r1, #3
 8003f08:	4651      	mov	r1, sl
 8003f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f0e:	4651      	mov	r1, sl
 8003f10:	00ca      	lsls	r2, r1, #3
 8003f12:	4610      	mov	r0, r2
 8003f14:	4619      	mov	r1, r3
 8003f16:	4603      	mov	r3, r0
 8003f18:	4642      	mov	r2, r8
 8003f1a:	189b      	adds	r3, r3, r2
 8003f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f1e:	464b      	mov	r3, r9
 8003f20:	460a      	mov	r2, r1
 8003f22:	eb42 0303 	adc.w	r3, r2, r3
 8003f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f32:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f40:	4649      	mov	r1, r9
 8003f42:	008b      	lsls	r3, r1, #2
 8003f44:	4641      	mov	r1, r8
 8003f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f4a:	4641      	mov	r1, r8
 8003f4c:	008a      	lsls	r2, r1, #2
 8003f4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f52:	f7fc f96f 	bl	8000234 <__aeabi_uldivmod>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f90 <UART_SetConfig+0x4e4>)
 8003f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f60:	095b      	lsrs	r3, r3, #5
 8003f62:	2164      	movs	r1, #100	@ 0x64
 8003f64:	fb01 f303 	mul.w	r3, r1, r3
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	3332      	adds	r3, #50	@ 0x32
 8003f6e:	4a08      	ldr	r2, [pc, #32]	@ (8003f90 <UART_SetConfig+0x4e4>)
 8003f70:	fba2 2303 	umull	r2, r3, r2, r3
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	f003 020f 	and.w	r2, r3, #15
 8003f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4422      	add	r2, r4
 8003f82:	609a      	str	r2, [r3, #8]
}
 8003f84:	bf00      	nop
 8003f86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f90:	51eb851f 	.word	0x51eb851f

08003f94 <__NVIC_SetPriority>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	6039      	str	r1, [r7, #0]
 8003f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	db0a      	blt.n	8003fbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	490c      	ldr	r1, [pc, #48]	@ (8003fe0 <__NVIC_SetPriority+0x4c>)
 8003fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb2:	0112      	lsls	r2, r2, #4
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003fbc:	e00a      	b.n	8003fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	4908      	ldr	r1, [pc, #32]	@ (8003fe4 <__NVIC_SetPriority+0x50>)
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	3b04      	subs	r3, #4
 8003fcc:	0112      	lsls	r2, r2, #4
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	761a      	strb	r2, [r3, #24]
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	e000e100 	.word	0xe000e100
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003fec:	4b05      	ldr	r3, [pc, #20]	@ (8004004 <SysTick_Handler+0x1c>)
 8003fee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003ff0:	f001 fd18 	bl	8005a24 <xTaskGetSchedulerState>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d001      	beq.n	8003ffe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003ffa:	f002 fb0d 	bl	8006618 <xPortSysTickHandler>
  }
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	e000e010 	.word	0xe000e010

08004008 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800400c:	2100      	movs	r1, #0
 800400e:	f06f 0004 	mvn.w	r0, #4
 8004012:	f7ff ffbf 	bl	8003f94 <__NVIC_SetPriority>
#endif
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004022:	f3ef 8305 	mrs	r3, IPSR
 8004026:	603b      	str	r3, [r7, #0]
  return(result);
 8004028:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800402e:	f06f 0305 	mvn.w	r3, #5
 8004032:	607b      	str	r3, [r7, #4]
 8004034:	e00c      	b.n	8004050 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004036:	4b0a      	ldr	r3, [pc, #40]	@ (8004060 <osKernelInitialize+0x44>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d105      	bne.n	800404a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800403e:	4b08      	ldr	r3, [pc, #32]	@ (8004060 <osKernelInitialize+0x44>)
 8004040:	2201      	movs	r2, #1
 8004042:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004044:	2300      	movs	r3, #0
 8004046:	607b      	str	r3, [r7, #4]
 8004048:	e002      	b.n	8004050 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800404a:	f04f 33ff 	mov.w	r3, #4294967295
 800404e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004050:	687b      	ldr	r3, [r7, #4]
}
 8004052:	4618      	mov	r0, r3
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	2000054c 	.word	0x2000054c

08004064 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800406a:	f3ef 8305 	mrs	r3, IPSR
 800406e:	603b      	str	r3, [r7, #0]
  return(result);
 8004070:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004076:	f06f 0305 	mvn.w	r3, #5
 800407a:	607b      	str	r3, [r7, #4]
 800407c:	e010      	b.n	80040a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800407e:	4b0b      	ldr	r3, [pc, #44]	@ (80040ac <osKernelStart+0x48>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d109      	bne.n	800409a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004086:	f7ff ffbf 	bl	8004008 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800408a:	4b08      	ldr	r3, [pc, #32]	@ (80040ac <osKernelStart+0x48>)
 800408c:	2202      	movs	r2, #2
 800408e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004090:	f001 f87a 	bl	8005188 <vTaskStartScheduler>
      stat = osOK;
 8004094:	2300      	movs	r3, #0
 8004096:	607b      	str	r3, [r7, #4]
 8004098:	e002      	b.n	80040a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800409a:	f04f 33ff 	mov.w	r3, #4294967295
 800409e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80040a0:	687b      	ldr	r3, [r7, #4]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	2000054c 	.word	0x2000054c

080040b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08e      	sub	sp, #56	@ 0x38
 80040b4:	af04      	add	r7, sp, #16
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040c0:	f3ef 8305 	mrs	r3, IPSR
 80040c4:	617b      	str	r3, [r7, #20]
  return(result);
 80040c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d17e      	bne.n	80041ca <osThreadNew+0x11a>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d07b      	beq.n	80041ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80040d2:	2380      	movs	r3, #128	@ 0x80
 80040d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80040d6:	2318      	movs	r3, #24
 80040d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80040de:	f04f 33ff 	mov.w	r3, #4294967295
 80040e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d045      	beq.n	8004176 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <osThreadNew+0x48>
        name = attr->name;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <osThreadNew+0x6e>
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b38      	cmp	r3, #56	@ 0x38
 8004110:	d805      	bhi.n	800411e <osThreadNew+0x6e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <osThreadNew+0x72>
        return (NULL);
 800411e:	2300      	movs	r3, #0
 8004120:	e054      	b.n	80041cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00e      	beq.n	8004158 <osThreadNew+0xa8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	2b5b      	cmp	r3, #91	@ 0x5b
 8004140:	d90a      	bls.n	8004158 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004146:	2b00      	cmp	r3, #0
 8004148:	d006      	beq.n	8004158 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <osThreadNew+0xa8>
        mem = 1;
 8004152:	2301      	movs	r3, #1
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	e010      	b.n	800417a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10c      	bne.n	800417a <osThreadNew+0xca>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d108      	bne.n	800417a <osThreadNew+0xca>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d104      	bne.n	800417a <osThreadNew+0xca>
          mem = 0;
 8004170:	2300      	movs	r3, #0
 8004172:	61bb      	str	r3, [r7, #24]
 8004174:	e001      	b.n	800417a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d110      	bne.n	80041a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004188:	9202      	str	r2, [sp, #8]
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	6a3a      	ldr	r2, [r7, #32]
 8004194:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 fe1a 	bl	8004dd0 <xTaskCreateStatic>
 800419c:	4603      	mov	r3, r0
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	e013      	b.n	80041ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d110      	bne.n	80041ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	f107 0310 	add.w	r3, r7, #16
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 fe68 	bl	8004e90 <xTaskCreate>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d001      	beq.n	80041ca <osThreadNew+0x11a>
            hTask = NULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041ca:	693b      	ldr	r3, [r7, #16]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3728      	adds	r7, #40	@ 0x28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041dc:	f3ef 8305 	mrs	r3, IPSR
 80041e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80041e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <osDelay+0x1c>
    stat = osErrorISR;
 80041e8:	f06f 0305 	mvn.w	r3, #5
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	e007      	b.n	8004200 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <osDelay+0x2c>
      vTaskDelay(ticks);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 ff8e 	bl	800511c <vTaskDelay>
    }
  }

  return (stat);
 8004200:	68fb      	ldr	r3, [r7, #12]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4a07      	ldr	r2, [pc, #28]	@ (8004238 <vApplicationGetIdleTaskMemory+0x2c>)
 800421c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4a06      	ldr	r2, [pc, #24]	@ (800423c <vApplicationGetIdleTaskMemory+0x30>)
 8004222:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2280      	movs	r2, #128	@ 0x80
 8004228:	601a      	str	r2, [r3, #0]
}
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	20000550 	.word	0x20000550
 800423c:	200005ac 	.word	0x200005ac

08004240 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4a07      	ldr	r2, [pc, #28]	@ (800426c <vApplicationGetTimerTaskMemory+0x2c>)
 8004250:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4a06      	ldr	r2, [pc, #24]	@ (8004270 <vApplicationGetTimerTaskMemory+0x30>)
 8004256:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800425e:	601a      	str	r2, [r3, #0]
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	200007ac 	.word	0x200007ac
 8004270:	20000808 	.word	0x20000808

08004274 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f103 0208 	add.w	r2, r3, #8
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f04f 32ff 	mov.w	r2, #4294967295
 800428c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f103 0208 	add.w	r2, r3, #8
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f103 0208 	add.w	r2, r3, #8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004316:	b480      	push	{r7}
 8004318:	b085      	sub	sp, #20
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432c:	d103      	bne.n	8004336 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e00c      	b.n	8004350 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3308      	adds	r3, #8
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	e002      	b.n	8004344 <vListInsert+0x2e>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	429a      	cmp	r2, r3
 800434e:	d2f6      	bcs.n	800433e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	601a      	str	r2, [r3, #0]
}
 800437c:	bf00      	nop
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6892      	ldr	r2, [r2, #8]
 800439e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6852      	ldr	r2, [r2, #4]
 80043a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d103      	bne.n	80043bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	1e5a      	subs	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10b      	bne.n	8004408 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004402:	bf00      	nop
 8004404:	bf00      	nop
 8004406:	e7fd      	b.n	8004404 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004408:	f002 f876 	bl	80064f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004414:	68f9      	ldr	r1, [r7, #12]
 8004416:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	441a      	add	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004438:	3b01      	subs	r3, #1
 800443a:	68f9      	ldr	r1, [r7, #12]
 800443c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800443e:	fb01 f303 	mul.w	r3, r1, r3
 8004442:	441a      	add	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	22ff      	movs	r2, #255	@ 0xff
 800444c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	22ff      	movs	r2, #255	@ 0xff
 8004454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d114      	bne.n	8004488 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01a      	beq.n	800449c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3310      	adds	r3, #16
 800446a:	4618      	mov	r0, r3
 800446c:	f001 f91a 	bl	80056a4 <xTaskRemoveFromEventList>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d012      	beq.n	800449c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004476:	4b0d      	ldr	r3, [pc, #52]	@ (80044ac <xQueueGenericReset+0xd0>)
 8004478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	e009      	b.n	800449c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3310      	adds	r3, #16
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff fef1 	bl	8004274 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3324      	adds	r3, #36	@ 0x24
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff feec 	bl	8004274 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800449c:	f002 f85e 	bl	800655c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044a0:	2301      	movs	r3, #1
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	e000ed04 	.word	0xe000ed04

080044b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08e      	sub	sp, #56	@ 0x38
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80044d6:	bf00      	nop
 80044d8:	bf00      	nop
 80044da:	e7fd      	b.n	80044d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10b      	bne.n	80044fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	e7fd      	b.n	80044f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <xQueueGenericCreateStatic+0x56>
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <xQueueGenericCreateStatic+0x5a>
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <xQueueGenericCreateStatic+0x5c>
 800450a:	2300      	movs	r3, #0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	623b      	str	r3, [r7, #32]
}
 8004522:	bf00      	nop
 8004524:	bf00      	nop
 8004526:	e7fd      	b.n	8004524 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d102      	bne.n	8004534 <xQueueGenericCreateStatic+0x84>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <xQueueGenericCreateStatic+0x88>
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <xQueueGenericCreateStatic+0x8a>
 8004538:	2300      	movs	r3, #0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10b      	bne.n	8004556 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	61fb      	str	r3, [r7, #28]
}
 8004550:	bf00      	nop
 8004552:	bf00      	nop
 8004554:	e7fd      	b.n	8004552 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004556:	2350      	movs	r3, #80	@ 0x50
 8004558:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b50      	cmp	r3, #80	@ 0x50
 800455e:	d00b      	beq.n	8004578 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	61bb      	str	r3, [r7, #24]
}
 8004572:	bf00      	nop
 8004574:	bf00      	nop
 8004576:	e7fd      	b.n	8004574 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004578:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800457e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00d      	beq.n	80045a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800458c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	4613      	mov	r3, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f805 	bl	80045aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3730      	adds	r7, #48	@ 0x30
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d103      	bne.n	80045c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	e002      	b.n	80045cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045d8:	2101      	movs	r1, #1
 80045da:	69b8      	ldr	r0, [r7, #24]
 80045dc:	f7ff fefe 	bl	80043dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08e      	sub	sp, #56	@ 0x38
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045fe:	2300      	movs	r3, #0
 8004600:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10b      	bne.n	8004624 <xQueueGenericSend+0x34>
	__asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800461e:	bf00      	nop
 8004620:	bf00      	nop
 8004622:	e7fd      	b.n	8004620 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d103      	bne.n	8004632 <xQueueGenericSend+0x42>
 800462a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <xQueueGenericSend+0x46>
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <xQueueGenericSend+0x48>
 8004636:	2300      	movs	r3, #0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10b      	bne.n	8004654 <xQueueGenericSend+0x64>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800464e:	bf00      	nop
 8004650:	bf00      	nop
 8004652:	e7fd      	b.n	8004650 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d103      	bne.n	8004662 <xQueueGenericSend+0x72>
 800465a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <xQueueGenericSend+0x76>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <xQueueGenericSend+0x78>
 8004666:	2300      	movs	r3, #0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <xQueueGenericSend+0x94>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	623b      	str	r3, [r7, #32]
}
 800467e:	bf00      	nop
 8004680:	bf00      	nop
 8004682:	e7fd      	b.n	8004680 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004684:	f001 f9ce 	bl	8005a24 <xTaskGetSchedulerState>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d102      	bne.n	8004694 <xQueueGenericSend+0xa4>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <xQueueGenericSend+0xa8>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <xQueueGenericSend+0xaa>
 8004698:	2300      	movs	r3, #0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10b      	bne.n	80046b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	61fb      	str	r3, [r7, #28]
}
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	e7fd      	b.n	80046b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046b6:	f001 ff1f 	bl	80064f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d302      	bcc.n	80046cc <xQueueGenericSend+0xdc>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d129      	bne.n	8004720 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046d2:	f000 fa0f 	bl	8004af4 <prvCopyDataToQueue>
 80046d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d010      	beq.n	8004702 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e2:	3324      	adds	r3, #36	@ 0x24
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 ffdd 	bl	80056a4 <xTaskRemoveFromEventList>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d013      	beq.n	8004718 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046f0:	4b3f      	ldr	r3, [pc, #252]	@ (80047f0 <xQueueGenericSend+0x200>)
 80046f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	e00a      	b.n	8004718 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004708:	4b39      	ldr	r3, [pc, #228]	@ (80047f0 <xQueueGenericSend+0x200>)
 800470a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004718:	f001 ff20 	bl	800655c <vPortExitCritical>
				return pdPASS;
 800471c:	2301      	movs	r3, #1
 800471e:	e063      	b.n	80047e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d103      	bne.n	800472e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004726:	f001 ff19 	bl	800655c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800472a:	2300      	movs	r3, #0
 800472c:	e05c      	b.n	80047e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800472e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004730:	2b00      	cmp	r3, #0
 8004732:	d106      	bne.n	8004742 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004734:	f107 0314 	add.w	r3, r7, #20
 8004738:	4618      	mov	r0, r3
 800473a:	f001 f817 	bl	800576c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800473e:	2301      	movs	r3, #1
 8004740:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004742:	f001 ff0b 	bl	800655c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004746:	f000 fd87 	bl	8005258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800474a:	f001 fed5 	bl	80064f8 <vPortEnterCritical>
 800474e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004750:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004754:	b25b      	sxtb	r3, r3
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475a:	d103      	bne.n	8004764 <xQueueGenericSend+0x174>
 800475c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004766:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800476a:	b25b      	sxtb	r3, r3
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d103      	bne.n	800477a <xQueueGenericSend+0x18a>
 8004772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800477a:	f001 feef 	bl	800655c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800477e:	1d3a      	adds	r2, r7, #4
 8004780:	f107 0314 	add.w	r3, r7, #20
 8004784:	4611      	mov	r1, r2
 8004786:	4618      	mov	r0, r3
 8004788:	f001 f806 	bl	8005798 <xTaskCheckForTimeOut>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d124      	bne.n	80047dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004792:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004794:	f000 faa6 	bl	8004ce4 <prvIsQueueFull>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d018      	beq.n	80047d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800479e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a0:	3310      	adds	r3, #16
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 ff2a 	bl	8005600 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047ae:	f000 fa31 	bl	8004c14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047b2:	f000 fd5f 	bl	8005274 <xTaskResumeAll>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f47f af7c 	bne.w	80046b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80047be:	4b0c      	ldr	r3, [pc, #48]	@ (80047f0 <xQueueGenericSend+0x200>)
 80047c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	e772      	b.n	80046b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047d2:	f000 fa1f 	bl	8004c14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047d6:	f000 fd4d 	bl	8005274 <xTaskResumeAll>
 80047da:	e76c      	b.n	80046b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047de:	f000 fa19 	bl	8004c14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047e2:	f000 fd47 	bl	8005274 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3738      	adds	r7, #56	@ 0x38
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	e000ed04 	.word	0xe000ed04

080047f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b090      	sub	sp, #64	@ 0x40
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10b      	bne.n	8004824 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	e7fd      	b.n	8004820 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d103      	bne.n	8004832 <xQueueGenericSendFromISR+0x3e>
 800482a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <xQueueGenericSendFromISR+0x42>
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <xQueueGenericSendFromISR+0x44>
 8004836:	2300      	movs	r3, #0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10b      	bne.n	8004854 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800484e:	bf00      	nop
 8004850:	bf00      	nop
 8004852:	e7fd      	b.n	8004850 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d103      	bne.n	8004862 <xQueueGenericSendFromISR+0x6e>
 800485a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <xQueueGenericSendFromISR+0x72>
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <xQueueGenericSendFromISR+0x74>
 8004866:	2300      	movs	r3, #0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10b      	bne.n	8004884 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	623b      	str	r3, [r7, #32]
}
 800487e:	bf00      	nop
 8004880:	bf00      	nop
 8004882:	e7fd      	b.n	8004880 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004884:	f001 ff18 	bl	80066b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004888:	f3ef 8211 	mrs	r2, BASEPRI
 800488c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	61fa      	str	r2, [r7, #28]
 800489e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048a0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048a2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d302      	bcc.n	80048b6 <xQueueGenericSendFromISR+0xc2>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d12f      	bne.n	8004916 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80048cc:	f000 f912 	bl	8004af4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048d0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d112      	bne.n	8004900 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d016      	beq.n	8004910 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e4:	3324      	adds	r3, #36	@ 0x24
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fedc 	bl	80056a4 <xTaskRemoveFromEventList>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00e      	beq.n	8004910 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00b      	beq.n	8004910 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e007      	b.n	8004910 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004900:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004904:	3301      	adds	r3, #1
 8004906:	b2db      	uxtb	r3, r3
 8004908:	b25a      	sxtb	r2, r3
 800490a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004910:	2301      	movs	r3, #1
 8004912:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004914:	e001      	b.n	800491a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004916:	2300      	movs	r3, #0
 8004918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800491a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004924:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004928:	4618      	mov	r0, r3
 800492a:	3740      	adds	r7, #64	@ 0x40
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08c      	sub	sp, #48	@ 0x30
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800493c:	2300      	movs	r3, #0
 800493e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10b      	bne.n	8004962 <xQueueReceive+0x32>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	623b      	str	r3, [r7, #32]
}
 800495c:	bf00      	nop
 800495e:	bf00      	nop
 8004960:	e7fd      	b.n	800495e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d103      	bne.n	8004970 <xQueueReceive+0x40>
 8004968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <xQueueReceive+0x44>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <xQueueReceive+0x46>
 8004974:	2300      	movs	r3, #0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10b      	bne.n	8004992 <xQueueReceive+0x62>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	61fb      	str	r3, [r7, #28]
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	e7fd      	b.n	800498e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004992:	f001 f847 	bl	8005a24 <xTaskGetSchedulerState>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d102      	bne.n	80049a2 <xQueueReceive+0x72>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <xQueueReceive+0x76>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <xQueueReceive+0x78>
 80049a6:	2300      	movs	r3, #0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10b      	bne.n	80049c4 <xQueueReceive+0x94>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	61bb      	str	r3, [r7, #24]
}
 80049be:	bf00      	nop
 80049c0:	bf00      	nop
 80049c2:	e7fd      	b.n	80049c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049c4:	f001 fd98 	bl	80064f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01f      	beq.n	8004a14 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049d8:	f000 f8f6 	bl	8004bc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049de:	1e5a      	subs	r2, r3, #1
 80049e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00f      	beq.n	8004a0c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ee:	3310      	adds	r3, #16
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fe57 	bl	80056a4 <xTaskRemoveFromEventList>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d007      	beq.n	8004a0c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049fc:	4b3c      	ldr	r3, [pc, #240]	@ (8004af0 <xQueueReceive+0x1c0>)
 80049fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a0c:	f001 fda6 	bl	800655c <vPortExitCritical>
				return pdPASS;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e069      	b.n	8004ae8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d103      	bne.n	8004a22 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a1a:	f001 fd9f 	bl	800655c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e062      	b.n	8004ae8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d106      	bne.n	8004a36 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a28:	f107 0310 	add.w	r3, r7, #16
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fe9d 	bl	800576c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a32:	2301      	movs	r3, #1
 8004a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a36:	f001 fd91 	bl	800655c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a3a:	f000 fc0d 	bl	8005258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a3e:	f001 fd5b 	bl	80064f8 <vPortEnterCritical>
 8004a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a48:	b25b      	sxtb	r3, r3
 8004a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4e:	d103      	bne.n	8004a58 <xQueueReceive+0x128>
 8004a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a5e:	b25b      	sxtb	r3, r3
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	d103      	bne.n	8004a6e <xQueueReceive+0x13e>
 8004a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a6e:	f001 fd75 	bl	800655c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a72:	1d3a      	adds	r2, r7, #4
 8004a74:	f107 0310 	add.w	r3, r7, #16
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fe8c 	bl	8005798 <xTaskCheckForTimeOut>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d123      	bne.n	8004ace <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a88:	f000 f916 	bl	8004cb8 <prvIsQueueEmpty>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d017      	beq.n	8004ac2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	3324      	adds	r3, #36	@ 0x24
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4611      	mov	r1, r2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fdb0 	bl	8005600 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004aa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004aa2:	f000 f8b7 	bl	8004c14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004aa6:	f000 fbe5 	bl	8005274 <xTaskResumeAll>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d189      	bne.n	80049c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8004af0 <xQueueReceive+0x1c0>)
 8004ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	e780      	b.n	80049c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ac4:	f000 f8a6 	bl	8004c14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ac8:	f000 fbd4 	bl	8005274 <xTaskResumeAll>
 8004acc:	e77a      	b.n	80049c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ace:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ad0:	f000 f8a0 	bl	8004c14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ad4:	f000 fbce 	bl	8005274 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ad8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ada:	f000 f8ed 	bl	8004cb8 <prvIsQueueEmpty>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f43f af6f 	beq.w	80049c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ae6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3730      	adds	r7, #48	@ 0x30
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	e000ed04 	.word	0xe000ed04

08004af4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10d      	bne.n	8004b2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d14d      	bne.n	8004bb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 ff9e 	bl	8005a60 <xTaskPriorityDisinherit>
 8004b24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	609a      	str	r2, [r3, #8]
 8004b2c:	e043      	b.n	8004bb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d119      	bne.n	8004b68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6858      	ldr	r0, [r3, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	f002 f816 	bl	8006b70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	441a      	add	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d32b      	bcc.n	8004bb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	e026      	b.n	8004bb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	68d8      	ldr	r0, [r3, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b70:	461a      	mov	r2, r3
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	f001 fffc 	bl	8006b70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b80:	425b      	negs	r3, r3
 8004b82:	441a      	add	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d207      	bcs.n	8004ba4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9c:	425b      	negs	r3, r3
 8004b9e:	441a      	add	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d105      	bne.n	8004bb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004bbe:	697b      	ldr	r3, [r7, #20]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d018      	beq.n	8004c0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	441a      	add	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d303      	bcc.n	8004bfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68d9      	ldr	r1, [r3, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c04:	461a      	mov	r2, r3
 8004c06:	6838      	ldr	r0, [r7, #0]
 8004c08:	f001 ffb2 	bl	8006b70 <memcpy>
	}
}
 8004c0c:	bf00      	nop
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c1c:	f001 fc6c 	bl	80064f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c28:	e011      	b.n	8004c4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d012      	beq.n	8004c58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3324      	adds	r3, #36	@ 0x24
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fd34 	bl	80056a4 <xTaskRemoveFromEventList>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c42:	f000 fe0d 	bl	8005860 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	dce9      	bgt.n	8004c2a <prvUnlockQueue+0x16>
 8004c56:	e000      	b.n	8004c5a <prvUnlockQueue+0x46>
					break;
 8004c58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	22ff      	movs	r2, #255	@ 0xff
 8004c5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004c62:	f001 fc7b 	bl	800655c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c66:	f001 fc47 	bl	80064f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c72:	e011      	b.n	8004c98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d012      	beq.n	8004ca2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3310      	adds	r3, #16
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fd0f 	bl	80056a4 <xTaskRemoveFromEventList>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c8c:	f000 fde8 	bl	8005860 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c90:	7bbb      	ldrb	r3, [r7, #14]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	dce9      	bgt.n	8004c74 <prvUnlockQueue+0x60>
 8004ca0:	e000      	b.n	8004ca4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ca2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	22ff      	movs	r2, #255	@ 0xff
 8004ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004cac:	f001 fc56 	bl	800655c <vPortExitCritical>
}
 8004cb0:	bf00      	nop
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cc0:	f001 fc1a 	bl	80064f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	e001      	b.n	8004cd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cd6:	f001 fc41 	bl	800655c <vPortExitCritical>

	return xReturn;
 8004cda:	68fb      	ldr	r3, [r7, #12]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cec:	f001 fc04 	bl	80064f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d102      	bne.n	8004d02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e001      	b.n	8004d06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d06:	f001 fc29 	bl	800655c <vPortExitCritical>

	return xReturn;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	e014      	b.n	8004d4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d24:	4a0f      	ldr	r2, [pc, #60]	@ (8004d64 <vQueueAddToRegistry+0x50>)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10b      	bne.n	8004d48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d30:	490c      	ldr	r1, [pc, #48]	@ (8004d64 <vQueueAddToRegistry+0x50>)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d64 <vQueueAddToRegistry+0x50>)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	4413      	add	r3, r2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d46:	e006      	b.n	8004d56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b07      	cmp	r3, #7
 8004d52:	d9e7      	bls.n	8004d24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20000c08 	.word	0x20000c08

08004d68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d78:	f001 fbbe 	bl	80064f8 <vPortEnterCritical>
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d82:	b25b      	sxtb	r3, r3
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d103      	bne.n	8004d92 <vQueueWaitForMessageRestricted+0x2a>
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d98:	b25b      	sxtb	r3, r3
 8004d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9e:	d103      	bne.n	8004da8 <vQueueWaitForMessageRestricted+0x40>
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004da8:	f001 fbd8 	bl	800655c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d106      	bne.n	8004dc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	3324      	adds	r3, #36	@ 0x24
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fc45 	bl	800564c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004dc2:	6978      	ldr	r0, [r7, #20]
 8004dc4:	f7ff ff26 	bl	8004c14 <prvUnlockQueue>
	}
 8004dc8:	bf00      	nop
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08e      	sub	sp, #56	@ 0x38
 8004dd4:	af04      	add	r7, sp, #16
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10b      	bne.n	8004dfc <xTaskCreateStatic+0x2c>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	623b      	str	r3, [r7, #32]
}
 8004df6:	bf00      	nop
 8004df8:	bf00      	nop
 8004dfa:	e7fd      	b.n	8004df8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10b      	bne.n	8004e1a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	61fb      	str	r3, [r7, #28]
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop
 8004e18:	e7fd      	b.n	8004e16 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e1a:	235c      	movs	r3, #92	@ 0x5c
 8004e1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b5c      	cmp	r3, #92	@ 0x5c
 8004e22:	d00b      	beq.n	8004e3c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	61bb      	str	r3, [r7, #24]
}
 8004e36:	bf00      	nop
 8004e38:	bf00      	nop
 8004e3a:	e7fd      	b.n	8004e38 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01e      	beq.n	8004e82 <xTaskCreateStatic+0xb2>
 8004e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d01b      	beq.n	8004e82 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e52:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	9303      	str	r3, [sp, #12]
 8004e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e62:	9302      	str	r3, [sp, #8]
 8004e64:	f107 0314 	add.w	r3, r7, #20
 8004e68:	9301      	str	r3, [sp, #4]
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f850 	bl	8004f1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e7c:	f000 f8de 	bl	800503c <prvAddNewTaskToReadyList>
 8004e80:	e001      	b.n	8004e86 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e86:	697b      	ldr	r3, [r7, #20]
	}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3728      	adds	r7, #40	@ 0x28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08c      	sub	sp, #48	@ 0x30
 8004e94:	af04      	add	r7, sp, #16
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ea0:	88fb      	ldrh	r3, [r7, #6]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f001 fc49 	bl	800673c <pvPortMalloc>
 8004eaa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00e      	beq.n	8004ed0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004eb2:	205c      	movs	r0, #92	@ 0x5c
 8004eb4:	f001 fc42 	bl	800673c <pvPortMalloc>
 8004eb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ec6:	e005      	b.n	8004ed4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ec8:	6978      	ldr	r0, [r7, #20]
 8004eca:	f001 fd05 	bl	80068d8 <vPortFree>
 8004ece:	e001      	b.n	8004ed4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d017      	beq.n	8004f0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ee2:	88fa      	ldrh	r2, [r7, #6]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	9303      	str	r3, [sp, #12]
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	9302      	str	r3, [sp, #8]
 8004eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eee:	9301      	str	r3, [sp, #4]
 8004ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f80e 	bl	8004f1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004efe:	69f8      	ldr	r0, [r7, #28]
 8004f00:	f000 f89c 	bl	800503c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f04:	2301      	movs	r3, #1
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	e002      	b.n	8004f10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f10:	69bb      	ldr	r3, [r7, #24]
	}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3720      	adds	r7, #32
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b088      	sub	sp, #32
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
 8004f26:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	461a      	mov	r2, r3
 8004f32:	21a5      	movs	r1, #165	@ 0xa5
 8004f34:	f001 fdf0 	bl	8006b18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f42:	3b01      	subs	r3, #1
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	f023 0307 	bic.w	r3, r3, #7
 8004f50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00b      	beq.n	8004f74 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	617b      	str	r3, [r7, #20]
}
 8004f6e:	bf00      	nop
 8004f70:	bf00      	nop
 8004f72:	e7fd      	b.n	8004f70 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d01f      	beq.n	8004fba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	e012      	b.n	8004fa6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	4413      	add	r3, r2
 8004f86:	7819      	ldrb	r1, [r3, #0]
 8004f88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	3334      	adds	r3, #52	@ 0x34
 8004f90:	460a      	mov	r2, r1
 8004f92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	4413      	add	r3, r2
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d006      	beq.n	8004fae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	2b0f      	cmp	r3, #15
 8004faa:	d9e9      	bls.n	8004f80 <prvInitialiseNewTask+0x66>
 8004fac:	e000      	b.n	8004fb0 <prvInitialiseNewTask+0x96>
			{
				break;
 8004fae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fb8:	e003      	b.n	8004fc2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc4:	2b37      	cmp	r3, #55	@ 0x37
 8004fc6:	d901      	bls.n	8004fcc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fc8:	2337      	movs	r3, #55	@ 0x37
 8004fca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fd6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fda:	2200      	movs	r2, #0
 8004fdc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff f966 	bl	80042b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fea:	3318      	adds	r3, #24
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff f961 	bl	80042b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ff6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005006:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500a:	2200      	movs	r2, #0
 800500c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800500e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	68f9      	ldr	r1, [r7, #12]
 800501a:	69b8      	ldr	r0, [r7, #24]
 800501c:	f001 f93e 	bl	800629c <pxPortInitialiseStack>
 8005020:	4602      	mov	r2, r0
 8005022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005024:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800502c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800502e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005030:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005032:	bf00      	nop
 8005034:	3720      	adds	r7, #32
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005044:	f001 fa58 	bl	80064f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005048:	4b2d      	ldr	r3, [pc, #180]	@ (8005100 <prvAddNewTaskToReadyList+0xc4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3301      	adds	r3, #1
 800504e:	4a2c      	ldr	r2, [pc, #176]	@ (8005100 <prvAddNewTaskToReadyList+0xc4>)
 8005050:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005052:	4b2c      	ldr	r3, [pc, #176]	@ (8005104 <prvAddNewTaskToReadyList+0xc8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800505a:	4a2a      	ldr	r2, [pc, #168]	@ (8005104 <prvAddNewTaskToReadyList+0xc8>)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005060:	4b27      	ldr	r3, [pc, #156]	@ (8005100 <prvAddNewTaskToReadyList+0xc4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d110      	bne.n	800508a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005068:	f000 fc1e 	bl	80058a8 <prvInitialiseTaskLists>
 800506c:	e00d      	b.n	800508a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800506e:	4b26      	ldr	r3, [pc, #152]	@ (8005108 <prvAddNewTaskToReadyList+0xcc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005076:	4b23      	ldr	r3, [pc, #140]	@ (8005104 <prvAddNewTaskToReadyList+0xc8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005080:	429a      	cmp	r2, r3
 8005082:	d802      	bhi.n	800508a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005084:	4a1f      	ldr	r2, [pc, #124]	@ (8005104 <prvAddNewTaskToReadyList+0xc8>)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800508a:	4b20      	ldr	r3, [pc, #128]	@ (800510c <prvAddNewTaskToReadyList+0xd0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3301      	adds	r3, #1
 8005090:	4a1e      	ldr	r2, [pc, #120]	@ (800510c <prvAddNewTaskToReadyList+0xd0>)
 8005092:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005094:	4b1d      	ldr	r3, [pc, #116]	@ (800510c <prvAddNewTaskToReadyList+0xd0>)
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005110 <prvAddNewTaskToReadyList+0xd4>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d903      	bls.n	80050b0 <prvAddNewTaskToReadyList+0x74>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	4a18      	ldr	r2, [pc, #96]	@ (8005110 <prvAddNewTaskToReadyList+0xd4>)
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4a15      	ldr	r2, [pc, #84]	@ (8005114 <prvAddNewTaskToReadyList+0xd8>)
 80050be:	441a      	add	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3304      	adds	r3, #4
 80050c4:	4619      	mov	r1, r3
 80050c6:	4610      	mov	r0, r2
 80050c8:	f7ff f901 	bl	80042ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050cc:	f001 fa46 	bl	800655c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005108 <prvAddNewTaskToReadyList+0xcc>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00e      	beq.n	80050f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005104 <prvAddNewTaskToReadyList+0xc8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d207      	bcs.n	80050f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005118 <prvAddNewTaskToReadyList+0xdc>)
 80050e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050f6:	bf00      	nop
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	2000111c 	.word	0x2000111c
 8005104:	20000c48 	.word	0x20000c48
 8005108:	20001128 	.word	0x20001128
 800510c:	20001138 	.word	0x20001138
 8005110:	20001124 	.word	0x20001124
 8005114:	20000c4c 	.word	0x20000c4c
 8005118:	e000ed04 	.word	0xe000ed04

0800511c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d018      	beq.n	8005160 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800512e:	4b14      	ldr	r3, [pc, #80]	@ (8005180 <vTaskDelay+0x64>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00b      	beq.n	800514e <vTaskDelay+0x32>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	60bb      	str	r3, [r7, #8]
}
 8005148:	bf00      	nop
 800514a:	bf00      	nop
 800514c:	e7fd      	b.n	800514a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800514e:	f000 f883 	bl	8005258 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005152:	2100      	movs	r1, #0
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fcf3 	bl	8005b40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800515a:	f000 f88b 	bl	8005274 <xTaskResumeAll>
 800515e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d107      	bne.n	8005176 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005166:	4b07      	ldr	r3, [pc, #28]	@ (8005184 <vTaskDelay+0x68>)
 8005168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20001144 	.word	0x20001144
 8005184:	e000ed04 	.word	0xe000ed04

08005188 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	@ 0x28
 800518c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800518e:	2300      	movs	r3, #0
 8005190:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005192:	2300      	movs	r3, #0
 8005194:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005196:	463a      	mov	r2, r7
 8005198:	1d39      	adds	r1, r7, #4
 800519a:	f107 0308 	add.w	r3, r7, #8
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff f834 	bl	800420c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	9202      	str	r2, [sp, #8]
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	2300      	movs	r3, #0
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	2300      	movs	r3, #0
 80051b4:	460a      	mov	r2, r1
 80051b6:	4922      	ldr	r1, [pc, #136]	@ (8005240 <vTaskStartScheduler+0xb8>)
 80051b8:	4822      	ldr	r0, [pc, #136]	@ (8005244 <vTaskStartScheduler+0xbc>)
 80051ba:	f7ff fe09 	bl	8004dd0 <xTaskCreateStatic>
 80051be:	4603      	mov	r3, r0
 80051c0:	4a21      	ldr	r2, [pc, #132]	@ (8005248 <vTaskStartScheduler+0xc0>)
 80051c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051c4:	4b20      	ldr	r3, [pc, #128]	@ (8005248 <vTaskStartScheduler+0xc0>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051cc:	2301      	movs	r3, #1
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	e001      	b.n	80051d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d102      	bne.n	80051e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80051dc:	f000 fd04 	bl	8005be8 <xTimerCreateTimerTask>
 80051e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d116      	bne.n	8005216 <vTaskStartScheduler+0x8e>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	613b      	str	r3, [r7, #16]
}
 80051fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051fc:	4b13      	ldr	r3, [pc, #76]	@ (800524c <vTaskStartScheduler+0xc4>)
 80051fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005202:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005204:	4b12      	ldr	r3, [pc, #72]	@ (8005250 <vTaskStartScheduler+0xc8>)
 8005206:	2201      	movs	r2, #1
 8005208:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800520a:	4b12      	ldr	r3, [pc, #72]	@ (8005254 <vTaskStartScheduler+0xcc>)
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005210:	f001 f8ce 	bl	80063b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005214:	e00f      	b.n	8005236 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d10b      	bne.n	8005236 <vTaskStartScheduler+0xae>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	60fb      	str	r3, [r7, #12]
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	e7fd      	b.n	8005232 <vTaskStartScheduler+0xaa>
}
 8005236:	bf00      	nop
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	08006bfc 	.word	0x08006bfc
 8005244:	08005879 	.word	0x08005879
 8005248:	20001140 	.word	0x20001140
 800524c:	2000113c 	.word	0x2000113c
 8005250:	20001128 	.word	0x20001128
 8005254:	20001120 	.word	0x20001120

08005258 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800525c:	4b04      	ldr	r3, [pc, #16]	@ (8005270 <vTaskSuspendAll+0x18>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3301      	adds	r3, #1
 8005262:	4a03      	ldr	r2, [pc, #12]	@ (8005270 <vTaskSuspendAll+0x18>)
 8005264:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005266:	bf00      	nop
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	20001144 	.word	0x20001144

08005274 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800527e:	2300      	movs	r3, #0
 8005280:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005282:	4b42      	ldr	r3, [pc, #264]	@ (800538c <xTaskResumeAll+0x118>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	603b      	str	r3, [r7, #0]
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052a2:	f001 f929 	bl	80064f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052a6:	4b39      	ldr	r3, [pc, #228]	@ (800538c <xTaskResumeAll+0x118>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	4a37      	ldr	r2, [pc, #220]	@ (800538c <xTaskResumeAll+0x118>)
 80052ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052b0:	4b36      	ldr	r3, [pc, #216]	@ (800538c <xTaskResumeAll+0x118>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d162      	bne.n	800537e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052b8:	4b35      	ldr	r3, [pc, #212]	@ (8005390 <xTaskResumeAll+0x11c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d05e      	beq.n	800537e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052c0:	e02f      	b.n	8005322 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c2:	4b34      	ldr	r3, [pc, #208]	@ (8005394 <xTaskResumeAll+0x120>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3318      	adds	r3, #24
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff f85a 	bl	8004388 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff f855 	bl	8004388 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005398 <xTaskResumeAll+0x124>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d903      	bls.n	80052f2 <xTaskResumeAll+0x7e>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005398 <xTaskResumeAll+0x124>)
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4a27      	ldr	r2, [pc, #156]	@ (800539c <xTaskResumeAll+0x128>)
 8005300:	441a      	add	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3304      	adds	r3, #4
 8005306:	4619      	mov	r1, r3
 8005308:	4610      	mov	r0, r2
 800530a:	f7fe ffe0 	bl	80042ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005312:	4b23      	ldr	r3, [pc, #140]	@ (80053a0 <xTaskResumeAll+0x12c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005318:	429a      	cmp	r2, r3
 800531a:	d302      	bcc.n	8005322 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800531c:	4b21      	ldr	r3, [pc, #132]	@ (80053a4 <xTaskResumeAll+0x130>)
 800531e:	2201      	movs	r2, #1
 8005320:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005322:	4b1c      	ldr	r3, [pc, #112]	@ (8005394 <xTaskResumeAll+0x120>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1cb      	bne.n	80052c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005330:	f000 fb58 	bl	80059e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005334:	4b1c      	ldr	r3, [pc, #112]	@ (80053a8 <xTaskResumeAll+0x134>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d010      	beq.n	8005362 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005340:	f000 f846 	bl	80053d0 <xTaskIncrementTick>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800534a:	4b16      	ldr	r3, [pc, #88]	@ (80053a4 <xTaskResumeAll+0x130>)
 800534c:	2201      	movs	r2, #1
 800534e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3b01      	subs	r3, #1
 8005354:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1f1      	bne.n	8005340 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800535c:	4b12      	ldr	r3, [pc, #72]	@ (80053a8 <xTaskResumeAll+0x134>)
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005362:	4b10      	ldr	r3, [pc, #64]	@ (80053a4 <xTaskResumeAll+0x130>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d009      	beq.n	800537e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800536a:	2301      	movs	r3, #1
 800536c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800536e:	4b0f      	ldr	r3, [pc, #60]	@ (80053ac <xTaskResumeAll+0x138>)
 8005370:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800537e:	f001 f8ed 	bl	800655c <vPortExitCritical>

	return xAlreadyYielded;
 8005382:	68bb      	ldr	r3, [r7, #8]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20001144 	.word	0x20001144
 8005390:	2000111c 	.word	0x2000111c
 8005394:	200010dc 	.word	0x200010dc
 8005398:	20001124 	.word	0x20001124
 800539c:	20000c4c 	.word	0x20000c4c
 80053a0:	20000c48 	.word	0x20000c48
 80053a4:	20001130 	.word	0x20001130
 80053a8:	2000112c 	.word	0x2000112c
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80053b6:	4b05      	ldr	r3, [pc, #20]	@ (80053cc <xTaskGetTickCount+0x1c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80053bc:	687b      	ldr	r3, [r7, #4]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	20001120 	.word	0x20001120

080053d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053da:	4b4f      	ldr	r3, [pc, #316]	@ (8005518 <xTaskIncrementTick+0x148>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f040 8090 	bne.w	8005504 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053e4:	4b4d      	ldr	r3, [pc, #308]	@ (800551c <xTaskIncrementTick+0x14c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3301      	adds	r3, #1
 80053ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053ec:	4a4b      	ldr	r2, [pc, #300]	@ (800551c <xTaskIncrementTick+0x14c>)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d121      	bne.n	800543c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80053f8:	4b49      	ldr	r3, [pc, #292]	@ (8005520 <xTaskIncrementTick+0x150>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00b      	beq.n	800541a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	603b      	str	r3, [r7, #0]
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop
 8005418:	e7fd      	b.n	8005416 <xTaskIncrementTick+0x46>
 800541a:	4b41      	ldr	r3, [pc, #260]	@ (8005520 <xTaskIncrementTick+0x150>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	4b40      	ldr	r3, [pc, #256]	@ (8005524 <xTaskIncrementTick+0x154>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a3e      	ldr	r2, [pc, #248]	@ (8005520 <xTaskIncrementTick+0x150>)
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	4a3e      	ldr	r2, [pc, #248]	@ (8005524 <xTaskIncrementTick+0x154>)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	4b3e      	ldr	r3, [pc, #248]	@ (8005528 <xTaskIncrementTick+0x158>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3301      	adds	r3, #1
 8005434:	4a3c      	ldr	r2, [pc, #240]	@ (8005528 <xTaskIncrementTick+0x158>)
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	f000 fad4 	bl	80059e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800543c:	4b3b      	ldr	r3, [pc, #236]	@ (800552c <xTaskIncrementTick+0x15c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	429a      	cmp	r2, r3
 8005444:	d349      	bcc.n	80054da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005446:	4b36      	ldr	r3, [pc, #216]	@ (8005520 <xTaskIncrementTick+0x150>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d104      	bne.n	800545a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005450:	4b36      	ldr	r3, [pc, #216]	@ (800552c <xTaskIncrementTick+0x15c>)
 8005452:	f04f 32ff 	mov.w	r2, #4294967295
 8005456:	601a      	str	r2, [r3, #0]
					break;
 8005458:	e03f      	b.n	80054da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800545a:	4b31      	ldr	r3, [pc, #196]	@ (8005520 <xTaskIncrementTick+0x150>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	429a      	cmp	r2, r3
 8005470:	d203      	bcs.n	800547a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005472:	4a2e      	ldr	r2, [pc, #184]	@ (800552c <xTaskIncrementTick+0x15c>)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005478:	e02f      	b.n	80054da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	3304      	adds	r3, #4
 800547e:	4618      	mov	r0, r3
 8005480:	f7fe ff82 	bl	8004388 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005488:	2b00      	cmp	r3, #0
 800548a:	d004      	beq.n	8005496 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	3318      	adds	r3, #24
 8005490:	4618      	mov	r0, r3
 8005492:	f7fe ff79 	bl	8004388 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800549a:	4b25      	ldr	r3, [pc, #148]	@ (8005530 <xTaskIncrementTick+0x160>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d903      	bls.n	80054aa <xTaskIncrementTick+0xda>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a6:	4a22      	ldr	r2, [pc, #136]	@ (8005530 <xTaskIncrementTick+0x160>)
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005534 <xTaskIncrementTick+0x164>)
 80054b8:	441a      	add	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	3304      	adds	r3, #4
 80054be:	4619      	mov	r1, r3
 80054c0:	4610      	mov	r0, r2
 80054c2:	f7fe ff04 	bl	80042ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005538 <xTaskIncrementTick+0x168>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d3b8      	bcc.n	8005446 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80054d4:	2301      	movs	r3, #1
 80054d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054d8:	e7b5      	b.n	8005446 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054da:	4b17      	ldr	r3, [pc, #92]	@ (8005538 <xTaskIncrementTick+0x168>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e0:	4914      	ldr	r1, [pc, #80]	@ (8005534 <xTaskIncrementTick+0x164>)
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	440b      	add	r3, r1
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d901      	bls.n	80054f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80054f2:	2301      	movs	r3, #1
 80054f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80054f6:	4b11      	ldr	r3, [pc, #68]	@ (800553c <xTaskIncrementTick+0x16c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d007      	beq.n	800550e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80054fe:	2301      	movs	r3, #1
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	e004      	b.n	800550e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005504:	4b0e      	ldr	r3, [pc, #56]	@ (8005540 <xTaskIncrementTick+0x170>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3301      	adds	r3, #1
 800550a:	4a0d      	ldr	r2, [pc, #52]	@ (8005540 <xTaskIncrementTick+0x170>)
 800550c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800550e:	697b      	ldr	r3, [r7, #20]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20001144 	.word	0x20001144
 800551c:	20001120 	.word	0x20001120
 8005520:	200010d4 	.word	0x200010d4
 8005524:	200010d8 	.word	0x200010d8
 8005528:	20001134 	.word	0x20001134
 800552c:	2000113c 	.word	0x2000113c
 8005530:	20001124 	.word	0x20001124
 8005534:	20000c4c 	.word	0x20000c4c
 8005538:	20000c48 	.word	0x20000c48
 800553c:	20001130 	.word	0x20001130
 8005540:	2000112c 	.word	0x2000112c

08005544 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800554a:	4b28      	ldr	r3, [pc, #160]	@ (80055ec <vTaskSwitchContext+0xa8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005552:	4b27      	ldr	r3, [pc, #156]	@ (80055f0 <vTaskSwitchContext+0xac>)
 8005554:	2201      	movs	r2, #1
 8005556:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005558:	e042      	b.n	80055e0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800555a:	4b25      	ldr	r3, [pc, #148]	@ (80055f0 <vTaskSwitchContext+0xac>)
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005560:	4b24      	ldr	r3, [pc, #144]	@ (80055f4 <vTaskSwitchContext+0xb0>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	e011      	b.n	800558c <vTaskSwitchContext+0x48>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10b      	bne.n	8005586 <vTaskSwitchContext+0x42>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	607b      	str	r3, [r7, #4]
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	e7fd      	b.n	8005582 <vTaskSwitchContext+0x3e>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3b01      	subs	r3, #1
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	491a      	ldr	r1, [pc, #104]	@ (80055f8 <vTaskSwitchContext+0xb4>)
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0e3      	beq.n	8005568 <vTaskSwitchContext+0x24>
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4613      	mov	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4a13      	ldr	r2, [pc, #76]	@ (80055f8 <vTaskSwitchContext+0xb4>)
 80055ac:	4413      	add	r3, r2
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	605a      	str	r2, [r3, #4]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	3308      	adds	r3, #8
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d104      	bne.n	80055d0 <vTaskSwitchContext+0x8c>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	605a      	str	r2, [r3, #4]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	4a09      	ldr	r2, [pc, #36]	@ (80055fc <vTaskSwitchContext+0xb8>)
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	4a06      	ldr	r2, [pc, #24]	@ (80055f4 <vTaskSwitchContext+0xb0>)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6013      	str	r3, [r2, #0]
}
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	20001144 	.word	0x20001144
 80055f0:	20001130 	.word	0x20001130
 80055f4:	20001124 	.word	0x20001124
 80055f8:	20000c4c 	.word	0x20000c4c
 80055fc:	20000c48 	.word	0x20000c48

08005600 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10b      	bne.n	8005628 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	60fb      	str	r3, [r7, #12]
}
 8005622:	bf00      	nop
 8005624:	bf00      	nop
 8005626:	e7fd      	b.n	8005624 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005628:	4b07      	ldr	r3, [pc, #28]	@ (8005648 <vTaskPlaceOnEventList+0x48>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3318      	adds	r3, #24
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7fe fe70 	bl	8004316 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005636:	2101      	movs	r1, #1
 8005638:	6838      	ldr	r0, [r7, #0]
 800563a:	f000 fa81 	bl	8005b40 <prvAddCurrentTaskToDelayedList>
}
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000c48 	.word	0x20000c48

0800564c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10b      	bne.n	8005676 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	617b      	str	r3, [r7, #20]
}
 8005670:	bf00      	nop
 8005672:	bf00      	nop
 8005674:	e7fd      	b.n	8005672 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005676:	4b0a      	ldr	r3, [pc, #40]	@ (80056a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3318      	adds	r3, #24
 800567c:	4619      	mov	r1, r3
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f7fe fe25 	bl	80042ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800568a:	f04f 33ff 	mov.w	r3, #4294967295
 800568e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	68b8      	ldr	r0, [r7, #8]
 8005694:	f000 fa54 	bl	8005b40 <prvAddCurrentTaskToDelayedList>
	}
 8005698:	bf00      	nop
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20000c48 	.word	0x20000c48

080056a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10b      	bne.n	80056d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	60fb      	str	r3, [r7, #12]
}
 80056cc:	bf00      	nop
 80056ce:	bf00      	nop
 80056d0:	e7fd      	b.n	80056ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	3318      	adds	r3, #24
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe fe56 	bl	8004388 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005754 <xTaskRemoveFromEventList+0xb0>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d11d      	bne.n	8005720 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fe fe4d 	bl	8004388 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f2:	4b19      	ldr	r3, [pc, #100]	@ (8005758 <xTaskRemoveFromEventList+0xb4>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d903      	bls.n	8005702 <xTaskRemoveFromEventList+0x5e>
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fe:	4a16      	ldr	r2, [pc, #88]	@ (8005758 <xTaskRemoveFromEventList+0xb4>)
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005706:	4613      	mov	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4a13      	ldr	r2, [pc, #76]	@ (800575c <xTaskRemoveFromEventList+0xb8>)
 8005710:	441a      	add	r2, r3
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	3304      	adds	r3, #4
 8005716:	4619      	mov	r1, r3
 8005718:	4610      	mov	r0, r2
 800571a:	f7fe fdd8 	bl	80042ce <vListInsertEnd>
 800571e:	e005      	b.n	800572c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	3318      	adds	r3, #24
 8005724:	4619      	mov	r1, r3
 8005726:	480e      	ldr	r0, [pc, #56]	@ (8005760 <xTaskRemoveFromEventList+0xbc>)
 8005728:	f7fe fdd1 	bl	80042ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005730:	4b0c      	ldr	r3, [pc, #48]	@ (8005764 <xTaskRemoveFromEventList+0xc0>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005736:	429a      	cmp	r2, r3
 8005738:	d905      	bls.n	8005746 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800573a:	2301      	movs	r3, #1
 800573c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800573e:	4b0a      	ldr	r3, [pc, #40]	@ (8005768 <xTaskRemoveFromEventList+0xc4>)
 8005740:	2201      	movs	r2, #1
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	e001      	b.n	800574a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800574a:	697b      	ldr	r3, [r7, #20]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20001144 	.word	0x20001144
 8005758:	20001124 	.word	0x20001124
 800575c:	20000c4c 	.word	0x20000c4c
 8005760:	200010dc 	.word	0x200010dc
 8005764:	20000c48 	.word	0x20000c48
 8005768:	20001130 	.word	0x20001130

0800576c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005774:	4b06      	ldr	r3, [pc, #24]	@ (8005790 <vTaskInternalSetTimeOutState+0x24>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800577c:	4b05      	ldr	r3, [pc, #20]	@ (8005794 <vTaskInternalSetTimeOutState+0x28>)
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	605a      	str	r2, [r3, #4]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	20001134 	.word	0x20001134
 8005794:	20001120 	.word	0x20001120

08005798 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10b      	bne.n	80057c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	613b      	str	r3, [r7, #16]
}
 80057ba:	bf00      	nop
 80057bc:	bf00      	nop
 80057be:	e7fd      	b.n	80057bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10b      	bne.n	80057de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	60fb      	str	r3, [r7, #12]
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	e7fd      	b.n	80057da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80057de:	f000 fe8b 	bl	80064f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005858 <xTaskCheckForTimeOut+0xc0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d102      	bne.n	8005802 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61fb      	str	r3, [r7, #28]
 8005800:	e023      	b.n	800584a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	4b15      	ldr	r3, [pc, #84]	@ (800585c <xTaskCheckForTimeOut+0xc4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d007      	beq.n	800581e <xTaskCheckForTimeOut+0x86>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	429a      	cmp	r2, r3
 8005816:	d302      	bcc.n	800581e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005818:	2301      	movs	r3, #1
 800581a:	61fb      	str	r3, [r7, #28]
 800581c:	e015      	b.n	800584a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	429a      	cmp	r2, r3
 8005826:	d20b      	bcs.n	8005840 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	1ad2      	subs	r2, r2, r3
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7ff ff99 	bl	800576c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
 800583e:	e004      	b.n	800584a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005846:	2301      	movs	r3, #1
 8005848:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800584a:	f000 fe87 	bl	800655c <vPortExitCritical>

	return xReturn;
 800584e:	69fb      	ldr	r3, [r7, #28]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3720      	adds	r7, #32
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	20001120 	.word	0x20001120
 800585c:	20001134 	.word	0x20001134

08005860 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005864:	4b03      	ldr	r3, [pc, #12]	@ (8005874 <vTaskMissedYield+0x14>)
 8005866:	2201      	movs	r2, #1
 8005868:	601a      	str	r2, [r3, #0]
}
 800586a:	bf00      	nop
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	20001130 	.word	0x20001130

08005878 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005880:	f000 f852 	bl	8005928 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005884:	4b06      	ldr	r3, [pc, #24]	@ (80058a0 <prvIdleTask+0x28>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d9f9      	bls.n	8005880 <prvIdleTask+0x8>
			{
				taskYIELD();
 800588c:	4b05      	ldr	r3, [pc, #20]	@ (80058a4 <prvIdleTask+0x2c>)
 800588e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800589c:	e7f0      	b.n	8005880 <prvIdleTask+0x8>
 800589e:	bf00      	nop
 80058a0:	20000c4c 	.word	0x20000c4c
 80058a4:	e000ed04 	.word	0xe000ed04

080058a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058ae:	2300      	movs	r3, #0
 80058b0:	607b      	str	r3, [r7, #4]
 80058b2:	e00c      	b.n	80058ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4a12      	ldr	r2, [pc, #72]	@ (8005908 <prvInitialiseTaskLists+0x60>)
 80058c0:	4413      	add	r3, r2
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe fcd6 	bl	8004274 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3301      	adds	r3, #1
 80058cc:	607b      	str	r3, [r7, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b37      	cmp	r3, #55	@ 0x37
 80058d2:	d9ef      	bls.n	80058b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058d4:	480d      	ldr	r0, [pc, #52]	@ (800590c <prvInitialiseTaskLists+0x64>)
 80058d6:	f7fe fccd 	bl	8004274 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058da:	480d      	ldr	r0, [pc, #52]	@ (8005910 <prvInitialiseTaskLists+0x68>)
 80058dc:	f7fe fcca 	bl	8004274 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058e0:	480c      	ldr	r0, [pc, #48]	@ (8005914 <prvInitialiseTaskLists+0x6c>)
 80058e2:	f7fe fcc7 	bl	8004274 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058e6:	480c      	ldr	r0, [pc, #48]	@ (8005918 <prvInitialiseTaskLists+0x70>)
 80058e8:	f7fe fcc4 	bl	8004274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058ec:	480b      	ldr	r0, [pc, #44]	@ (800591c <prvInitialiseTaskLists+0x74>)
 80058ee:	f7fe fcc1 	bl	8004274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005920 <prvInitialiseTaskLists+0x78>)
 80058f4:	4a05      	ldr	r2, [pc, #20]	@ (800590c <prvInitialiseTaskLists+0x64>)
 80058f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005924 <prvInitialiseTaskLists+0x7c>)
 80058fa:	4a05      	ldr	r2, [pc, #20]	@ (8005910 <prvInitialiseTaskLists+0x68>)
 80058fc:	601a      	str	r2, [r3, #0]
}
 80058fe:	bf00      	nop
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000c4c 	.word	0x20000c4c
 800590c:	200010ac 	.word	0x200010ac
 8005910:	200010c0 	.word	0x200010c0
 8005914:	200010dc 	.word	0x200010dc
 8005918:	200010f0 	.word	0x200010f0
 800591c:	20001108 	.word	0x20001108
 8005920:	200010d4 	.word	0x200010d4
 8005924:	200010d8 	.word	0x200010d8

08005928 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800592e:	e019      	b.n	8005964 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005930:	f000 fde2 	bl	80064f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005934:	4b10      	ldr	r3, [pc, #64]	@ (8005978 <prvCheckTasksWaitingTermination+0x50>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3304      	adds	r3, #4
 8005940:	4618      	mov	r0, r3
 8005942:	f7fe fd21 	bl	8004388 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005946:	4b0d      	ldr	r3, [pc, #52]	@ (800597c <prvCheckTasksWaitingTermination+0x54>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3b01      	subs	r3, #1
 800594c:	4a0b      	ldr	r2, [pc, #44]	@ (800597c <prvCheckTasksWaitingTermination+0x54>)
 800594e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005950:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <prvCheckTasksWaitingTermination+0x58>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3b01      	subs	r3, #1
 8005956:	4a0a      	ldr	r2, [pc, #40]	@ (8005980 <prvCheckTasksWaitingTermination+0x58>)
 8005958:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800595a:	f000 fdff 	bl	800655c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f810 	bl	8005984 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005964:	4b06      	ldr	r3, [pc, #24]	@ (8005980 <prvCheckTasksWaitingTermination+0x58>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e1      	bne.n	8005930 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800596c:	bf00      	nop
 800596e:	bf00      	nop
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	200010f0 	.word	0x200010f0
 800597c:	2000111c 	.word	0x2000111c
 8005980:	20001104 	.word	0x20001104

08005984 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005992:	2b00      	cmp	r3, #0
 8005994:	d108      	bne.n	80059a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599a:	4618      	mov	r0, r3
 800599c:	f000 ff9c 	bl	80068d8 <vPortFree>
				vPortFree( pxTCB );
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 ff99 	bl	80068d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059a6:	e019      	b.n	80059dc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d103      	bne.n	80059ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 ff90 	bl	80068d8 <vPortFree>
	}
 80059b8:	e010      	b.n	80059dc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d00b      	beq.n	80059dc <prvDeleteTCB+0x58>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	60fb      	str	r3, [r7, #12]
}
 80059d6:	bf00      	nop
 80059d8:	bf00      	nop
 80059da:	e7fd      	b.n	80059d8 <prvDeleteTCB+0x54>
	}
 80059dc:	bf00      	nop
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ea:	4b0c      	ldr	r3, [pc, #48]	@ (8005a1c <prvResetNextTaskUnblockTime+0x38>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005a20 <prvResetNextTaskUnblockTime+0x3c>)
 80059f6:	f04f 32ff 	mov.w	r2, #4294967295
 80059fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059fc:	e008      	b.n	8005a10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059fe:	4b07      	ldr	r3, [pc, #28]	@ (8005a1c <prvResetNextTaskUnblockTime+0x38>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	4a04      	ldr	r2, [pc, #16]	@ (8005a20 <prvResetNextTaskUnblockTime+0x3c>)
 8005a0e:	6013      	str	r3, [r2, #0]
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	200010d4 	.word	0x200010d4
 8005a20:	2000113c 	.word	0x2000113c

08005a24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a58 <xTaskGetSchedulerState+0x34>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d102      	bne.n	8005a38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a32:	2301      	movs	r3, #1
 8005a34:	607b      	str	r3, [r7, #4]
 8005a36:	e008      	b.n	8005a4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a38:	4b08      	ldr	r3, [pc, #32]	@ (8005a5c <xTaskGetSchedulerState+0x38>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d102      	bne.n	8005a46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a40:	2302      	movs	r3, #2
 8005a42:	607b      	str	r3, [r7, #4]
 8005a44:	e001      	b.n	8005a4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a46:	2300      	movs	r3, #0
 8005a48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a4a:	687b      	ldr	r3, [r7, #4]
	}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	20001128 	.word	0x20001128
 8005a5c:	20001144 	.word	0x20001144

08005a60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d058      	beq.n	8005b28 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a76:	4b2f      	ldr	r3, [pc, #188]	@ (8005b34 <xTaskPriorityDisinherit+0xd4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d00b      	beq.n	8005a98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	60fb      	str	r3, [r7, #12]
}
 8005a92:	bf00      	nop
 8005a94:	bf00      	nop
 8005a96:	e7fd      	b.n	8005a94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10b      	bne.n	8005ab8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	60bb      	str	r3, [r7, #8]
}
 8005ab2:	bf00      	nop
 8005ab4:	bf00      	nop
 8005ab6:	e7fd      	b.n	8005ab4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005abc:	1e5a      	subs	r2, r3, #1
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d02c      	beq.n	8005b28 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d128      	bne.n	8005b28 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fe fc54 	bl	8004388 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005af8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b38 <xTaskPriorityDisinherit+0xd8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d903      	bls.n	8005b08 <xTaskPriorityDisinherit+0xa8>
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b04:	4a0c      	ldr	r2, [pc, #48]	@ (8005b38 <xTaskPriorityDisinherit+0xd8>)
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4a09      	ldr	r2, [pc, #36]	@ (8005b3c <xTaskPriorityDisinherit+0xdc>)
 8005b16:	441a      	add	r2, r3
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	f7fe fbd5 	bl	80042ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b24:	2301      	movs	r3, #1
 8005b26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b28:	697b      	ldr	r3, [r7, #20]
	}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20000c48 	.word	0x20000c48
 8005b38:	20001124 	.word	0x20001124
 8005b3c:	20000c4c 	.word	0x20000c4c

08005b40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b4a:	4b21      	ldr	r3, [pc, #132]	@ (8005bd0 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b50:	4b20      	ldr	r3, [pc, #128]	@ (8005bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3304      	adds	r3, #4
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fc16 	bl	8004388 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b62:	d10a      	bne.n	8005b7a <prvAddCurrentTaskToDelayedList+0x3a>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3304      	adds	r3, #4
 8005b70:	4619      	mov	r1, r3
 8005b72:	4819      	ldr	r0, [pc, #100]	@ (8005bd8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b74:	f7fe fbab 	bl	80042ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b78:	e026      	b.n	8005bc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4413      	add	r3, r2
 8005b80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b82:	4b14      	ldr	r3, [pc, #80]	@ (8005bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d209      	bcs.n	8005ba6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b92:	4b12      	ldr	r3, [pc, #72]	@ (8005bdc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4610      	mov	r0, r2
 8005ba0:	f7fe fbb9 	bl	8004316 <vListInsert>
}
 8005ba4:	e010      	b.n	8005bc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8005be0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f7fe fbaf 	bl	8004316 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005be4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d202      	bcs.n	8005bc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005bc2:	4a08      	ldr	r2, [pc, #32]	@ (8005be4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	6013      	str	r3, [r2, #0]
}
 8005bc8:	bf00      	nop
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20001120 	.word	0x20001120
 8005bd4:	20000c48 	.word	0x20000c48
 8005bd8:	20001108 	.word	0x20001108
 8005bdc:	200010d8 	.word	0x200010d8
 8005be0:	200010d4 	.word	0x200010d4
 8005be4:	2000113c 	.word	0x2000113c

08005be8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08a      	sub	sp, #40	@ 0x28
 8005bec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005bf2:	f000 fb13 	bl	800621c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c6c <xTimerCreateTimerTask+0x84>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d021      	beq.n	8005c42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c06:	1d3a      	adds	r2, r7, #4
 8005c08:	f107 0108 	add.w	r1, r7, #8
 8005c0c:	f107 030c 	add.w	r3, r7, #12
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fe fb15 	bl	8004240 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	9202      	str	r2, [sp, #8]
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	2302      	movs	r3, #2
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	2300      	movs	r3, #0
 8005c26:	460a      	mov	r2, r1
 8005c28:	4911      	ldr	r1, [pc, #68]	@ (8005c70 <xTimerCreateTimerTask+0x88>)
 8005c2a:	4812      	ldr	r0, [pc, #72]	@ (8005c74 <xTimerCreateTimerTask+0x8c>)
 8005c2c:	f7ff f8d0 	bl	8004dd0 <xTaskCreateStatic>
 8005c30:	4603      	mov	r3, r0
 8005c32:	4a11      	ldr	r2, [pc, #68]	@ (8005c78 <xTimerCreateTimerTask+0x90>)
 8005c34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c36:	4b10      	ldr	r3, [pc, #64]	@ (8005c78 <xTimerCreateTimerTask+0x90>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10b      	bne.n	8005c60 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	613b      	str	r3, [r7, #16]
}
 8005c5a:	bf00      	nop
 8005c5c:	bf00      	nop
 8005c5e:	e7fd      	b.n	8005c5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c60:	697b      	ldr	r3, [r7, #20]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20001178 	.word	0x20001178
 8005c70:	08006c04 	.word	0x08006c04
 8005c74:	08005db5 	.word	0x08005db5
 8005c78:	2000117c 	.word	0x2000117c

08005c7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08a      	sub	sp, #40	@ 0x28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10b      	bne.n	8005cac <xTimerGenericCommand+0x30>
	__asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	623b      	str	r3, [r7, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	bf00      	nop
 8005caa:	e7fd      	b.n	8005ca8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005cac:	4b19      	ldr	r3, [pc, #100]	@ (8005d14 <xTimerGenericCommand+0x98>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d02a      	beq.n	8005d0a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b05      	cmp	r3, #5
 8005cc4:	dc18      	bgt.n	8005cf8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005cc6:	f7ff fead 	bl	8005a24 <xTaskGetSchedulerState>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d109      	bne.n	8005ce4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005cd0:	4b10      	ldr	r3, [pc, #64]	@ (8005d14 <xTimerGenericCommand+0x98>)
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	f107 0110 	add.w	r1, r7, #16
 8005cd8:	2300      	movs	r3, #0
 8005cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cdc:	f7fe fc88 	bl	80045f0 <xQueueGenericSend>
 8005ce0:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ce2:	e012      	b.n	8005d0a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8005d14 <xTimerGenericCommand+0x98>)
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	f107 0110 	add.w	r1, r7, #16
 8005cec:	2300      	movs	r3, #0
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f7fe fc7e 	bl	80045f0 <xQueueGenericSend>
 8005cf4:	6278      	str	r0, [r7, #36]	@ 0x24
 8005cf6:	e008      	b.n	8005d0a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005cf8:	4b06      	ldr	r3, [pc, #24]	@ (8005d14 <xTimerGenericCommand+0x98>)
 8005cfa:	6818      	ldr	r0, [r3, #0]
 8005cfc:	f107 0110 	add.w	r1, r7, #16
 8005d00:	2300      	movs	r3, #0
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	f7fe fd76 	bl	80047f4 <xQueueGenericSendFromISR>
 8005d08:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3728      	adds	r7, #40	@ 0x28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20001178 	.word	0x20001178

08005d18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b088      	sub	sp, #32
 8005d1c:	af02      	add	r7, sp, #8
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d22:	4b23      	ldr	r3, [pc, #140]	@ (8005db0 <prvProcessExpiredTimer+0x98>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fe fb29 	bl	8004388 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d023      	beq.n	8005d8c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	699a      	ldr	r2, [r3, #24]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	18d1      	adds	r1, r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	6978      	ldr	r0, [r7, #20]
 8005d52:	f000 f8d5 	bl	8005f00 <prvInsertTimerInActiveList>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d020      	beq.n	8005d9e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	2300      	movs	r3, #0
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	2100      	movs	r1, #0
 8005d66:	6978      	ldr	r0, [r7, #20]
 8005d68:	f7ff ff88 	bl	8005c7c <xTimerGenericCommand>
 8005d6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d114      	bne.n	8005d9e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	60fb      	str	r3, [r7, #12]
}
 8005d86:	bf00      	nop
 8005d88:	bf00      	nop
 8005d8a:	e7fd      	b.n	8005d88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d92:	f023 0301 	bic.w	r3, r3, #1
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	6978      	ldr	r0, [r7, #20]
 8005da4:	4798      	blx	r3
}
 8005da6:	bf00      	nop
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20001170 	.word	0x20001170

08005db4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dbc:	f107 0308 	add.w	r3, r7, #8
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 f859 	bl	8005e78 <prvGetNextExpireTime>
 8005dc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 f805 	bl	8005ddc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005dd2:	f000 f8d7 	bl	8005f84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dd6:	bf00      	nop
 8005dd8:	e7f0      	b.n	8005dbc <prvTimerTask+0x8>
	...

08005ddc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005de6:	f7ff fa37 	bl	8005258 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005dea:	f107 0308 	add.w	r3, r7, #8
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 f866 	bl	8005ec0 <prvSampleTimeNow>
 8005df4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d130      	bne.n	8005e5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <prvProcessTimerOrBlockTask+0x3c>
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d806      	bhi.n	8005e18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e0a:	f7ff fa33 	bl	8005274 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e0e:	68f9      	ldr	r1, [r7, #12]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff ff81 	bl	8005d18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e16:	e024      	b.n	8005e62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d008      	beq.n	8005e30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e1e:	4b13      	ldr	r3, [pc, #76]	@ (8005e6c <prvProcessTimerOrBlockTask+0x90>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <prvProcessTimerOrBlockTask+0x50>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e000      	b.n	8005e2e <prvProcessTimerOrBlockTask+0x52>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e30:	4b0f      	ldr	r3, [pc, #60]	@ (8005e70 <prvProcessTimerOrBlockTask+0x94>)
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f7fe ff93 	bl	8004d68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e42:	f7ff fa17 	bl	8005274 <xTaskResumeAll>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e4c:	4b09      	ldr	r3, [pc, #36]	@ (8005e74 <prvProcessTimerOrBlockTask+0x98>)
 8005e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	f3bf 8f6f 	isb	sy
}
 8005e5c:	e001      	b.n	8005e62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e5e:	f7ff fa09 	bl	8005274 <xTaskResumeAll>
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20001174 	.word	0x20001174
 8005e70:	20001178 	.word	0x20001178
 8005e74:	e000ed04 	.word	0xe000ed04

08005e78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e80:	4b0e      	ldr	r3, [pc, #56]	@ (8005ebc <prvGetNextExpireTime+0x44>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <prvGetNextExpireTime+0x16>
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	e000      	b.n	8005e90 <prvGetNextExpireTime+0x18>
 8005e8e:	2200      	movs	r2, #0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d105      	bne.n	8005ea8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e9c:	4b07      	ldr	r3, [pc, #28]	@ (8005ebc <prvGetNextExpireTime+0x44>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	e001      	b.n	8005eac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005eac:	68fb      	ldr	r3, [r7, #12]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	20001170 	.word	0x20001170

08005ec0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ec8:	f7ff fa72 	bl	80053b0 <xTaskGetTickCount>
 8005ecc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ece:	4b0b      	ldr	r3, [pc, #44]	@ (8005efc <prvSampleTimeNow+0x3c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d205      	bcs.n	8005ee4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ed8:	f000 f93a 	bl	8006150 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	e002      	b.n	8005eea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005eea:	4a04      	ldr	r2, [pc, #16]	@ (8005efc <prvSampleTimeNow+0x3c>)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20001180 	.word	0x20001180

08005f00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d812      	bhi.n	8005f4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d302      	bcc.n	8005f3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f34:	2301      	movs	r3, #1
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	e01b      	b.n	8005f72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f3a:	4b10      	ldr	r3, [pc, #64]	@ (8005f7c <prvInsertTimerInActiveList+0x7c>)
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3304      	adds	r3, #4
 8005f42:	4619      	mov	r1, r3
 8005f44:	4610      	mov	r0, r2
 8005f46:	f7fe f9e6 	bl	8004316 <vListInsert>
 8005f4a:	e012      	b.n	8005f72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d206      	bcs.n	8005f62 <prvInsertTimerInActiveList+0x62>
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d302      	bcc.n	8005f62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	e007      	b.n	8005f72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f62:	4b07      	ldr	r3, [pc, #28]	@ (8005f80 <prvInsertTimerInActiveList+0x80>)
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	f7fe f9d2 	bl	8004316 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f72:	697b      	ldr	r3, [r7, #20]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	20001174 	.word	0x20001174
 8005f80:	20001170 	.word	0x20001170

08005f84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08e      	sub	sp, #56	@ 0x38
 8005f88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f8a:	e0ce      	b.n	800612a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	da19      	bge.n	8005fc6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f92:	1d3b      	adds	r3, r7, #4
 8005f94:	3304      	adds	r3, #4
 8005f96:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10b      	bne.n	8005fb6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	61fb      	str	r3, [r7, #28]
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	e7fd      	b.n	8005fb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fbc:	6850      	ldr	r0, [r2, #4]
 8005fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fc0:	6892      	ldr	r2, [r2, #8]
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f2c0 80ae 	blt.w	800612a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d004      	beq.n	8005fe4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fdc:	3304      	adds	r3, #4
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe f9d2 	bl	8004388 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff ff6a 	bl	8005ec0 <prvSampleTimeNow>
 8005fec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b09      	cmp	r3, #9
 8005ff2:	f200 8097 	bhi.w	8006124 <prvProcessReceivedCommands+0x1a0>
 8005ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ffc <prvProcessReceivedCommands+0x78>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	08006025 	.word	0x08006025
 8006000:	08006025 	.word	0x08006025
 8006004:	08006025 	.word	0x08006025
 8006008:	0800609b 	.word	0x0800609b
 800600c:	080060af 	.word	0x080060af
 8006010:	080060fb 	.word	0x080060fb
 8006014:	08006025 	.word	0x08006025
 8006018:	08006025 	.word	0x08006025
 800601c:	0800609b 	.word	0x0800609b
 8006020:	080060af 	.word	0x080060af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006026:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800602a:	f043 0301 	orr.w	r3, r3, #1
 800602e:	b2da      	uxtb	r2, r3
 8006030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006032:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	18d1      	adds	r1, r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006042:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006044:	f7ff ff5c 	bl	8005f00 <prvInsertTimerInActiveList>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d06c      	beq.n	8006128 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800604e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006054:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006058:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d061      	beq.n	8006128 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	441a      	add	r2, r3
 800606c:	2300      	movs	r3, #0
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	2300      	movs	r3, #0
 8006072:	2100      	movs	r1, #0
 8006074:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006076:	f7ff fe01 	bl	8005c7c <xTimerGenericCommand>
 800607a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d152      	bne.n	8006128 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	61bb      	str	r3, [r7, #24]
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	e7fd      	b.n	8006096 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800609a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060a0:	f023 0301 	bic.w	r3, r3, #1
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80060ac:	e03d      	b.n	800612a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060b4:	f043 0301 	orr.w	r3, r3, #1
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80060c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10b      	bne.n	80060e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	617b      	str	r3, [r7, #20]
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	e7fd      	b.n	80060e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80060e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	18d1      	adds	r1, r2, r3
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060f4:	f7ff ff04 	bl	8005f00 <prvInsertTimerInActiveList>
					break;
 80060f8:	e017      	b.n	800612a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80060fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d103      	bne.n	8006110 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006108:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800610a:	f000 fbe5 	bl	80068d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800610e:	e00c      	b.n	800612a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006112:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006116:	f023 0301 	bic.w	r3, r3, #1
 800611a:	b2da      	uxtb	r2, r3
 800611c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006122:	e002      	b.n	800612a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006124:	bf00      	nop
 8006126:	e000      	b.n	800612a <prvProcessReceivedCommands+0x1a6>
					break;
 8006128:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800612a:	4b08      	ldr	r3, [pc, #32]	@ (800614c <prvProcessReceivedCommands+0x1c8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	1d39      	adds	r1, r7, #4
 8006130:	2200      	movs	r2, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f7fe fbfc 	bl	8004930 <xQueueReceive>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	f47f af26 	bne.w	8005f8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006140:	bf00      	nop
 8006142:	bf00      	nop
 8006144:	3730      	adds	r7, #48	@ 0x30
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	20001178 	.word	0x20001178

08006150 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006156:	e049      	b.n	80061ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006158:	4b2e      	ldr	r3, [pc, #184]	@ (8006214 <prvSwitchTimerLists+0xc4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006162:	4b2c      	ldr	r3, [pc, #176]	@ (8006214 <prvSwitchTimerLists+0xc4>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3304      	adds	r3, #4
 8006170:	4618      	mov	r0, r3
 8006172:	f7fe f909 	bl	8004388 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d02f      	beq.n	80061ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4413      	add	r3, r2
 8006194:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	429a      	cmp	r2, r3
 800619c:	d90e      	bls.n	80061bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006214 <prvSwitchTimerLists+0xc4>)
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4619      	mov	r1, r3
 80061b4:	4610      	mov	r0, r2
 80061b6:	f7fe f8ae 	bl	8004316 <vListInsert>
 80061ba:	e017      	b.n	80061ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061bc:	2300      	movs	r3, #0
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	2300      	movs	r3, #0
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	2100      	movs	r1, #0
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f7ff fd58 	bl	8005c7c <xTimerGenericCommand>
 80061cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10b      	bne.n	80061ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	603b      	str	r3, [r7, #0]
}
 80061e6:	bf00      	nop
 80061e8:	bf00      	nop
 80061ea:	e7fd      	b.n	80061e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061ec:	4b09      	ldr	r3, [pc, #36]	@ (8006214 <prvSwitchTimerLists+0xc4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1b0      	bne.n	8006158 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80061f6:	4b07      	ldr	r3, [pc, #28]	@ (8006214 <prvSwitchTimerLists+0xc4>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80061fc:	4b06      	ldr	r3, [pc, #24]	@ (8006218 <prvSwitchTimerLists+0xc8>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a04      	ldr	r2, [pc, #16]	@ (8006214 <prvSwitchTimerLists+0xc4>)
 8006202:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006204:	4a04      	ldr	r2, [pc, #16]	@ (8006218 <prvSwitchTimerLists+0xc8>)
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	6013      	str	r3, [r2, #0]
}
 800620a:	bf00      	nop
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20001170 	.word	0x20001170
 8006218:	20001174 	.word	0x20001174

0800621c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006222:	f000 f969 	bl	80064f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006226:	4b15      	ldr	r3, [pc, #84]	@ (800627c <prvCheckForValidListAndQueue+0x60>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d120      	bne.n	8006270 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800622e:	4814      	ldr	r0, [pc, #80]	@ (8006280 <prvCheckForValidListAndQueue+0x64>)
 8006230:	f7fe f820 	bl	8004274 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006234:	4813      	ldr	r0, [pc, #76]	@ (8006284 <prvCheckForValidListAndQueue+0x68>)
 8006236:	f7fe f81d 	bl	8004274 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800623a:	4b13      	ldr	r3, [pc, #76]	@ (8006288 <prvCheckForValidListAndQueue+0x6c>)
 800623c:	4a10      	ldr	r2, [pc, #64]	@ (8006280 <prvCheckForValidListAndQueue+0x64>)
 800623e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006240:	4b12      	ldr	r3, [pc, #72]	@ (800628c <prvCheckForValidListAndQueue+0x70>)
 8006242:	4a10      	ldr	r2, [pc, #64]	@ (8006284 <prvCheckForValidListAndQueue+0x68>)
 8006244:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006246:	2300      	movs	r3, #0
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	4b11      	ldr	r3, [pc, #68]	@ (8006290 <prvCheckForValidListAndQueue+0x74>)
 800624c:	4a11      	ldr	r2, [pc, #68]	@ (8006294 <prvCheckForValidListAndQueue+0x78>)
 800624e:	2110      	movs	r1, #16
 8006250:	200a      	movs	r0, #10
 8006252:	f7fe f92d 	bl	80044b0 <xQueueGenericCreateStatic>
 8006256:	4603      	mov	r3, r0
 8006258:	4a08      	ldr	r2, [pc, #32]	@ (800627c <prvCheckForValidListAndQueue+0x60>)
 800625a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800625c:	4b07      	ldr	r3, [pc, #28]	@ (800627c <prvCheckForValidListAndQueue+0x60>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006264:	4b05      	ldr	r3, [pc, #20]	@ (800627c <prvCheckForValidListAndQueue+0x60>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	490b      	ldr	r1, [pc, #44]	@ (8006298 <prvCheckForValidListAndQueue+0x7c>)
 800626a:	4618      	mov	r0, r3
 800626c:	f7fe fd52 	bl	8004d14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006270:	f000 f974 	bl	800655c <vPortExitCritical>
}
 8006274:	bf00      	nop
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20001178 	.word	0x20001178
 8006280:	20001148 	.word	0x20001148
 8006284:	2000115c 	.word	0x2000115c
 8006288:	20001170 	.word	0x20001170
 800628c:	20001174 	.word	0x20001174
 8006290:	20001224 	.word	0x20001224
 8006294:	20001184 	.word	0x20001184
 8006298:	08006c0c 	.word	0x08006c0c

0800629c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3b04      	subs	r3, #4
 80062ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3b04      	subs	r3, #4
 80062ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f023 0201 	bic.w	r2, r3, #1
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3b04      	subs	r3, #4
 80062ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062cc:	4a0c      	ldr	r2, [pc, #48]	@ (8006300 <pxPortInitialiseStack+0x64>)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3b14      	subs	r3, #20
 80062d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3b04      	subs	r3, #4
 80062e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f06f 0202 	mvn.w	r2, #2
 80062ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3b20      	subs	r3, #32
 80062f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062f2:	68fb      	ldr	r3, [r7, #12]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	08006305 	.word	0x08006305

08006304 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800630a:	2300      	movs	r3, #0
 800630c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800630e:	4b13      	ldr	r3, [pc, #76]	@ (800635c <prvTaskExitError+0x58>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006316:	d00b      	beq.n	8006330 <prvTaskExitError+0x2c>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	60fb      	str	r3, [r7, #12]
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	e7fd      	b.n	800632c <prvTaskExitError+0x28>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60bb      	str	r3, [r7, #8]
}
 8006342:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006344:	bf00      	nop
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0fc      	beq.n	8006346 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800634c:	bf00      	nop
 800634e:	bf00      	nop
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	20000014 	.word	0x20000014

08006360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006360:	4b07      	ldr	r3, [pc, #28]	@ (8006380 <pxCurrentTCBConst2>)
 8006362:	6819      	ldr	r1, [r3, #0]
 8006364:	6808      	ldr	r0, [r1, #0]
 8006366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636a:	f380 8809 	msr	PSP, r0
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	f380 8811 	msr	BASEPRI, r0
 800637a:	4770      	bx	lr
 800637c:	f3af 8000 	nop.w

08006380 <pxCurrentTCBConst2>:
 8006380:	20000c48 	.word	0x20000c48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop

08006388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006388:	4808      	ldr	r0, [pc, #32]	@ (80063ac <prvPortStartFirstTask+0x24>)
 800638a:	6800      	ldr	r0, [r0, #0]
 800638c:	6800      	ldr	r0, [r0, #0]
 800638e:	f380 8808 	msr	MSP, r0
 8006392:	f04f 0000 	mov.w	r0, #0
 8006396:	f380 8814 	msr	CONTROL, r0
 800639a:	b662      	cpsie	i
 800639c:	b661      	cpsie	f
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	df00      	svc	0
 80063a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063aa:	bf00      	nop
 80063ac:	e000ed08 	.word	0xe000ed08

080063b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063b6:	4b47      	ldr	r3, [pc, #284]	@ (80064d4 <xPortStartScheduler+0x124>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a47      	ldr	r2, [pc, #284]	@ (80064d8 <xPortStartScheduler+0x128>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d10b      	bne.n	80063d8 <xPortStartScheduler+0x28>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	613b      	str	r3, [r7, #16]
}
 80063d2:	bf00      	nop
 80063d4:	bf00      	nop
 80063d6:	e7fd      	b.n	80063d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063d8:	4b3e      	ldr	r3, [pc, #248]	@ (80064d4 <xPortStartScheduler+0x124>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a3f      	ldr	r2, [pc, #252]	@ (80064dc <xPortStartScheduler+0x12c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d10b      	bne.n	80063fa <xPortStartScheduler+0x4a>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	60fb      	str	r3, [r7, #12]
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop
 80063f8:	e7fd      	b.n	80063f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063fa:	4b39      	ldr	r3, [pc, #228]	@ (80064e0 <xPortStartScheduler+0x130>)
 80063fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	22ff      	movs	r2, #255	@ 0xff
 800640a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	b2db      	uxtb	r3, r3
 8006418:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800641c:	b2da      	uxtb	r2, r3
 800641e:	4b31      	ldr	r3, [pc, #196]	@ (80064e4 <xPortStartScheduler+0x134>)
 8006420:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006422:	4b31      	ldr	r3, [pc, #196]	@ (80064e8 <xPortStartScheduler+0x138>)
 8006424:	2207      	movs	r2, #7
 8006426:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006428:	e009      	b.n	800643e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800642a:	4b2f      	ldr	r3, [pc, #188]	@ (80064e8 <xPortStartScheduler+0x138>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3b01      	subs	r3, #1
 8006430:	4a2d      	ldr	r2, [pc, #180]	@ (80064e8 <xPortStartScheduler+0x138>)
 8006432:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	b2db      	uxtb	r3, r3
 800643c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006446:	2b80      	cmp	r3, #128	@ 0x80
 8006448:	d0ef      	beq.n	800642a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800644a:	4b27      	ldr	r3, [pc, #156]	@ (80064e8 <xPortStartScheduler+0x138>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f1c3 0307 	rsb	r3, r3, #7
 8006452:	2b04      	cmp	r3, #4
 8006454:	d00b      	beq.n	800646e <xPortStartScheduler+0xbe>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	60bb      	str	r3, [r7, #8]
}
 8006468:	bf00      	nop
 800646a:	bf00      	nop
 800646c:	e7fd      	b.n	800646a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800646e:	4b1e      	ldr	r3, [pc, #120]	@ (80064e8 <xPortStartScheduler+0x138>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	021b      	lsls	r3, r3, #8
 8006474:	4a1c      	ldr	r2, [pc, #112]	@ (80064e8 <xPortStartScheduler+0x138>)
 8006476:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006478:	4b1b      	ldr	r3, [pc, #108]	@ (80064e8 <xPortStartScheduler+0x138>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006480:	4a19      	ldr	r2, [pc, #100]	@ (80064e8 <xPortStartScheduler+0x138>)
 8006482:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	b2da      	uxtb	r2, r3
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800648c:	4b17      	ldr	r3, [pc, #92]	@ (80064ec <xPortStartScheduler+0x13c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a16      	ldr	r2, [pc, #88]	@ (80064ec <xPortStartScheduler+0x13c>)
 8006492:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006496:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006498:	4b14      	ldr	r3, [pc, #80]	@ (80064ec <xPortStartScheduler+0x13c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a13      	ldr	r2, [pc, #76]	@ (80064ec <xPortStartScheduler+0x13c>)
 800649e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80064a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064a4:	f000 f8da 	bl	800665c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064a8:	4b11      	ldr	r3, [pc, #68]	@ (80064f0 <xPortStartScheduler+0x140>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80064ae:	f000 f8f9 	bl	80066a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80064b2:	4b10      	ldr	r3, [pc, #64]	@ (80064f4 <xPortStartScheduler+0x144>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a0f      	ldr	r2, [pc, #60]	@ (80064f4 <xPortStartScheduler+0x144>)
 80064b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80064bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064be:	f7ff ff63 	bl	8006388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064c2:	f7ff f83f 	bl	8005544 <vTaskSwitchContext>
	prvTaskExitError();
 80064c6:	f7ff ff1d 	bl	8006304 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	e000ed00 	.word	0xe000ed00
 80064d8:	410fc271 	.word	0x410fc271
 80064dc:	410fc270 	.word	0x410fc270
 80064e0:	e000e400 	.word	0xe000e400
 80064e4:	20001274 	.word	0x20001274
 80064e8:	20001278 	.word	0x20001278
 80064ec:	e000ed20 	.word	0xe000ed20
 80064f0:	20000014 	.word	0x20000014
 80064f4:	e000ef34 	.word	0xe000ef34

080064f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	607b      	str	r3, [r7, #4]
}
 8006510:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006512:	4b10      	ldr	r3, [pc, #64]	@ (8006554 <vPortEnterCritical+0x5c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3301      	adds	r3, #1
 8006518:	4a0e      	ldr	r2, [pc, #56]	@ (8006554 <vPortEnterCritical+0x5c>)
 800651a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800651c:	4b0d      	ldr	r3, [pc, #52]	@ (8006554 <vPortEnterCritical+0x5c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d110      	bne.n	8006546 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006524:	4b0c      	ldr	r3, [pc, #48]	@ (8006558 <vPortEnterCritical+0x60>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00b      	beq.n	8006546 <vPortEnterCritical+0x4e>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	603b      	str	r3, [r7, #0]
}
 8006540:	bf00      	nop
 8006542:	bf00      	nop
 8006544:	e7fd      	b.n	8006542 <vPortEnterCritical+0x4a>
	}
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20000014 	.word	0x20000014
 8006558:	e000ed04 	.word	0xe000ed04

0800655c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006562:	4b12      	ldr	r3, [pc, #72]	@ (80065ac <vPortExitCritical+0x50>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10b      	bne.n	8006582 <vPortExitCritical+0x26>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	607b      	str	r3, [r7, #4]
}
 800657c:	bf00      	nop
 800657e:	bf00      	nop
 8006580:	e7fd      	b.n	800657e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006582:	4b0a      	ldr	r3, [pc, #40]	@ (80065ac <vPortExitCritical+0x50>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3b01      	subs	r3, #1
 8006588:	4a08      	ldr	r2, [pc, #32]	@ (80065ac <vPortExitCritical+0x50>)
 800658a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800658c:	4b07      	ldr	r3, [pc, #28]	@ (80065ac <vPortExitCritical+0x50>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d105      	bne.n	80065a0 <vPortExitCritical+0x44>
 8006594:	2300      	movs	r3, #0
 8006596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	f383 8811 	msr	BASEPRI, r3
}
 800659e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	20000014 	.word	0x20000014

080065b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065b0:	f3ef 8009 	mrs	r0, PSP
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	4b15      	ldr	r3, [pc, #84]	@ (8006610 <pxCurrentTCBConst>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	f01e 0f10 	tst.w	lr, #16
 80065c0:	bf08      	it	eq
 80065c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ca:	6010      	str	r0, [r2, #0]
 80065cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80065d4:	f380 8811 	msr	BASEPRI, r0
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f7fe ffb0 	bl	8005544 <vTaskSwitchContext>
 80065e4:	f04f 0000 	mov.w	r0, #0
 80065e8:	f380 8811 	msr	BASEPRI, r0
 80065ec:	bc09      	pop	{r0, r3}
 80065ee:	6819      	ldr	r1, [r3, #0]
 80065f0:	6808      	ldr	r0, [r1, #0]
 80065f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f6:	f01e 0f10 	tst.w	lr, #16
 80065fa:	bf08      	it	eq
 80065fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006600:	f380 8809 	msr	PSP, r0
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	f3af 8000 	nop.w

08006610 <pxCurrentTCBConst>:
 8006610:	20000c48 	.word	0x20000c48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop

08006618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	607b      	str	r3, [r7, #4]
}
 8006630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006632:	f7fe fecd 	bl	80053d0 <xTaskIncrementTick>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800663c:	4b06      	ldr	r3, [pc, #24]	@ (8006658 <xPortSysTickHandler+0x40>)
 800663e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	2300      	movs	r3, #0
 8006646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	f383 8811 	msr	BASEPRI, r3
}
 800664e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006650:	bf00      	nop
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	e000ed04 	.word	0xe000ed04

0800665c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006660:	4b0b      	ldr	r3, [pc, #44]	@ (8006690 <vPortSetupTimerInterrupt+0x34>)
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006666:	4b0b      	ldr	r3, [pc, #44]	@ (8006694 <vPortSetupTimerInterrupt+0x38>)
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800666c:	4b0a      	ldr	r3, [pc, #40]	@ (8006698 <vPortSetupTimerInterrupt+0x3c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a0a      	ldr	r2, [pc, #40]	@ (800669c <vPortSetupTimerInterrupt+0x40>)
 8006672:	fba2 2303 	umull	r2, r3, r2, r3
 8006676:	099b      	lsrs	r3, r3, #6
 8006678:	4a09      	ldr	r2, [pc, #36]	@ (80066a0 <vPortSetupTimerInterrupt+0x44>)
 800667a:	3b01      	subs	r3, #1
 800667c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800667e:	4b04      	ldr	r3, [pc, #16]	@ (8006690 <vPortSetupTimerInterrupt+0x34>)
 8006680:	2207      	movs	r2, #7
 8006682:	601a      	str	r2, [r3, #0]
}
 8006684:	bf00      	nop
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	e000e010 	.word	0xe000e010
 8006694:	e000e018 	.word	0xe000e018
 8006698:	20000008 	.word	0x20000008
 800669c:	10624dd3 	.word	0x10624dd3
 80066a0:	e000e014 	.word	0xe000e014

080066a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80066a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80066b4 <vPortEnableVFP+0x10>
 80066a8:	6801      	ldr	r1, [r0, #0]
 80066aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80066ae:	6001      	str	r1, [r0, #0]
 80066b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80066b2:	bf00      	nop
 80066b4:	e000ed88 	.word	0xe000ed88

080066b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066be:	f3ef 8305 	mrs	r3, IPSR
 80066c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b0f      	cmp	r3, #15
 80066c8:	d915      	bls.n	80066f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066ca:	4a18      	ldr	r2, [pc, #96]	@ (800672c <vPortValidateInterruptPriority+0x74>)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066d4:	4b16      	ldr	r3, [pc, #88]	@ (8006730 <vPortValidateInterruptPriority+0x78>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	7afa      	ldrb	r2, [r7, #11]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d20b      	bcs.n	80066f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
}
 80066f0:	bf00      	nop
 80066f2:	bf00      	nop
 80066f4:	e7fd      	b.n	80066f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006734 <vPortValidateInterruptPriority+0x7c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80066fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006738 <vPortValidateInterruptPriority+0x80>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d90b      	bls.n	800671e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	603b      	str	r3, [r7, #0]
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	e7fd      	b.n	800671a <vPortValidateInterruptPriority+0x62>
	}
 800671e:	bf00      	nop
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	e000e3f0 	.word	0xe000e3f0
 8006730:	20001274 	.word	0x20001274
 8006734:	e000ed0c 	.word	0xe000ed0c
 8006738:	20001278 	.word	0x20001278

0800673c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08a      	sub	sp, #40	@ 0x28
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006744:	2300      	movs	r3, #0
 8006746:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006748:	f7fe fd86 	bl	8005258 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800674c:	4b5c      	ldr	r3, [pc, #368]	@ (80068c0 <pvPortMalloc+0x184>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006754:	f000 f924 	bl	80069a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006758:	4b5a      	ldr	r3, [pc, #360]	@ (80068c4 <pvPortMalloc+0x188>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4013      	ands	r3, r2
 8006760:	2b00      	cmp	r3, #0
 8006762:	f040 8095 	bne.w	8006890 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01e      	beq.n	80067aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800676c:	2208      	movs	r2, #8
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4413      	add	r3, r2
 8006772:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	2b00      	cmp	r3, #0
 800677c:	d015      	beq.n	80067aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f023 0307 	bic.w	r3, r3, #7
 8006784:	3308      	adds	r3, #8
 8006786:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00b      	beq.n	80067aa <pvPortMalloc+0x6e>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	617b      	str	r3, [r7, #20]
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop
 80067a8:	e7fd      	b.n	80067a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d06f      	beq.n	8006890 <pvPortMalloc+0x154>
 80067b0:	4b45      	ldr	r3, [pc, #276]	@ (80068c8 <pvPortMalloc+0x18c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d86a      	bhi.n	8006890 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067ba:	4b44      	ldr	r3, [pc, #272]	@ (80068cc <pvPortMalloc+0x190>)
 80067bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067be:	4b43      	ldr	r3, [pc, #268]	@ (80068cc <pvPortMalloc+0x190>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067c4:	e004      	b.n	80067d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d903      	bls.n	80067e2 <pvPortMalloc+0xa6>
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1f1      	bne.n	80067c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067e2:	4b37      	ldr	r3, [pc, #220]	@ (80068c0 <pvPortMalloc+0x184>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d051      	beq.n	8006890 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2208      	movs	r2, #8
 80067f2:	4413      	add	r3, r2
 80067f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	1ad2      	subs	r2, r2, r3
 8006806:	2308      	movs	r3, #8
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	429a      	cmp	r2, r3
 800680c:	d920      	bls.n	8006850 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800680e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4413      	add	r3, r2
 8006814:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00b      	beq.n	8006838 <pvPortMalloc+0xfc>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	613b      	str	r3, [r7, #16]
}
 8006832:	bf00      	nop
 8006834:	bf00      	nop
 8006836:	e7fd      	b.n	8006834 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	1ad2      	subs	r2, r2, r3
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800684a:	69b8      	ldr	r0, [r7, #24]
 800684c:	f000 f90a 	bl	8006a64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006850:	4b1d      	ldr	r3, [pc, #116]	@ (80068c8 <pvPortMalloc+0x18c>)
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	4a1b      	ldr	r2, [pc, #108]	@ (80068c8 <pvPortMalloc+0x18c>)
 800685c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800685e:	4b1a      	ldr	r3, [pc, #104]	@ (80068c8 <pvPortMalloc+0x18c>)
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	4b1b      	ldr	r3, [pc, #108]	@ (80068d0 <pvPortMalloc+0x194>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d203      	bcs.n	8006872 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800686a:	4b17      	ldr	r3, [pc, #92]	@ (80068c8 <pvPortMalloc+0x18c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a18      	ldr	r2, [pc, #96]	@ (80068d0 <pvPortMalloc+0x194>)
 8006870:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	4b13      	ldr	r3, [pc, #76]	@ (80068c4 <pvPortMalloc+0x188>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	431a      	orrs	r2, r3
 800687c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006886:	4b13      	ldr	r3, [pc, #76]	@ (80068d4 <pvPortMalloc+0x198>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3301      	adds	r3, #1
 800688c:	4a11      	ldr	r2, [pc, #68]	@ (80068d4 <pvPortMalloc+0x198>)
 800688e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006890:	f7fe fcf0 	bl	8005274 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00b      	beq.n	80068b6 <pvPortMalloc+0x17a>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	60fb      	str	r3, [r7, #12]
}
 80068b0:	bf00      	nop
 80068b2:	bf00      	nop
 80068b4:	e7fd      	b.n	80068b2 <pvPortMalloc+0x176>
	return pvReturn;
 80068b6:	69fb      	ldr	r3, [r7, #28]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3728      	adds	r7, #40	@ 0x28
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	20004e84 	.word	0x20004e84
 80068c4:	20004e98 	.word	0x20004e98
 80068c8:	20004e88 	.word	0x20004e88
 80068cc:	20004e7c 	.word	0x20004e7c
 80068d0:	20004e8c 	.word	0x20004e8c
 80068d4:	20004e90 	.word	0x20004e90

080068d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d04f      	beq.n	800698a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068ea:	2308      	movs	r3, #8
 80068ec:	425b      	negs	r3, r3
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4413      	add	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	4b25      	ldr	r3, [pc, #148]	@ (8006994 <vPortFree+0xbc>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4013      	ands	r3, r2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10b      	bne.n	800691e <vPortFree+0x46>
	__asm volatile
 8006906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	60fb      	str	r3, [r7, #12]
}
 8006918:	bf00      	nop
 800691a:	bf00      	nop
 800691c:	e7fd      	b.n	800691a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00b      	beq.n	800693e <vPortFree+0x66>
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	60bb      	str	r3, [r7, #8]
}
 8006938:	bf00      	nop
 800693a:	bf00      	nop
 800693c:	e7fd      	b.n	800693a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	4b14      	ldr	r3, [pc, #80]	@ (8006994 <vPortFree+0xbc>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4013      	ands	r3, r2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01e      	beq.n	800698a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d11a      	bne.n	800698a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	4b0e      	ldr	r3, [pc, #56]	@ (8006994 <vPortFree+0xbc>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	43db      	mvns	r3, r3
 800695e:	401a      	ands	r2, r3
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006964:	f7fe fc78 	bl	8005258 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <vPortFree+0xc0>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4413      	add	r3, r2
 8006972:	4a09      	ldr	r2, [pc, #36]	@ (8006998 <vPortFree+0xc0>)
 8006974:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006976:	6938      	ldr	r0, [r7, #16]
 8006978:	f000 f874 	bl	8006a64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800697c:	4b07      	ldr	r3, [pc, #28]	@ (800699c <vPortFree+0xc4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3301      	adds	r3, #1
 8006982:	4a06      	ldr	r2, [pc, #24]	@ (800699c <vPortFree+0xc4>)
 8006984:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006986:	f7fe fc75 	bl	8005274 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800698a:	bf00      	nop
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	20004e98 	.word	0x20004e98
 8006998:	20004e88 	.word	0x20004e88
 800699c:	20004e94 	.word	0x20004e94

080069a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80069aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069ac:	4b27      	ldr	r3, [pc, #156]	@ (8006a4c <prvHeapInit+0xac>)
 80069ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00c      	beq.n	80069d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3307      	adds	r3, #7
 80069be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 0307 	bic.w	r3, r3, #7
 80069c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	4a1f      	ldr	r2, [pc, #124]	@ (8006a4c <prvHeapInit+0xac>)
 80069d0:	4413      	add	r3, r2
 80069d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006a50 <prvHeapInit+0xb0>)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069de:	4b1c      	ldr	r3, [pc, #112]	@ (8006a50 <prvHeapInit+0xb0>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	4413      	add	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069ec:	2208      	movs	r2, #8
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1a9b      	subs	r3, r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0307 	bic.w	r3, r3, #7
 80069fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a15      	ldr	r2, [pc, #84]	@ (8006a54 <prvHeapInit+0xb4>)
 8006a00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a02:	4b14      	ldr	r3, [pc, #80]	@ (8006a54 <prvHeapInit+0xb4>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2200      	movs	r2, #0
 8006a08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a0a:	4b12      	ldr	r3, [pc, #72]	@ (8006a54 <prvHeapInit+0xb4>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	1ad2      	subs	r2, r2, r3
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a20:	4b0c      	ldr	r3, [pc, #48]	@ (8006a54 <prvHeapInit+0xb4>)
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8006a58 <prvHeapInit+0xb8>)
 8006a2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	4a09      	ldr	r2, [pc, #36]	@ (8006a5c <prvHeapInit+0xbc>)
 8006a36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a38:	4b09      	ldr	r3, [pc, #36]	@ (8006a60 <prvHeapInit+0xc0>)
 8006a3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006a3e:	601a      	str	r2, [r3, #0]
}
 8006a40:	bf00      	nop
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	2000127c 	.word	0x2000127c
 8006a50:	20004e7c 	.word	0x20004e7c
 8006a54:	20004e84 	.word	0x20004e84
 8006a58:	20004e8c 	.word	0x20004e8c
 8006a5c:	20004e88 	.word	0x20004e88
 8006a60:	20004e98 	.word	0x20004e98

08006a64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a6c:	4b28      	ldr	r3, [pc, #160]	@ (8006b10 <prvInsertBlockIntoFreeList+0xac>)
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	e002      	b.n	8006a78 <prvInsertBlockIntoFreeList+0x14>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d8f7      	bhi.n	8006a72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d108      	bne.n	8006aa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	441a      	add	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	441a      	add	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d118      	bne.n	8006aec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	4b15      	ldr	r3, [pc, #84]	@ (8006b14 <prvInsertBlockIntoFreeList+0xb0>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d00d      	beq.n	8006ae2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	441a      	add	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	e008      	b.n	8006af4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8006b14 <prvInsertBlockIntoFreeList+0xb0>)
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	601a      	str	r2, [r3, #0]
 8006aea:	e003      	b.n	8006af4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d002      	beq.n	8006b02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b02:	bf00      	nop
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	20004e7c 	.word	0x20004e7c
 8006b14:	20004e84 	.word	0x20004e84

08006b18 <memset>:
 8006b18:	4402      	add	r2, r0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d100      	bne.n	8006b22 <memset+0xa>
 8006b20:	4770      	bx	lr
 8006b22:	f803 1b01 	strb.w	r1, [r3], #1
 8006b26:	e7f9      	b.n	8006b1c <memset+0x4>

08006b28 <__libc_init_array>:
 8006b28:	b570      	push	{r4, r5, r6, lr}
 8006b2a:	4d0d      	ldr	r5, [pc, #52]	@ (8006b60 <__libc_init_array+0x38>)
 8006b2c:	4c0d      	ldr	r4, [pc, #52]	@ (8006b64 <__libc_init_array+0x3c>)
 8006b2e:	1b64      	subs	r4, r4, r5
 8006b30:	10a4      	asrs	r4, r4, #2
 8006b32:	2600      	movs	r6, #0
 8006b34:	42a6      	cmp	r6, r4
 8006b36:	d109      	bne.n	8006b4c <__libc_init_array+0x24>
 8006b38:	4d0b      	ldr	r5, [pc, #44]	@ (8006b68 <__libc_init_array+0x40>)
 8006b3a:	4c0c      	ldr	r4, [pc, #48]	@ (8006b6c <__libc_init_array+0x44>)
 8006b3c:	f000 f826 	bl	8006b8c <_init>
 8006b40:	1b64      	subs	r4, r4, r5
 8006b42:	10a4      	asrs	r4, r4, #2
 8006b44:	2600      	movs	r6, #0
 8006b46:	42a6      	cmp	r6, r4
 8006b48:	d105      	bne.n	8006b56 <__libc_init_array+0x2e>
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
 8006b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b50:	4798      	blx	r3
 8006b52:	3601      	adds	r6, #1
 8006b54:	e7ee      	b.n	8006b34 <__libc_init_array+0xc>
 8006b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b5a:	4798      	blx	r3
 8006b5c:	3601      	adds	r6, #1
 8006b5e:	e7f2      	b.n	8006b46 <__libc_init_array+0x1e>
 8006b60:	08007a20 	.word	0x08007a20
 8006b64:	08007a20 	.word	0x08007a20
 8006b68:	08007a20 	.word	0x08007a20
 8006b6c:	08007a24 	.word	0x08007a24

08006b70 <memcpy>:
 8006b70:	440a      	add	r2, r1
 8006b72:	4291      	cmp	r1, r2
 8006b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b78:	d100      	bne.n	8006b7c <memcpy+0xc>
 8006b7a:	4770      	bx	lr
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b86:	4291      	cmp	r1, r2
 8006b88:	d1f9      	bne.n	8006b7e <memcpy+0xe>
 8006b8a:	bd10      	pop	{r4, pc}

08006b8c <_init>:
 8006b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8e:	bf00      	nop
 8006b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b92:	bc08      	pop	{r3}
 8006b94:	469e      	mov	lr, r3
 8006b96:	4770      	bx	lr

08006b98 <_fini>:
 8006b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9a:	bf00      	nop
 8006b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9e:	bc08      	pop	{r3}
 8006ba0:	469e      	mov	lr, r3
 8006ba2:	4770      	bx	lr
